{
    --------------------------------------------
    Filename: com.serial.terminal.spin2
    Description: PST-compatible Serial terminal,
     using com.serial smartpin-based serial driver
     for low-level async serial.
    Author: Jesse Burt
    Created: Jun 15, 2019
    Updated: Jul 8, 2020
    See end of file for terms of use.
    --------------------------------------------
}

#include "lib.terminal.spin2"

CON
' PST-compatible Terminal control codes
    HM              = 1                                     ' Home cursor
    PC              = 2                                     ' Position Cursor in x, y

    ML              = 3                                     ' Move cursor Left
    MR              = 4                                     ' Move cursor Right
    MU              = 5                                     ' Move cursor Up
    MD              = 6                                     ' Move cursor Down

    CE              = 11
    CB              = 12
    CS              = 16

    PX              = 14                                    ' Position cursor in X
    PY              = 15                                    ' Position cursor in Y

OBJ

    ser : "com.serial"
    int : "string.integer"

PUB Start(baudrate): okay

    okay := ser.Start(baudrate)
    Clear()
    return okay

PUB StartRxTx(rxpin, txpin, mode, baudrate): okay

    return ser.StartRxTx(rxpin, txpin, mode, baudrate)

PUB BinIn(): result
' Read a binary number as a string, converted to a number
'   Returns: Number
    StrInMax(@buffer, MAXSTR_LENGTH)
    return int.StrToBase(@buffer, 2)

PUB Char(ch)
' Send a character
    ser.Char(ch)

PUB CharIn(): result
' Read a character
'   Returns: Byte
    return ser.CharIn()

PUB Chars(ch, nr_chars)
' Send character repeatedly, nr_chars
    repeat nr_chars
        ser.Char(ch)

PUB Clear()
' Clear the terminal screen
    ser.Char(CS)

PUB DecIn(): result
' Read a decimal number as a string, converted to a number
'   Returns: Number
    StrInMax(@buffer, MAXSTR_LENGTH)
    return int.StrToBase(@buffer, 10)

PUB HexIn(): result
' Read a hexadecimal number as a string, converted to a number
'   Returns: Number
    StrInMax(@buffer, MAXSTR_LENGTH)
    return int.StrToBase(@buffer, 16)

PUB MoveDown(y)
' Move cursor down y lines.
    repeat y
        ser.Char(MD)

PUB MoveLeft(x)
' Move cursor left x characters.
    repeat x
        ser.Char(ML)

PUB MoveRight(x)
' Move cursor right x characters.
    repeat x
        ser.Char(MR)

PUB MoveUp(y)
' Move cursor up y lines.
    repeat y
        ser.Char(MU)

PUB ReadLine(ptr_line, maxline): size | c
' Read a string, terminated by a carriage return or line-feed, up to maxline length
'   Returns: Size of line read, in bytes
    repeat
        case c := CharIn()
            BS:     if size
                        size--
                        ser.Char(c)
            CR, LF: byte[ptr_line][size] := 0
                    ser.Char(c)
                    quit
            other:  if size < maxline
                        byte[ptr_line][size++] := c
                        ser.Char(c)

PUB RXCheck(): rxbyte
' Check if byte received (never waits)
'   Returns:
'       -1 if no byte, otherwise byte
    return ser.RXCheck()
 
PUB StrIn(stringptr)
' Read a string
    StrInMax(stringptr, -1)

PUB StrInMax(stringptr, maxcount)
' Read a string, up to maxcount characters
    repeat while (maxcount--)                               ' While maxcount not reached
        if (byte[stringptr++] := ser.CharIn()) == CR        ' Get chars until CR
            quit
    byte[stringptr+(byte[stringptr-1] == CR)] := 0          ' Zero terminate string; overwrite CR or append 0 char

