#include "lib.terminal.spin2"

OBJ

    ser : "com.serial"
    int : "string.integer"

PUB Start(baudrate) : okay

    okay := ser.Start(baudrate)
    Clear
    return okay

PUB StartRxTx(rxpin, txpin, mode, baudrate)

    return ser.StartRxTx(rxpin, txpin, mode, baudrate)

PUB BinIn

    StrInMax(@str_buffer, MAXSTR_LENGTH)
    return int.StrToBase(@str_buffer, 2)

PUB Char(ch)

    ser.Char(ch)

PUB CharIn

    return ser.CharIn

PUB Chars(ch, size)

    repeat size
        ser.Char(ch)

PUB Clear

    ser.Char(CS)

PUB DecIn

    StrInMax(@str_buffer, MAXSTR_LENGTH)
    return int.StrToBase(@str_buffer, 10)

PUB HexIn

    StrInMax(@str_buffer, MAXSTR_LENGTH)
    return int.StrToBase(@str_buffer, 16)

PUB MoveDown(y)
{{
    Move cursor down y lines.
}}

    repeat y
        ser.Char(MD)

PUB MoveLeft(x)
{{
    Move cursor left x characters.
}}

    repeat x
        ser.Char(ML)

PUB MoveRight(x)
{{
    Move cursor right x characters.
}}

    repeat x
        ser.Char(MR)

PUB MoveUp(y)
{{
    Move cursor up y lines.
}}

    repeat y
        ser.Char(MU)

PUB NewLine
' Print a newline
    ser.Char(CR)
    ser.Char(LF)

PUB ReadLine(line, maxline) : size | c

    repeat
        case c := CharIn
            BS:     if size
                        size--
                        ser.Char(c)
            NL, LF: byte[line][size] := 0
                    ser.Char(c)
                    quit
            other:  if size < maxline
                        byte[line][size++] := c
                        ser.Char(c)
 
PUB StrIn(stringptr)

    StrInMax(stringptr, -1)

PUB StrInMax(stringptr, maxcount)

    repeat while (maxcount--)                                                     'While maxcount not reached
        if (byte[stringptr++] := ser.CharIn) == NL                                      'Get chars until NL
            quit
    byte[stringptr+(byte[stringptr-1] == NL)]~                                    'Zero terminate string; overwrite NL or append 0 char


