{
    --------------------------------------------
    Filename: wireless.transceiver.sx1276.spi.spin2
    Author: Jesse Burt
    Description: Driver for the SEMTECH SX1276
        LoRa/FSK/OOK transceiver (P2 version)
    Copyright (c) 2020
    Started Nov 3, 2019
    Updated Jun 24, 2020
    See end of file for terms of use.
    --------------------------------------------
}

CON

    FXOSC                   = 32_000_000
    TWO_19                  = 1 << 19
    TWO_24                  = 1 << 24
    FPSCALE                 = 10_000_000
    FSTEP                   = 61_0351562  ' (FXOSC / TWO_19) * FPSCALE
' Long-range modes
    LRMODE_FSK_OOK          = 0
    LRMODE_LORA             = 1

' Device modes
    DEVMODE_SLEEP           = %000
    DEVMODE_STDBY           = %001
    DEVMODE_FSTX            = %010
    DEVMODE_TX              = %011
    DEVMODE_FSRX            = %100
    DEVMODE_RXCONTINUOUS    = %101
    DEVMODE_RXSINGLE        = %110
    DEVMODE_CAD             = %111

' Transmit modes
    TXMODE_NORMAL           = 0
    TXMODE_CONT             = 1

' DIO function mapping
    DIO0_RXDONE             = %00
    DIO0_TXDONE             = %01
    DIO0_CADDONE            = %10

    DIO1_RXTIMEOUT          = %00
    DIO1_FHSSCHANGECHANNEL  = %01
    DIO1_CADDETECTED        = %10

    DIO2_FHSSCHANGECHANNEL  = %00
    DIO2_SYNCADDRESS        = %11

    DIO3_CADDONE            = %00
    DIO3_VALIDHEADER        = %01
    DIO3_PAYLOADCRCERROR    = %10

    DIO4_CADDETECTED        = %00
    DIO4_PLLLOCK            = %01

    DIO5_MODEREADY          = %00
    DIO5_CLKOUT             = %01

' Clock output modes
    CLKOUT_RC               = 6
    CLKOUT_OFF              = 7

' Power Amplifier output pin selection
    PAOUT_RFO               = 0
    PAOUT_PABOOST           = 1 << core.FLD_PASELECT

VAR

    byte _CS, _MOSI, _MISO, _SCK

OBJ

    spi : "com.spi"
    core: "core.con.sx1276"
    u64 : "math.unsigned64"

PUB Null()
''This is not a top-level object

PUB Start(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SCK_FREQ=5_000_000): okay | tmp

    if lookdown(CS_PIN: 0..63) and lookdown(SCK_PIN: 0..63) and lookdown(MOSI_PIN: 0..63) and lookdown(MISO_PIN: 0..63)
        if SCK_FREQ >= 1 and SCK_FREQ <= core.SCK_MAX_FREQ
            if okay := spi.start (SCK_PIN, MOSI_PIN, MISO_PIN, SCK_FREQ)
                waitms (10)
                _CS := CS_PIN
                _MOSI := MOSI_PIN
                _MISO := MISO_PIN
                _SCK := SCK_PIN

                pinh(_CS)
                tmp := DeviceID()
                if lookdown(tmp: $11, $12)
                    return okay

    return                                                'If we got here, something went wrong

PUB Stop()
'

PUB AGCMode(enabled=-2): result | tmp
' Enable AGC
'   Valid values:
'       TRUE(-1 or 1), *FALSE (0)
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.MODEMCONFIG3, 1, @tmp)
    case abs(enabled)
        0, 1:
            enabled := (abs(enabled) & %1) << core.FLD_AGCAUTOON
        OTHER:
            result := ((tmp >> core.FLD_AGCAUTOON) & %1) * TRUE
            return

    tmp &= core.MASK_AGCAUTOON
    tmp := (tmp | enabled) & core.MODEMCONFIG3_MASK
    writeReg(core.MODEMCONFIG3, 1, @tmp)

PUB CarrierFreq(freq=-2): result | tmp, opmode_tmp
' Set carrier frequency, in Hz
'   Valid values: See case table below
'   Any other value polls the chip and returns the current setting
'   NOTE: The default is 434_000_000
    tmp := $00_00_00
    readReg(core.FRFMSB, 3, @tmp)
    case freq
        137_000_000..175_000_000, 410_000_000..525_000_000, 862_000_000..1_020_000_000:
            freq := u64.MultDiv (freq, FPSCALE, FSTEP)
        OTHER:
            result := u64.MultDiv (FSTEP, tmp, FPSCALE)
            return

    opmode_tmp := OpMode
    OpMode (DEVMODE_STDBY)
    writeReg(core.FRFMSB, 3, @freq)
    OpMode (opmode_tmp)

PUB Channel(number=-2): result | tmp
' Set LoRa uplink channel
'   Valid values: 0..63
'   Any other value polls the chip and returns the current setting
'   NOTE: US band plan (915MHz)
    case number
        0..63:
            tmp := 902_300_000 + (200_000 * number)
            CarrierFreq(tmp)
        OTHER:
            tmp := CarrierFreq
            result := (tmp - 902_300_000) / 200_000
            return

PUB ClkOut(divisor=-2): result | tmp
' Set clkout frequency, as a divisor of FXOSC
'   Valid values:
'       1, 2, 4, 8, 16, 32, CLKOUT_RC (6), CLKOUT_OFF (7)
'   Any other value polls the chip and returns the current setting
'   NOTE: For optimal efficiency, it is recommended to disable the clock output (CLKOUT_OFF)
'       unless needed
    tmp := $00
    readReg(core.OSC, 1, @tmp)
    case divisor
        1, 2, 4, 8, 16, 32, CLKOUT_RC, CLKOUT_OFF:
            divisor := lookdownz(divisor: 1, 2, 4, 8, 16, 32, CLKOUT_RC, CLKOUT_OFF)
        OTHER:
            result := tmp & core.BITS_CLKOUT
            return lookupz(result: 1, 2, 4, 8, 16, 32, CLKOUT_RC, CLKOUT_OFF)

    tmp &= core.MASK_CLKOUT
    tmp := (tmp | divisor) & core.OSC_MASK
    writeReg(core.OSC, 1, @tmp)

PUB CodeRate(rate=-2): result | tmp
' Set Error code rate
'   Valid values:
'                   k/n
'      *$04_05  =   4/5
'       $04_06  =   4/6
'       $04_07  =   4/7
'       $04_08  =   4/8
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.MODEMCONFIG1, 1, @tmp)
    case rate
        $04_05..$04_08:
            rate := lookdown(rate: $04_05, $04_06, $04_07, $04_08) << core.FLD_CODINGRATE
        OTHER:
            result := (tmp >> core.FLD_CODINGRATE) & core.BITS_CODINGRATE
            return lookup(result: $04_05, $04_06, $04_07, $04_08)

    tmp &= core.MASK_CODINGRATE
    tmp := (tmp | rate) & core.MODEMCONFIG1_MASK
    writeReg(core.MODEMCONFIG1, 1, @tmp)

PUB CRCCheckEnabled(enabled=-2): result | tmp
' Enable CRC generation and check on payload
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.MODEMCONFIG2, 1, @tmp)
    case abs(enabled)
        0, 1:
            enabled := abs(enabled) << core.FLD_RXPAYLOADCRCON
        OTHER:
            result := ((tmp >> core.FLD_RXPAYLOADCRCON) & %1) * TRUE
            return

    tmp &= core.MASK_RXPAYLOADCRCON
    tmp := (tmp | enabled) & core.MODEMCONFIG2_MASK
    writeReg(core.MODEMCONFIG2, 1, @tmp)

PUB DataRateCorrection(ppm=-2): result
' Set data rate offset value used in conjunction with AFC, in ppm
'   Valid values: 0..255
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.PPMCORRECTION, 1, @result)
    case ppm
        0..255:
        OTHER:
            return

    writeReg(core.PPMCORRECTION, 1, @ppm)

PUB DeviceID(): result
' Version code of the chip
'   Returns:
'       Bits 7..4: full revision number
'       Bits 3..0: metal mask revision number
'   Known values: $11, $12
    result := $00
    readReg(core.VERSION, 1, @result)

PUB GPIO0(mode=-2): result | tmp
' Assert DIO0 pin on set mode
'   Valid values:
'       DIO0_RXDONE (0) - Packet reception complete
'       DIO0_TXDONE (64) - FIFO payload transmission complete
'       DIO0_CADDONE (128) - Channel Activity Detected
    tmp := $00
    readReg(core.DIOMAPPING1, 1, @tmp)
    case mode
        DIO0_RXDONE, DIO0_TXDONE, DIO0_CADDONE:
            mode <<= core.FLD_DIO0MAPPING
        OTHER:
            result := (tmp >> core.FLD_DIO0MAPPING) & %11
            return

    tmp &= core.MASK_DIO0MAPPING
    tmp := (tmp | mode) & core.DIOMAPPING1_MASK
    writeReg(core.DIOMAPPING1, 1, @tmp)

PUB GPIO1(mode=-2): result | tmp
' Assert DIO1 pin on set mode
'   Valid values:
'       DIO1_RXTIMEOUT (0) - Packet reception timed out
'       DIO1_FHSSCHANGECHANNEL (64) - FHSS Changed channel
'       DIO1_CADDETECTED (128) - Channel Activity Detected
    tmp := $00
    readReg(core.DIOMAPPING1, 1, @tmp)
    case mode
        DIO1_RXTIMEOUT, DIO1_FHSSCHANGECHANNEL, DIO1_CADDETECTED:
            mode <<= core.FLD_DIO1MAPPING
        OTHER:
            result := (tmp >> core.FLD_DIO1MAPPING) & %11
            return

    tmp &= core.MASK_DIO1MAPPING
    tmp := (tmp | mode) & core.DIOMAPPING1_MASK
    writeReg(core.DIOMAPPING1, 1, @tmp)

PUB GPIO2(mode=-2): result | tmp
' Assert DIO2 pin on set mode
'   Valid values:
'       DIO2_FHSSCHANGECHANNEL (0) - FHSS Changed channel
'       DIO2_FHSSCHANGECHANNEL (64) - FHSS Changed channel
'       DIO2_FHSSCHANGECHANNEL (128) - FHSS Changed channel
    tmp := $00
    readReg(core.DIOMAPPING1, 1, @tmp)
    case mode
        DIO2_FHSSCHANGECHANNEL, DIO2_SYNCADDRESS:
            mode <<= core.FLD_DIO2MAPPING

        OTHER:
            result := (tmp >> core.FLD_DIO2MAPPING) & %11
            return

    tmp &= core.MASK_DIO2MAPPING
    tmp := (tmp | mode) & core.DIOMAPPING1_MASK
    writeReg(core.DIOMAPPING1, 1, @tmp)

PUB GPIO3(mode=-2): result | tmp
' Assert DIO3 pin on set mode
'   Valid values:
'       DIO3_CADDONE (0) - Channel Activity Detection complete
'       DIO3_VALIDHEADER (64) - Valider header received in RX mode
'       DIO3_PAYLOADCRCERROR (128) - CRC error in received payload
    tmp := $00
    readReg(core.DIOMAPPING1, 1, @tmp)
    case mode
        DIO3_CADDONE, DIO3_VALIDHEADER, DIO3_PAYLOADCRCERROR:
            mode <<= core.FLD_DIO3MAPPING
        OTHER:
            return tmp & %11
            return

    tmp &= core.MASK_DIO3MAPPING
    tmp := (tmp | mode) & core.DIOMAPPING1_MASK
    writeReg(core.DIOMAPPING1, 1, @tmp)

PUB GPIO4(mode=-2): result | tmp
' Assert DIO4 pin on set mode
'   Valid values:
'       DIO4_CADDETECTED (0) - Channel Activity Detected
'       DIO4_PLLLOCK (64) - PLL Locked
'       DIO4_PLLLOCK (128) - PLL Locked
    tmp := $00
    readReg(core.DIOMAPPING2, 1, @tmp)
    case mode
        DIO4_CADDETECTED, DIO4_PLLLOCK:
            mode <<= core.FLD_DIO4MAPPING
        OTHER:
            result := (tmp >> core.FLD_DIO4MAPPING) & %11
            return

    tmp &= core.MASK_DIO4MAPPING
    tmp := (tmp | mode) & core.DIOMAPPING2_MASK
    writeReg(core.DIOMAPPING2, 1, @tmp)

PUB GPIO5(mode=-2): result | tmp
' Assert DIO5 pin on set mode
'   Valid values:
'       DIO5_MODEREADY (0) - Requested operation mode is ready
'       DIO5_CLKOUT (64) - Output system clock
'       DIO5_CLKOUT (128) - Output system clock
    readReg(core.DIOMAPPING2, 1, @tmp)
    case mode
        DIO5_MODEREADY, DIO5_CLKOUT:
            mode <<= core.FLD_DIO5MAPPING
        OTHER:
            result := (tmp >> core.FLD_DIO5MAPPING) & %11
            return

    tmp &= core.MASK_DIO5MAPPING
    tmp := (tmp | mode) & core.DIOMAPPING2_MASK
    writeReg(core.DIOMAPPING2, 1, @tmp)

PUB FreqError(): result | tmp, bw
' Estimated frequency error from modem
    tmp := $0_00_00
    readReg(core.FEIMSB, 3, @tmp)
    bw := RXBandwidth()
    result := u64.MultDiv (tmp, TWO_24, FXOSC)
    return result * (bw / 500)

PUB FIFOAddrPointer(fifo_ptr=-2): result
' Set SPI interface address pointer in FIFO data buffer
'   Valid values: $00..$FF
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.FIFOADDRPTR, 1, @result)
    case fifo_ptr
        $00..$FF:
        OTHER:
            return

    writeReg(core.FIFOADDRPTR, 1, @fifo_ptr)

PUB FIFORXBasePtr(addr=-2): result
' Set start address within FIFO for received data
'   Valid values: $00..$FF
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.FIFORXBASEADDR, 1, @result)
    case addr
        $00..$FF:
        OTHER:
            return

    writeReg(core.FIFORXBASEADDR, 1, @addr)

PUB FIFOTXBasePtr(addr=-2): result
' Set start address within FIFO for transmitted data
'   Valid values: $00..$FF
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.FIFOTXBASEADDR, 1, @result)
    case addr
        $00..$FF:
        OTHER:
            return

    writeReg(core.FIFOTXBASEADDR, 1, @addr)

PUB FIFORXCurrentAddr(): result
' Start address (in FIFO) of last packet received
'   Returns: Starting address of last packet received
    readReg(core.FIFORXCURRENTADDR, 1, @result)

PUB FIFORXPointer(): result
' Current value of receive FIFO pointer
'   Returns: Address of last byte written by LoRa receiver
    readReg(core.FIFORXBYTEADDR, 1, @result)

PUB FSKRampTime(uSec=-2): result | tmp
' Set Rise/fall time of FSK ramp up/down, in microseconds
'   Valid values: 3400, 2000, 1000, 500, 250, 125, 100, 62, 50, *40, 31, 25, 20, 15, 12, 10
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.PARAMP, 1, @tmp)
    case uSec
        3400, 2000, 1000, 500, 250, 125, 100, 62, 50, 40, 31, 25, 20, 15, 12, 10:
            uSec := lookdownz(uSec: 3400, 2000, 1000, 500, 250, 125, 100, 62, 50, 40, 31, 25, 20, 15, 12, 10)
        OTHER:
            result := lookupz(tmp: 3400, 2000, 1000, 500, 250, 125, 100, 62, 50, 40, 31, 25, 20, 15, 12, 10) & core.BITS_PARAMP
            return

    writeReg(core.PARAMP, 1, @uSec)

PUB HeaderInfoValid(): result

    result := ((ModemStatus >> 3) & %1) * TRUE

PUB HopChannel(): result
' Returns current frequency hopping channel
    readReg(core.HOPCHANNEL, 1, @result)
    result &= core.BITS_FHSSPRESENTCHANNEL

PUB HopPeriod(symb_periods=-2): result
' Set symbol periods between frequency hops
'   Valid values: 0..255
'   Any other value polls the chip and returns the current setting
'   NOTE: The first hop always occurs after the first header symbol
'   NOTE: 0 effectively disables hopping
    result := $00
    readReg(core.HOPPERIOD, 1, @result)
    case symb_periods
        0..255:
        OTHER:
            return

    writeReg(core.HOPPERIOD, 1, @symb_periods)

PUB Idle()
' Change chip state to idle (standby)
    OpMode(DEVMODE_STDBY)

PUB ImplicitHeaderMode(enabled=-2): result | tmp
' Enable implicit header mode
'   Valid values:
'       TRUE(-1 or 1), *FALSE (0)
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.MODEMCONFIG1, 1, @tmp)
    case abs(enabled)
        0, 1:
            enabled := abs(enabled) & %1
        OTHER:
            result := (tmp & %1) * TRUE
            return

    tmp &= core.MASK_IMPL_HEADERMODEON
    tmp := (tmp | enabled) & core.MODEMCONFIG1_MASK
    writeReg(core.MODEMCONFIG1, 1, @tmp)

PUB Interrupt(clear_mask=-2): result
' Read or clear interrupt flags
'   Returns: Interrupt flags as a mask
'   Bits set are asserted
'   Set bits to clear the corresponding interrupt flags
'   Bits %76543210
'   Bit 7: Receive timeout
'       6: Receive done
'       5: Payload CRC error
'       4: Valid header
'       3: Transmit done
'       2: CAD done
'       1: FHSS change channel
'       0: CAD detected
    result := $00
    readReg(core.IRQFLAGS, 1, @result)
    case clear_mask
        %0000_0001..%1111_1111:
            writeReg(core.IRQFLAGS, 1, @clear_mask)
        OTHER:
            return

PUB IntMask(mask=-2): result
' Set interrupt mask
'   Valid values:
'       Set a bit to disable the interrupt flag
'       Bits: 76543210
'       Bit 7: Receive timeout
'           6: Receive done
'           5: Payload CRC error
'           4: Valid header
'           3: Transmit done
'           2: CAD done
'           1: FHSS change channel
'           0: CAD detected
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.IRQFLAGS_MASK, 1, @result)
    case mask
        0..255:
        OTHER:
            return

    writeReg(core.IRQFLAGS_MASK, 1, @mask)

PUB LastHeaderCodingRate(): result
' Returns coding rate of last header received
    readReg(core.MODEMSTAT, 1, @result)
    result := lookup(result >> 5: $0405, $0406, $0407, $0408)

PUB LastHeaderCRC(): result
' Indicates if last header received with CRC on
'   Returns:
'       0: Header indicates CRC is off
'       1: Header indicates CRC is on
    readReg(core.HOPCHANNEL, 1, @result)
    result := (result >> core.FLD_CRCONPAYLOAD) & %1

PUB LastPacketBytes(): result
' Returns number of payload bytes of last packet received
    readReg(core.RXNBBYTES, 1, @result)

PUB LNAGain(dB=-2): result | tmp
' Set LNA gain, in dB
'   Valid values: *0 (Maximum gain), -6, -12, -24, -26, -48
'   Any other value polls the chip and returns the current setting
'   NOTE: This setting will have no effect if AGC is enabled
    tmp := $00
    readReg(core.LNA, 1, @tmp)
    case dB
        0, -6, -12, -24, -26, -48:
            dB := lookdown(dB: 0, -6, -12, -24, -26, -48) << core.FLD_LNAGAIN
        OTHER:
            result := (tmp >> core.FLD_LNAGAIN) & core.BITS_LNAGAIN
            return lookup(result: 0, -6, -12, -24, -26, -48)

    tmp &= core.MASK_LNAGAIN
    tmp := (tmp | dB) & core.LNA_MASK
    writeReg(core.LNA, 1, @tmp)

PUB LongRangeMode(mode=-2): result | tmp
' Set long-range mode
'   Valid values:
'      *LRMODE_FSK_OOK (0): FSK, OOK packet radio mode
'       LRMODE_LORA (1): LoRa radio mode
'   Any other value polls the chip and returns the current setting
'   NOTE: The operating mode will be set to STANDBY (idle) after switching long-range modes
    tmp := $00
    readReg(core.OPMODE, 1, @tmp)
    case mode
        LRMODE_FSK_OOK, LRMODE_LORA:
            mode := mode << core.FLD_LONGRANGEMODE
        OTHER:
            result := (tmp >> core.FLD_LONGRANGEMODE) & %1
            return

    tmp &= core.MASK_MODE                   ' Set operating mode to SLEEP
    tmp &= core.MASK_LONGRANGEMODE
    tmp := (tmp | mode) & core.OPMODE_MASK
    writeReg(core.OPMODE, 1, @tmp)

    waitms(10)
    OpMode(DEVMODE_STDBY)

PUB LowDataRateOptimize(enabled=-2): result | tmp
' Optimize for low data rates
'   Valid values:
'       TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
'   NOTE: This setting is mandated when the symbol length exceeds 16ms
    tmp := $00
    readReg(core.MODEMCONFIG3, 1, @tmp)
    case abs(enabled)
        0, 1:
            enabled := abs(enabled) << core.FLD_LOWDATARATEOPTIMIZE
        OTHER:
            result := ((tmp >> core.FLD_LOWDATARATEOPTIMIZE) & %1) * TRUE
            return

    tmp &= core.MASK_LOWDATARATEOPTIMIZE
    tmp := (tmp | enabled) & core.MODEMCONFIG3_MASK
    writeReg(core.MODEMCONFIG3, 1, @tmp)

PUB LowFreqMode(enabled=-2): result | tmp
' Enable Low frequency-specific register access
'   Valid values:
'       TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.OPMODE, 1, @tmp)
    case abs(enabled)
        0, 1:
            enabled := (abs(enabled) << core.FLD_LOWFREQUENCYMODEON)
        OTHER:
            result := ((tmp >> core.FLD_LOWFREQUENCYMODEON) & %1) * TRUE
            return

    tmp &= core.MASK_LOWFREQUENCYMODEON
    tmp := (tmp | enabled) & core.OPMODE_MASK
    writeReg(core.OPMODE, 1, @tmp)

PUB ModemClear(): result
' Return modem clear status
    result := ((ModemStatus() >> 4) & %1) * TRUE

PUB ModemStatus(): result
' Return modem status bitmask
    readReg(core.MODEMSTAT, 1, @result)
    result &= core.BITS_MODEMSTATUS

PUB OpMode(mode=-2): result | tmp
' Set device operating mode
'   Valid values:
'       DEVMODE_SLEEP (%000): Sleep
'      *DEVMODE_STDBY (%001): Standby
'       DEVMODE_FSTX (%010): Frequency synthesis TX
'       DEVMODE_TX (%011): Transmit
'       DEVMODE_FSRX (%100): Frequency synthesis RX
'       DEVMODE_RXCONTINUOUS (%101): Receive continuous
'       DEVMODE_RXSINGLE (%110): Receive single
'       DEVMODE_CAD (%111): Channel activity detection
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.OPMODE, 1, @tmp)
    case mode
        DEVMODE_SLEEP..DEVMODE_CAD:
        OTHER:
            result := tmp & core.BITS_MODE
            return

    tmp &= core.MASK_MODE
    tmp := (tmp | mode) & core.OPMODE_MASK
    writeReg(core.OPMODE, 1, @tmp)

PUB OverCurrentProt(enabled=-2): result | tmp
' Enable over-current protection for PA
'   Valid values:
'      *TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.OCP, 1, @tmp)
    case abs(enabled)
        0, 1:
            enabled := abs(enabled) << core.FLD_OCPON
        OTHER:
            result := ((tmp >> core.FLD_OCPON) & %1) * TRUE
            return

    tmp &= core.MASK_OCPON
    tmp := (tmp | enabled) & core.OCP_MASK
    writeReg(core.OCP, 1, @tmp)

PUB OverCurrentTrim(mA=-2): result | tmp
' Trim over-current protection, to milliamps
'   Valid values: 45..240mA
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.OCP, 1, @tmp)
    case mA
        45..120:
            mA := (mA - 45) / 5
        130..240:
            mA := (mA - -30) / 10
        OTHER:
            result := tmp & core.BITS_OCPTRIM
            case result
                0..15:
                    return 45 + 5 * result
                16..27:
                    return -30 + 10 * result
                28..31:
                    return 240
            return

    tmp &= core.MASK_OCPTRIM
    tmp := (tmp | mA) & core.OCP_MASK
    writeReg(core.OCP, 1, @tmp)

PUB PacketRSSI(): result
' RSSI of last packet received, in dBm
    readReg(core.PKTRSSIVALUE, 1, @result)
    result := -157 + result

PUB PacketSNR(): result
' Signal to noise ratio of last packet received, in dB (estimated)
    readReg(core.PKTSNRVALUE, 1, @result)
    if result & $80
        -result
    result := result / 4

PUB PayloadLength(len=-2): result
' Set payload length, in bytes
'   Valid values: 1..255
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.LORA_PAYLOADLENGTH, 1, @result)
    case len
        1..255:
        OTHER:
            return

    writeReg(core.LORA_PAYLOADLENGTH, 1, @len)

PUB PayloadMaxLength(len=-2): result
' Set payload maximum length, in bytes
'   Valid values: 0..255
'   Any other value polls the chip and returns the current setting
'   NOTE: If header payload length exceeds this value, a header CRC error is generated,
'       allowing filtering of packets with a bad size
    result := $00
    readReg(core.MAXPAYLOADLENGTH, 1, @result)
    case len
        0..255:
        OTHER:
            return

    writeReg(core.MAXPAYLOADLENGTH, 1, @len)

PUB PLLLocked(): result
' Return PLL lock status, while attempting a TX, RX, or CAD operation
'   Returns:
'       0: PLL didn't lock
'       1: PLL locked
    readReg(core.HOPCHANNEL, 1, @result)
    result := result >> core.FLD_PLLTIMEOUT
    result &= %1
    result ^= %1

PUB PreambleLen(bits=-2): result
' Set preamble length, in bits
'   Valid values: 0..65535
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.LORA_PREAMBLEMSB, 2, @result)
    case bits
        0..65535:
        OTHER:
            return

    writeReg(core.LORA_PREAMBLEMSB, 2, @bits)

PUB RSSI(): result
' Current RSSI, in dBm
    result := $00
    readReg(core.LORA_RSSIVALUE, 1, @result)
    result := -157 + result

PUB RXBandwidth(Hz=-2): result | tmp
' Set receive bandwidth, in Hz
'   Valid values: 7800, 10_400, 15_600, 20_800, 31_250, 41_700, 62_500, *125_000, 250_000, 500_000
'   Any other value polls the chip and returns the current setting
'   NOTE: In the lower band, 250_000 and 500_000 are not supported
    tmp := $00
    readReg(core.MODEMCONFIG1, 1, @tmp)
    case Hz
        7800, 10_400, 15_600, 20_800, 31_250, 41_700, 62_500, 125_000, 250_000, 500_000:
            Hz := lookdownz(Hz: 7800, 10_400, 15_600, 20_800, 31_250, 41_700, 62_500, 125_000, 250_000, 500_000) << core.FLD_BW
        OTHER:
            result := (tmp >> core.FLD_BW)
            return lookupz(result: 7800, 10_400, 15_600, 20_800, 31_250, 41_700, 62_500, 125_000, 250_000, 500_000)

    tmp &= core.MASK_BW
    tmp := (tmp | Hz) & core.MODEMCONFIG1_MASK
    writeReg(core.MODEMCONFIG1, 1, @tmp)

PUB RXMode()
' Change chip state to RX (receive)
    OpMode(DEVMODE_RXCONTINUOUS)

PUB RXOngoing(): result
' Return receive on-going status
    result := ((ModemStatus >> 2) & %1) * TRUE

PUB RXPayload(nr_bytes, buff_addr)
' Receive data from RX FIFO into buffer at buff_addr
'   Valid values: nr_bytes - 1..255
'   Any other value is ignored
    case nr_bytes
        1..255:
            readReg(core.FIFO, nr_bytes, buff_addr)
        OTHER:
            return

PUB RXTimeout(symbols=-2): result | tmp, symbtimeout_msb, symbtimeout_lsb
' Set receive timeout, in symbols
'   Valid values: 0..1023
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.MODEMCONFIG2, 2, @tmp) ' The top 2 bits of SYMBTIMEOUT are in this reg
    case symbols                        '   the bottom 8 bits are in the next reg
        0..1023:
            symbtimeout_msb := symbols >> 8
            symbtimeout_lsb := symbols & $FF
        OTHER:
            result := tmp & core.BITS_SYMBTIMEOUT
            return

    tmp >>= 8
    tmp &= core.MASK_SYMBTIMEOUTMSB
    tmp := (tmp | symbtimeout_msb) & core.MODEMCONFIG2_MASK
    writeReg(core.MODEMCONFIG2, 1, @tmp)
    writeReg(core.SYMBTIMEOUTLSB, 1, @symbtimeout_lsb)

PUB SignalDetected(): result
' Return signal detected
    result := (ModemStatus() & %1) * TRUE

PUB SignalSynchronized(): result
' Return signal synchronized
    result := ((ModemStatus() >> 1) & %1) * TRUE

PUB Sleep()
' Power down chip
    OpMode(DEVMODE_SLEEP)

PUB SpreadingFactor(chips_sym=-2): result | tmp
' Set spreading factor rate, in chips per symbol
'   Valid values: 64, *128, 256, 512, 1024, 2048, 4096
'   Any other value polls the chip and returns the current setting
    tmp := $00
    readReg(core.MODEMCONFIG2, 1, @tmp)
    case chips_sym
        64, 128, 256, 512, 1024, 2048, 4096:
            chips_sym := (lookdown(chips_sym: 64, 128, 256, 512, 1024, 2048, 4096) + 5) << core.FLD_SPREADINGFACTOR
        OTHER:
            result := (tmp >> core.FLD_SPREADINGFACTOR)-5
            return lookup(result: 64, 128, 256, 512, 1024, 2048, 4096)

    tmp &= core.MASK_SPREADINGFACTOR
    tmp := (tmp | chips_sym) & core.MODEMCONFIG2_MASK
    writeReg(core.MODEMCONFIG2, 1, @tmp)

PUB SyncWord(val=-2): result
' Set LoRa Syncword
'   Valid values: $00..$FF
'   Any other value polls the chip and returns the current setting
    result := $00
    readReg(core.SYNCWORD, 1, @result)
    case val
        $00..$FF:
        OTHER:
            return

    writeReg(core.SYNCWORD, 1, @val)

PUB TX()
' Change chip state to TX (transmit)
    OpMode(DEVMODE_TX)

PUB TXMode(mode=-2): result | tmp
' Set transmit mode
'   Valid values:
'      *TXMODE_NORMAL (0): Normal mode; a single packet is sent
'       TXMODE_CONT (1): Continuous mode; send multiple packets across the FIFO
    tmp := $00
    readReg(core.MODEMCONFIG2, 1, @tmp)
    case mode
        TXMODE_NORMAL, TXMODE_CONT:
            mode <<= core.FLD_TXCONTINUOUSMODE
        OTHER:
            result := (tmp >> core.FLD_TXCONTINUOUSMODE) & %1
            return

    tmp &= core.MASK_TXCONTINUOUSMODE
    tmp := (tmp | mode) & core.MODEMCONFIG2_MASK
    writeReg(core.MODEMCONFIG2, 1, @tmp)

PUB TXPayload(nr_bytes, buff_addr) | tmp
' Queue data to be transmitted in the TX FIFO
'   nr_bytes Valid values: 1..255
'   Any other value is ignored
    case nr_bytes
        1..255:
            writeReg (core.FIFO, nr_bytes, buff_addr)
        OTHER:
            return

PUB TXPower(dBm, outpin): result | tmp, pa_dac
' Set transmit power, in dBm
'   Valid values:
'       outpin:
'           PAOUT_RFO (0): Signal routed to RFO pin, max power is +14dBm
'               dBm: -1..14
'           PAOUT_PABOOST (128): Signal routed to PA_BOOST pin, max power is +20dBm
'               dBm: 5..23
'   Any other value polls the chip and returns the current setting
    tmp := pa_dac := $00
    readReg(core.PACONFIG, 1, @tmp)
    readReg(core.PADAC, 1, @pa_dac)
    case outpin
        PAOUT_RFO:
            case dBm
                -1..14:
                    tmp := (7 << core.FLD_MAXPOWER) | (dBm + 1)
                OTHER:
                    result := (tmp & core.BITS_OUTPUTPOWER) - 1
                    return

            writeReg(core.PACONFIG, 1, @tmp)

        PAOUT_PABOOST:
            case dBm
                5..20:
                    pa_dac := ($10 << core.FLD_PADAC_RSVD) | %100

                21..23:
                    pa_dac := ($10 << core.FLD_PADAC_RSVD) | %111
                    dBm -= 3

                OTHER:
                    case pa_dac & %111
                        %100:
                            result := (tmp & core.BITS_OUTPUTPOWER) + 5
                            return
                        %111:
                            result := (tmp & core.BITS_OUTPUTPOWER) + 8
                            return
                        OTHER:
                            result := pa_dac
                            return
                    return

            tmp := (1 << core.FLD_PASELECT) | (dBm - 5)
            writeReg(core.PADAC, 1, @pa_dac)
            writeReg(core.PACONFIG, 1, @tmp)

        OTHER:
            result := (tmp & core.BITS_OUTPUTPOWER) - 1
            return

PUB ValidHeadersReceived(): result
' Returns number of valid headers received since last transition into receive mode
'   NOTE: To reset counter, set device to DEVMODE_SLEEP
    readReg(core.RXHEADERCNTVALUEMSB, 2, @result)

PUB ValidPacketsReceived(): result
' Returns number of valid packets received since last transition into receive mode
'   NOTE: To reset counter, set device to DEVMODE_SLEEP
    readReg(core.RXPACKETCNTVALUEMSB, 2, @result)

PRI readReg(reg_nr, nr_bytes, buff_addr) | i
' Read nr_bytes from reg_nrister 'reg_nr' to address 'buff_addr'

    case reg_nr
        $00, $01, $06..$2A, $2C, $2F, $39, $40, $42, $44, $4B, $4D, $5B, $5D, $61..$64, $70:
        OTHER:
            return

    pinl(_CS)
    spi.Write(reg_nr)

    repeat i from nr_bytes-1 to 0
        byte[buff_addr][i] := spi.Read
    pinh(_CS)

PRI writeReg(reg_nr, nr_bytes, buff_addr) | i
' Write nr_bytes to reg_nrister 'reg_nr' stored at buff_addr
    case reg_nr
        $00, $01, $06..$0F, $11, $12, $16, $1D..$24, $26, $27, $2F, $39, $40, $44, $4B, $4D, $5D, $61..$64, $70:
        OTHER:
            return

    pinl(_CS)
    spi.Write(reg_nr | core.WRITE)

    repeat i from nr_bytes-1 to 0
        spi.Write(byte[buff_addr][i])
    pinh(_CS)

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
