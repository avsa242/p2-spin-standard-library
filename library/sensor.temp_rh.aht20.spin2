{
    --------------------------------------------
    Filename: sensor.temp_rh.aht20.spin2
    Author: Jesse Burt
    Description: Driver for AHT20 temperature/RH sensors (P2 version)
    Copyright (c) 2022
    Started Mar 27, 2022
    Updated Dec 28, 2022
    See end of file for terms of use.
    --------------------------------------------
}
{ pull in methods common to all Temp/RH drivers }
#include "sensor.temp_rh.common.spin2h"

CON

    { I2C }
    SLAVE_WR    = core.SLAVE_ADDR
    SLAVE_RD    = core.SLAVE_ADDR | 1
    DEF_HZ      = 100_000

    FP_SCALE    = 10_000
    TWO20       = (1 << 20)                     ' 2^20


OBJ

    i2c : "com.i2c"                             ' I2C engine
    core: "core.con.aht20"                      ' AHT20-specific constants
    crc : "math.crc"

PUB startx(SCL_PIN, SDA_PIN, I2C_HZ): status
' Start using custom IO pins and I2C bus frequency
    if (lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and {
}       I2C_HZ <= core.I2C_MAX_FREQ)            ' validate pins and bus freq
        if (status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ))
            waitus(core.T_POR)                  ' wait for device startup
            if (dev_id() == core.DEVID_RESP)
                return
    ' if this point is reached, something above failed
    ' Re-check I/O pin assignments, bus speed, connections, power
    ' Lastly - make sure you have at least one free core/cog 
    return FALSE

PUB stop()
' Stop driver
    i2c.deinit()

PUB defaults()
' Set factory defaults
    reset()

PUB calibrate()
' Perform device calibration
'   NOTE: This only needs to be performed once at power-on
    cmd(core.CMD_CAL)

PUB dev_id(): id
' Read device identification
'   NOTE: This device has no known device ID register, so the I2C address
'       is returned instead, if it responds.
    if (i2c.present(core.SLAVE_ADDR))
        return core.DEVID_RESP

PUB measure(): flag | rd_data_tmp[2], crc_rd, crc_calc
' Perform temperature/RH measurement
'   Returns:
'       0: CRC ok
'       -1: CRC bad (RH/temperature data shouldn't be trusted)
    cmd(core.CMD_MEAS)
    bytefill(@rd_data_tmp, 0, 7)
    readreg(core.GET_MEAS, 7, @rd_data_tmp)
    _last_rh := rd_data_tmp.byte[1] << 12
    _last_rh |= (rd_data_tmp.byte[2] << 4)
    _last_rh |= ((rd_data_tmp.byte[3] >> 4) & $0f)

    _last_temp := ((rd_data_tmp.byte[3] & $0f) << 16)
    _last_temp |= (rd_data_tmp.byte[4] << 8)
    _last_temp |= (rd_data_tmp.byte[5])

    { extend sign of temperature data }
    _last_temp := (_last_temp signx 19)

    crc_rd := rd_data_tmp.byte[6]
    crc_calc := crc.asaircrc8(@rd_data_tmp, 6)

    return (crc_rd <> crc_calc)                 ' return -1 if the CRCs don't match

PUB reset()
' Reset the device
    cmd(core.CMD_SOFT_RST)
    waitus(core.T_RES)
    calibrate()

PUB rh_data(): rhword
' Relative humidity ADC word
'   Returns: u20
'   NOTE: measure() must be called at least once for this data to be valid
    return _last_rh

PUB rh_data_rdy(): flag
' Flag indicating relative humidity measurement data ready
'   Returns: TRUE (-1) or FALSE (0)
    return temp_rh_data_rdy()

PUB rh_word2pct(rhword): pct
' Convert RH ADC word to hundredths of a percent
'   Returns: 0..100_00
    return muldiv64(rhword, FP_SCALE, TWO20)

PUB temp_data_rdy(): flag
' Flag indicating temperature measurement data ready
'   Returns: TRUE (-1) or FALSE (0)
    return temp_rh_data_rdy()

PUB temp_rh_data_rdy(): flag
' Flag indicating temperature and RH measurements data ready
'   Returns: TRUE (-1) or FALSE (0)
    flag := 0
    readreg(core.STATUS, 1, @flag)
    return ((flag & core.ST_BUSY) == 0)

PUB temp_data(): tword
' Temperature ADC word
'   Returns: s20
'   NOTE: measure() must be called at least once for this data to be valid
    return _last_temp

PUB temp_word2deg(tword): deg | sign
' Convert temperature ADC word to degrees
'   Returns: hundredths of a degree, in chosen scale
    if (tword & $8000_0000)                     ' negative temp?
        sign := -1                              ' preserve sign - u64 object
    else                                        '   only handles unsigned math
        sign := 1
    deg := ((muldiv64(tword, FP_SCALE, TWO20) * 200) - (50 * FP_SCALE)) / 100
    deg *= sign

    case _temp_scale
        C:                                      ' Celsius (default)
            return deg
        F:                                      ' Fahrenheit
            return ((deg * 9) / 5) + 32_00
        K:                                      ' Kelvin
            return (deg + 273_15)

PRI cmd(cmd_nr)
' Issue command 'cmd_nr' to device
    case cmd_nr
        core.CMD_MEAS:                          ' perform measurement
            i2c.start()
            i2c.write(SLAVE_WR)
            i2c.write(core.CMD_MEAS)
            i2c.write(core.MEAS_PARMSB)
            i2c.write(core.MEAS_PARLSB)
            i2c.stop()
        core.CMD_CAL:                           ' perform calibration
            i2c.start()
            i2c.write(SLAVE_WR)
            i2c.write(core.CMD_CAL)
            i2c.write(core.CAL_PARMSB)
            i2c.write(core.CAL_PARLSB)
            i2c.stop()
        core.CMD_SOFT_RST:                      ' soft-reset or calibrate
            i2c.start()
            i2c.write(SLAVE_WR)
            i2c.write(cmd_nr)
            i2c.stop()
        other:
            return

PRI readreg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt
' Read nr_bytes from the device into ptr_buff
    case reg_nr                                 ' validate register num
        core.STATUS:
            i2c.start()
            i2c.write(SLAVE_WR)
            i2c.write(core.STATUS)
            i2c.start()
            i2c.wr_byte(SLAVE_RD)
            byte[ptr_buff] := i2c.read(i2c.NAK)
            i2c.stop()
        core.GET_MEAS:
            i2c.start()
            i2c.write(SLAVE_RD)
            i2c.rdblock_lsbf(ptr_buff, nr_bytes, i2c.NAK)
            i2c.stop()
        other:                                  ' invalid reg_nr
            return

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

