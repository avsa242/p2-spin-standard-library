{
    --------------------------------------------
    Filename: display.oled.ssd1331.spi.spin2
    Author: Jesse Burt
    Description: Driver for Solomon Systech SSD1331 RGB OLED displays
        (P2 version)
    Copyright (c) 2021
    Started: Apr 28, 2019
    Updated: Jan 9, 2021
    See end of file for terms of use.
    --------------------------------------------
}
#define SSD1331
#include "lib.gfx.bitmap.spin2"

CON

    _DISP_WIDTH = 96
    _DISP_HEIGHT= 64
    _DISP_XMAX  = _DISP_WIDTH-1
    _DISP_YMAX  = _DISP_HEIGHT-1
    _BUFF_SZ    = _DISP_WIDTH * _DISP_HEIGHT * 2
    BYTESPERPX  = 2
    BYTESPERLN  = _DISP_WIDTH * BYTESPERPX
    MAX_COLOR   = 65535

' Transaction type selection
    TRANS_CMD   = 0
    TRANS_DATA  = 1

' Display power modes
    OFF         = 0
    ON          = 1
    DIM         = 2

' Display visibility modes
    NORMAL      = 0
    ALL_ON      = 1
    ALL_OFF     = 2
    INVERTED    = 3

' Color depth formats
    COLOR_256   = %00
    COLOR_65K   = %01
    COLOR_65K2  = %10

' Address increment mode
    HORIZ       = 0
    VERT        = 1

' Subpixel order
    RGB         = 0
    BGR         = 1

OBJ

    core    : "core.con.ssd1331"
    spi     : "com.spi"

VAR

    long _CS, _DC, _RES
    long _ptr_drawbuffer

    ' shadow registers used since the display registers can't be read from
    byte _sh_SETCOLUMN, _sh_SETROW, _sh_SETCONTRAST_A, _sh_SETCONTRAST_B, _sh_SETCONTRAST_C
    byte _sh_MASTERCCTRL, _sh_SECPRECHG[3], _sh_REMAPCOLOR, _sh_DISPSTARTLINE, _sh_DISPOFFSET
    byte _sh_DISPMODE, _sh_MULTIPLEX, _sh_DIM, _sh_MASTERCFG, _sh_DISPONOFF, _sh_PWRSAVE
    byte _sh_PHASE12PER, _sh_CLK, _sh_GRAYTABLE, _sh_PRECHGLEV, _sh_VCOMH, _sh_CMDLOCK
    byte _sh_HVSCROLL, _sh_FILL

PUB Start(CS_PIN, CLK_PIN, DIN_PIN, DC_PIN, RES_PIN, CLK_FREQ, ptr_drawbuff): okay
' Start using custom I/O settings
'   RES_PIN optional, but recommended (pin . only validated in Reset())
    if lookdown(CS_PIN: 0..63) and lookdown(DC_PIN: 0..63) and {
}   lookdown(DIN_PIN: 0..63) and lookdown(CLK_PIN: 0..63)
        if okay := spi.start(CLK_PIN, DIN_PIN, -1, CLK_FREQ)
            _CS := CS_PIN
            _DC := DC_PIN
            _RES := RES_PIN
            pinh(_DC)
            pinh(_RES)
            pinh(_CS)
            reset()
            address(ptr_drawbuff)
            return okay
    return FALSE                                ' something above failed

PUB Stop()

    displayvisibility(ALL_OFF)
    powered(FALSE)

PUB Defaults()
' Factory default settings
    colordepth(COLOR_65K)
    mirrorh(FALSE)
    powered(FALSE)
    displayvisibility(ALL_OFF)
    displaystartline(0)
    displayoffset(0)
    displayinverted(FALSE)
    displaylines(64)
    extsupply()
    powersaving(TRUE)
    phase1period(7)
    phase2period(4)
    clockfreq(956)
    clockdiv(1)
    prechargespeed(127, 127, 127)
    prechargelevel(500)
    comhighlogiclevel(830)
    currentlimit(16)
    contrasta(127)
    contrastb(127)
    contrastc(127)
    powered(TRUE)
    displaybounds(0, 0, 95, 63)
    clearaccel()
    displayvisibility(NORMAL)

PUB DefaultsCommon()
' Like Defaults, but with clock speed maxed out
    clockfreq(980)
    interlaced(FALSE)
    colordepth(COLOR_65K)
    powered(TRUE)

PUB Address(addr): curr_addr
' Set framebuffer/display buffer address
{    case addr
        $0004..$7FFFF-addr:}
            _ptr_drawbuffer := addr
{        other:
            return _ptr_drawbuffer}

PUB AddrMode(mode): curr_mode
' Set display internal addressing mode
'   Valid values:
'       HORIZ (0): Horizontal addressing mode
'       VERT (1): Vertical addressing mode
    curr_mode := _sh_REMAPCOLOR
    case mode
        HORIZ, VERT:
        other:
            return ((curr_mode >> core.ADDRINC) & 1)

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.SEGREMAP_MASK) | mode)
    mode.byte[0] := core.SETREMAP
    mode.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @mode)

PUB BoxAccel(sx, sy, ex, ey, boxcolor, fillcolor) | tmp[3]
' Draw a box, using the display's native/accelerated box function
    sx := 0 #> sx <# _disp_width-1
    sy := 0 #> sy <# _disp_height-1
    ex := sx #> ex <# _disp_width-1
    ey := sy #> ey <# _disp_height-1

    tmp.byte[0] := core.DRAWRECT
    tmp.byte[1] := sx
    tmp.byte[2] := sy
    tmp.byte[3] := ex
    tmp.byte[4] := ey
    tmp.byte[5] := rgb565_r8(boxcolor)
    tmp.byte[6] := rgb565_g8(boxcolor)
    tmp.byte[7] := rgb565_b8(boxcolor)
    tmp.byte[8] := rgb565_r8(fillcolor)
    tmp.byte[9] := rgb565_g8(fillcolor)
    tmp.byte[10] := rgb565_b8(fillcolor)
    writereg(TRANS_CMD, 11, @tmp)

PUB ClearAccel() | tmp[2]
' Clears the display directly, using the display's native/accelerated clear function
    tmp.byte[0] := core.NOP3
    tmp.byte[1] := core.CLEAR
    tmp.byte[2] := 0
    tmp.byte[3] := 0
    tmp.byte[4] := 95
    tmp.byte[5] := 63
    writereg(TRANS_CMD, 6, @tmp)

PUB ClockDiv(divider): curr_div
' Set clock frequency divider used by the display controller
'   Valid values: 1..16
'   Any other value returns the current setting
    curr_div := _sh_CLK
    case divider
        1..16:
            divider -= 1
        other:
            return ((curr_div & core.CLKDIV_BITS) + 1)

    _sh_CLK := ((_sh_CLK & core.CLKDIV_MASK) | divider)
    divider.byte[0] := core.CLKDIV_FRQ
    divider.byte[1] := _sh_CLK
    writereg(TRANS_CMD, 2, @divider)

PUB ClockFreq(freq): curr_freq
' Set display internal oscillator frequency, in kHz
'   Valid values: 800..980, in steps of 12
'   Any other value returns the current setting
    curr_freq := _sh_CLK
    case freq
        800, 812, 824, 836, 848, 860, 872, 884, 896, 908, 920, 932, 944, 956,{
}       968, 980:
            freq := lookdownz(freq: 800, 812, 824, 836, 848, 860, 872, 884,{
}           896, 908, 920, 932, 944, 956, 968, 980) << core.FOSCFREQ
        other:
            curr_freq := (curr_freq >> core.FOSCFREQ) & core.FOSCFREQ_BITS
            return lookupz (curr_freq: 800, 812, 824, 836, 848, 860, 872, 884,{
}           896, 908, 920, 932, 944, 956, 968, 980)

    _sh_CLK := ((_sh_CLK & core.FOSCFREQ_MASK) | freq)
    freq.byte[0] := core.CLKDIV_FRQ
    freq.byte[1] := _sh_CLK
    writereg(TRANS_CMD, 2, @freq)

PUB ColorDepth(format): curr_fmt
' Set expected color format of pixel data
'   Valid values:
'       COLOR_256 (0): 8-bit/256 color
'       COLOR_65K (1): 16-bit/65536 color format 1
'       COLOR_65K2 (2): 16-bit/65536 color format 2
'   Any other value returns the current setting
    curr_fmt := _sh_REMAPCOLOR
    case format
        COLOR_256, COLOR_65K, COLOR_65K2:
            format <<= core.COLORFMT
        other:
            return curr_fmt >> core.COLORFMT

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.COLORFMT_MASK) | format)
    format.byte[0] := core.SETREMAP
    format.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @format)

PUB COMHighLogicLevel(level): curr_lvl
' Set logic high level threshold of COM pins relative to Vcc, in millivolts
'   Valid values: 440, 520, 610, 710, 830
'   Any other value returns the current setting
    case level
        440, 520, 610, 710, 830:
            level := lookdown(level: 440, 520, 610, 710, 830)
            _sh_VCOMH := lookup(level: $00, $10, $20, $30, $3E)
            level.byte[0] := core.VCOMH
            level.byte[1] := _sh_VCOMH
            writereg(TRANS_CMD, 2, @level)
        other:
            curr_lvl := lookdown(_sh_VCOMH: $00, $10, $20, $30, $3E)
            return lookup(curr_lvl: 440, 520, 610, 710, 830)

PUB Contrast(level)
' Set display contrast/brightness
'   Valid values: 0..255
'   Any other value returns the current setting
    contrasta(level)
    contrastb(level)
    contrastc(level)

PUB ContrastA(level): curr_lvl
' Set contrast/brightness level of subpixel A
'   Valid values: 0..255
'   Any other value returns the current setting
    case level
        0..255:
            _sh_SETCONTRAST_A := level
            level.byte[0] := core.CONTRASTA
            level.byte[1] := _sh_SETCONTRAST_A
            writereg(TRANS_CMD, 2, @level)
        other:
            return _sh_SETCONTRAST_A

PUB ContrastB(level): curr_lvl
' Set contrast/brightness level of subpixel B
'   Valid values: 0..255
'   Any other value returns the current setting
    case level
        0..255:
            _sh_SETCONTRAST_B := level
            level.byte[0] := core.CONTRASTB
            level.byte[1] := _sh_SETCONTRAST_B
            writereg(TRANS_CMD, 2, @level)
        other:
            return _sh_SETCONTRAST_B

PUB ContrastC(level): curr_lvl
' Set contrast/brightness level of subpixel C
'   Valid values: 0..255
'   Any other value returns the current setting
    case level
        0..255:
            _sh_SETCONTRAST_C := level
            level.byte[0] := core.CONTRASTC
            level.byte[1] := _sh_SETCONTRAST_C
            writereg(TRANS_CMD, 2, @level)
        other:
            return _sh_SETCONTRAST_C

PUB CopyAccel(sx, sy, ex, ey, dx, dy) | tmp[2]
' Use the display's accelerated Copy Region function
'   Valid values:
'       sx, ex, dx: 0..95
'       sy, ey, dy: 0..63
'   Any other value will be ignored
    case sx
        0..95:
        other:
            return

    case sy
        0..63:
        other:
            return

    case ex
        0..95:
        other:
            return

    case ey
        0..63:
        other:
            return

    case dx
        0..95:
        other:
            return

    case dy
        0..63:
        other:
            return

    tmp.byte[0] := core.COPY
    tmp.byte[1] := sx
    tmp.byte[2] := sy
    tmp.byte[3] := ex
    tmp.byte[4] := ey
    tmp.byte[5] := dx
    tmp.byte[6] := dy
    writereg(TRANS_CMD, 7, @tmp)

PUB CopyAccelInverted(state): curr_state
' Enable inverted colors, when using CopyAccel()
    curr_state := _sh_FILL
    case abs(state)
        0, 1:
            state := abs(state) << core.REVCOPY
        other:
            return (((curr_state >> core.REVCOPY) & 1) == 1)

    _sh_FILL := ((_sh_FILL & core.REVCOPY_MASK) | state)
    state.byte[0] := core.FILLCPY
    state.byte[1] := _sh_FILL
    writereg(TRANS_CMD, 2, @state)

PUB CurrentLimit(divisor): curr_div
' Set master current limit divisor
    case divisor
        1..16:
            _sh_MASTERCCTRL := divisor - 1
            divisor.byte[0] := core.MASTERCURRENT
            divisor.byte[1] := _sh_MASTERCCTRL
            writereg(TRANS_CMD, 2, @divisor)
        other:
            curr_div := _sh_MASTERCCTRL
            return curr_div + 1

PUB DisplayBounds(sx, sy, ex, ey) | tmp
' Set drawable display region for subsequent drawing operations
'   Valid values:
'       sx, ex: 0..95
'       sy, ey: 0..63
'   Any other value will be ignored
    ifnot lookup(sx: 0..95) or lookup(sy: 0..63) or lookup(ex: 0..95) or{
}   lookup(ey: 0..63)
        return

    tmp.byte[0] := core.SETCOLUMN
    tmp.byte[1] := sx
    tmp.byte[2] := ex

    writereg(TRANS_CMD, 3, @tmp)

    tmp.byte[0] := core.SETROW
    tmp.byte[1] := sy
    tmp.byte[2] := ey

    writereg(TRANS_CMD, 3, @tmp)

PUB DisplayInverted(state) | tmp
' Invert display colors
    case abs(state)
        0:
            displayvisibility(NORMAL)
        1:
            displayvisibility(INVERTED)
        other:
            return

PUB DisplayLines(lines): curr_lines
' Set maximum number of display lines
'   Valid values: 16..64
'   Any other value returns the current setting
    curr_lines := _sh_MULTIPLEX
    case lines
        16..64:
            _sh_MULTIPLEX := lines - 1
            lines.byte[0] := core.SETMULTIPLEX
            lines.byte[1] := _sh_MULTIPLEX
            writereg(TRANS_CMD, 2, @lines)
        other:
            curr_lines := _sh_MULTIPLEX
            return curr_lines + 1

PUB DisplayOffset(lines): curr_lines
' Set display offset/vertical shift
    case lines
        0..63:
            _sh_DISPOFFSET := lines
            lines.byte[0] := core.DISPLAYOFFSET
            lines.byte[1] := _sh_DISPOFFSET
            writereg(TRANS_CMD, 2, @lines)
        other:
            curr_lines := _sh_DISPOFFSET
            return curr_lines

PUB DisplayStartLine(st_line): curr_line
' Set display start line
    case st_line
        0..63:
            _sh_DISPSTARTLINE := st_line
            st_line.byte[0] := core.STARTLINE
            st_line.byte[1] := _sh_DISPSTARTLINE
            writereg(TRANS_CMD, 2, @st_line)
        other:
            curr_line := _sh_DISPSTARTLINE
            return curr_line

PUB DisplayVisibility(mode): curr_mode
' Set display visibility
    case mode
        NORMAL, ALL_ON, ALL_OFF, INVERTED:
            _sh_DISPMODE := mode + core.NORMALDISPLAY
            writereg(TRANS_CMD, 1, @_sh_DISPMODE)
        other:
            curr_mode := _sh_DISPMODE
            return (_sh_DISPMODE - core.NORMALDISPLAY)

PUB ExtSupply() | tmp

    tmp.byte[0] := core.SETMASTER
    tmp.byte[1] := core.MASTERCFG_EXT_VCC
    writereg(TRANS_CMD, 2, @tmp)

PUB FillAccelEnabled(state): curr_state
' Enable the display's native/accelerated fill function, when using BoxAccel()
    curr_state := _sh_FILL
    case abs(state)
        0, 1:
            state := abs(state) & 1
        other:
            return ((curr_state & 1) == 1)

    _sh_FILL := ((_sh_FILL & core.FILL_MASK) | state)
    state.byte[0] := core.FILL
    state.byte[1] := _sh_FILL
    writereg(TRANS_CMD, 2, @state)

PUB Interlaced(state): curr_state
' Alternate every other display line:
' Lines 0..31 will appear on even rows (starting on row 0)
' Lines 32..63 will appear on odd rows (starting on row 1)
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value returns the current setting
    curr_state := _sh_REMAPCOLOR
    case abs(state)
        0, 1:
            state := (abs(state) ^ 1) << core.COMSPLIT
        other:
            return not (((curr_state >> core.COMSPLIT) & 1) == 1)

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.COMSPLIT_MASK) | state)
    state.byte[0] := core.SETREMAP
    state.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @state)

PUB LineAccel(sx, sy, ex, ey, color) | tmp[2]
' Draw a line, using the display's native/accelerated line function
    sx := 0 #> sx <# _disp_width-1
    sy := 0 #> sy <# _disp_height-1
    ex := 0 #> ex <# _disp_width-1
    ey := 0 #> ey <# _disp_height-1

    tmp.byte[0] := core.DRAWLINE
    tmp.byte[1] := sx
    tmp.byte[2] := sy
    tmp.byte[3] := ex
    tmp.byte[4] := ey
    tmp.byte[5] := rgb565_r8(color)
    tmp.byte[6] := rgb565_g8(color)
    tmp.byte[7] := rgb565_b8(color)
    writereg(TRANS_CMD, 8, @tmp)

PUB MirrorH(state): curr_state
' Mirror the display, horizontally
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value returns the current setting
    curr_state := _sh_REMAPCOLOR
    case abs(state)
        0, 1:
            state := abs(state) << core.SEGREMAP
        other:
            return ((curr_state >> core.SEGREMAP) & 1) == 1

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.SEGREMAP_MASK | state))
    state.byte[0] := core.SETREMAP
    state.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @state)

PUB MirrorV(state): curr_state
' Mirror the display, vertically
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value returns the current setting
    curr_state := _sh_REMAPCOLOR
    case abs(state)
        0, 1:
            state := abs(state) << core.COMREMAP
        other:
            return ((curr_state >> core.COMREMAP) & 1) == 1

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.COMREMAP_MASK) | state)
    state.byte[0] := core.SETREMAP
    state.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @state)

PUB NoOp() | tmp
' No-operation
    tmp := core.NOP3
    writereg(TRANS_CMD, 1, @tmp)

PUB Phase1Period(clks): curr_clks
' Set discharge/phase 1 period, in display clocks
    curr_clks := _sh_PHASE12PER
    case clks
        1..15:
        other:
            return curr_clks & core.PHASE1

    _sh_PHASE12PER := ((_sh_PHASE12PER & core.PHASE1_MASK) | clks)
    clks.byte[0] := core.PRECHG
    clks.byte[1] := _sh_PHASE12PER
    writereg(TRANS_CMD, 2, @clks)

PUB Phase2Period(clks): curr_clks
' Set charge/phase 2 period, in display clocks
    curr_clks := _sh_PHASE12PER
    case clks
        1..15:
            clks <<= core.PHASE2
        other:
            return (curr_clks >> core.PHASE2) & core.PHASE2

    _sh_PHASE12PER := ((_sh_PHASE12PER & core.PHASE2_MASK) | clks)
    clks.byte[0] := core.PRECHG
    clks.byte[1] := _sh_PHASE12PER
    writereg(TRANS_CMD, 2, @clks)

PUB PlotAccel(x, y, color) | tmp[2]
' Draw a pixel, using the display's native/accelerated plot/pixel function
    x := 0 #> x <# _disp_width-1
    y := 0 #> y <# _disp_height-1
    tmp.byte[0] := core.SETCOLUMN
    tmp.byte[1] := x
    tmp.byte[2] := 95
    tmp.byte[3] := core.SETROW
    tmp.byte[4] := y
    tmp.byte[5] := 63
    
    writereg(TRANS_CMD, 6, @tmp)

    waitus(3)

    writereg(TRANS_DATA, 2, @color)

PUB Powered(state): curr_state
' Enable display power
    case abs(state)
        OFF, ON, DIM:
            state := lookupz(abs(state): core.DISPLAYOFF, core.DISPLAYON,{
}           core.DISPLAYONDIM)
            _sh_DISPONOFF := state
            writereg(TRANS_CMD, 1, @_sh_DISPONOFF)
        other:
            return lookdownz(_sh_DISPONOFF: core.DISPLAYOFF, core.DISPLAYON,{
}           core.DISPLAYONDIM)

PUB PowerSaving(state): curr_state
' Enable display power saving mode
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value returns the current setting
    case abs(state)
        0, 1:
            state := lookupz(abs(state): core.PWRSAVE_DIS, core.PWRSAVE_ENA)
            _sh_PWRSAVE := state
            state.byte[0] := core.PWRMODE
            state.byte[1] := _sh_PWRSAVE
            writereg(TRANS_CMD, 2, @state)
        other:
            curr_state := _sh_PWRSAVE
            return (lookdownz(curr_state: core.PWRSAVE_DIS, core.PWRSAVE_ENA) & 1) == 1

PUB PrechargeLevel(level): curr_lvl
' Set first pre-charge voltage level (phase 2) of segment pins, in millivolts
    case level := lookdown(level: 100, 110, 130, 140, 150, 170, 180, 190,{
}   200, 220, 230, 240, 260, 270, 280, 300, 310, 320, 330, 350, 360, 370,{
}   390, 400, 410, 430, 440, 450, 460, 480, 490, 500)
        1..32:
            _sh_PRECHGLEV := (level - 1) << 1
            level.byte[0] := core.PRECHGLVL
            level.byte[1] := _sh_PRECHGLEV
            writereg(TRANS_CMD, 2, @level)
        other:
            curr_lvl := _sh_PRECHGLEV >> 1
            return lookupz(curr_lvl: 100, 110, 130, 140, 150, 170, 180, 190,{
}           200, 220, 230, 240, 260, 270, 280, 300, 310, 320, 330, 350, 360,{
}           370, 390, 400, 410, 430, 440, 450, 460, 480, 490, 500)

PUB PrechargeSpeed(seg_a, seg_b, seg_c): curr_spd | tmp[2]

    case seg_a
        $00..$FF:
        other:
            return _sh_SECPRECHG.byte[0]
    case seg_b
        $00..$FF:
        other:
            return _sh_SECPRECHG.byte[1]
    case seg_c
        $00..$FF:
        other:
            return _sh_SECPRECHG.byte[2]

    _sh_SECPRECHG[0] := seg_a
    _sh_SECPRECHG[1] := seg_b
    _sh_SECPRECHG[2] := seg_c

    tmp.byte[0] := core.PRECHGA
    tmp.byte[1] := seg_a
    tmp.byte[2] := core.PRECHGB
    tmp.byte[3] := seg_b
    tmp.byte[4] := core.PRECHGC
    tmp.byte[5] := seg_c
    writereg(TRANS_CMD, 6, @tmp)

PUB Reset()
' Reset the display controller
    pinh(_RES)
    if lookdown(_RES: 0..63)
        pinh(_RES)
        waitms(1)
        pinl(_RES)
        waitms(10)
        pinh(_RES)

PUB SubpixelOrder(order): curr_ord
' Set subpixel color order
'   Valid values:
'       RGB (0): Red-Green-Blue order
'       BGR (1): Blue-Green-Red order
'   Any other value returns the current setting
    curr_ord := _sh_REMAPCOLOR
    case order
        RGB, BGR:
            order <<= core.SUBPIX_ORDER
        other:
            return (curr_ord >> core.SUBPIX_ORDER) & 1

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.SUBPIX_ORDER_MASK) | order)
    order.byte[0] := core.SETREMAP
    order.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @order)

PUB Update()
' Write the current display buffer to the display
    writereg(TRANS_DATA, _buff_sz, _ptr_drawbuffer)

PUB VertAltScan(state): curr_state
' Alternate Left-Right, Right-Left scanning, every other display line
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value returns the current setting
    curr_state := _sh_REMAPCOLOR
    case abs(state)
        0, 1:
            state := abs(state) << core.COMLR_SWAP
        other:
            return (((curr_state >> core.COMLR_SWAP) & 1) == 1)

    _sh_REMAPCOLOR := ((_sh_REMAPCOLOR & core.COMLR_SWAP_MASK) | state)
    state.byte[0] := core.SETREMAP
    state.byte[1] := _sh_REMAPCOLOR
    writereg(TRANS_CMD, 2, @state)

PUB WriteBuffer(ptr_buff, buff_sz)
' Write alternate buffer to display
    writereg(TRANS_DATA, buff_sz, ptr_buff)

PRI writeReg(trans_type, nr_bytes, ptr_buff)
' Write nr_bytes from ptr_buff to device
    case trans_type
        TRANS_DATA:
            pinh(_DC)
        TRANS_CMD:
            pinl(_DC)
        other:
            return

    ' write with blocking enabled, and raise CS afterwards
    pinl(_CS)
    spi.writebytes(nr_bytes, ptr_buff)
    pinh(_CS)
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
