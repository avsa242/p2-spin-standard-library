{
    --------------------------------------------
    Filename: termwidgets.spin2
    Description: Library of terminal widgets (P2 version)
    Author: Jesse Burt
    Copyright (c) 2024
    Started Dec 14, 2019
    Updated Jan 20, 2024
    See end of file for terms of use.
    --------------------------------------------
}

'   Must be included using the preprocessor #include directive
'   Requires:
'       An object that has the following standard terminal methods:
'           putchar(param)
'           puts(param)
'           puthexs(param, digits)

PUB hexdump(ptr_buff, baddr, adigits, len, cols) | hoffs, aoffs, aaddr, col
' Display a hexdump of a region of memory
'   ptr_buff: pointer to location in memory to hexdump
'   baddr: address used to display as base address in hex dump (affects display only)
'   adigits: number of digits used to display address
'   len: total number of bytes to display
'   cols: number of bytes to display on each line
    hoffs := aoffs := 0                         ' initialize offsets to base address
    repeat while (hoffs < len)
        col := 0
        puthexs(baddr+hoffs, adigits)           ' show memory offset of line
        puts(@": ")

        { display data in hex }
        repeat while (col < cols)
            puthexs(byte[ptr_buff+hoffs], 2)    ' show the byte in hex
            putchar(" ")                        ' draw a space between each byte
            col++
            hoffs++

        putchar("|")                            ' separate hex from ASCII
        col := 0

        { display data in ASCII }
        repeat while (col < cols)
            aaddr := ptr_buff+aoffs
            if (lookdown(byte[aaddr]: 32..126))
                putchar(byte[aaddr])            ' display printable chars as-is
            else
                putchar(".")                    ' and unprintable chars as "."
            col++
            aoffs++

        putchar("|")
        newline()                               ' ready for next line


PUB hexdumphl(ptr_buff, baddr, adigits, len, cols, hl_st, hl_len) | hoffs, aoffs, aaddr, col
' Display a hexdump of a region of memory, with region highlighting
'   ptr_buff: pointer to location in memory to hexdump
'   baddr: address used to display as base address in hex dump (affects display only)
'   adigits: number of digits used to display address
'   len: total number of bytes to display
'   cols: number of bytes to display on each line
'   hl_st: byte position/number within hexdump to start highlighting
'       (relative to 0, not the base address)
'   hl_len: number of bytes within hexdump to highlight
    hoffs := aoffs := 0                         ' initialize offsets to base address
    repeat while (hoffs < len)
        col := 0
        puthexs(baddr+hoffs, adigits)           ' show memory offset of line
        puts(@": ")

        { display data in hex }
        repeat while (col < cols)
            if ( (hoffs >= hl_st) and (hoffs <= (hl_st+hl_len)) )
                bgcolor(_hl_bg)                 ' set highlight colors if we're within
                fgcolor(_hl_fg)                 '   the highlight range
            puthexs(byte[ptr_buff+hoffs], 2)    ' show the byte in hex
            col++
            hoffs++
            if ( (hoffs > (hl_st+hl_len)) )     ' stop setting the highlight color at the end
                bgcolor(_bgcolor)               '   of the line of hex display
            putchar(" ")                        ' draw a space between each byte
        bgcolor(_bgcolor)                       ' go back to the previously set background color

        putchar("|")                            ' separate hex from ASCII

        { display data in ASCII }
        col := 0
        repeat while (col < cols)
            aaddr := ptr_buff+aoffs
            if (lookdown(byte[aaddr]: 32..126))
                putchar(byte[aaddr])            ' display printable chars as-is
            else
                putchar(".")                    ' and unprintable chars as "."
            col++
            aoffs++

        putchar("|")
        newline()                               ' ready for next line


VAR long _hl_bg
PUB set_hl_bgcolor(c)
' Set hexdump highlight background color
    _hl_bg := c


VAR long _hl_fg
PUB set_hl_fgcolor(c)
' Set hexdump highlight foreground color
    _hl_fg := c


DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

