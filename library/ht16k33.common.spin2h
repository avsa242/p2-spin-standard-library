{
    --------------------------------------------
    Filename: ht16k33.common.spin2h
    Description: Low-level code common to HT16K33-based LED displays (P2 version)
    Author: Jesse Burt
    Copyright (c) 2022
    Created: Sep 3, 2022
    Updated: Nov 5, 2022
    See end of file for terms of use.
    --------------------------------------------
}

CON

    SLAVE_WR    = core.SLAVE_ADDR
    SLAVE_RD    = core.SLAVE_ADDR|1

    DEF_HZ      = 100_000

    { display visibility }
    OFF         = 0
    ON          = 1

VAR

    byte _dispsetup
    byte _addr_bits

OBJ

    i2c     : "com.i2c"                         ' I2C engine
    core    : "core.con.ht16k33"                ' HW-specific constants

PUB null()
' This is not a top-level object

PUB stop()
' Stop the driver
    visibility(FALSE)
    osc_ena(FALSE)
    waitms(100)
    i2c.deinit()

PUB defaults()
' Factory default settings
    osc_ena(TRUE)
    brightness(15)
    visibility(TRUE)

PUB blink_rate(rate)
' Set blink rate of display, in Hz
'   Valid values: 0_5 (0.5), 1, 2
'   Any other value disables blinking
    case rate
        0:
            rate := 0
        0_5:
            rate := %11 << core.BLINK
        1:
            rate := %10 << core.BLINK
        2:
            rate := %01 << core.BLINK
        other:
            return

    _dispsetup := ((_dispsetup & core.BLINK_MASK) | rate)
    writereg(core.DISPSETUP, _dispsetup)

PUB brightness(level)
' Set display brightness
'   Valid values: 0..15
'   Any other value is ignored
    case level
        0..15:
        other:
            return
    writereg(core.BRIGHTNESS, level)

PUB visibility(state)
' Enable display visibility
'   Valid values: TRUE/ON (-1 or 1), FALSE/OFF (0)
'   Any other value is ignored
'   NOTE: This doesn't affect display RAM contents;
'       only whether it's currently displayed or not
    case abs(state)
        OFF, ON:
            state := abs(state)
        other:
            return

    _dispsetup := ((_dispsetup & core.ONOFF_MASK) | state)
    writereg(core.DISPSETUP, _dispsetup)

PUB osc_ena(state)
' Enable the oscillator
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value is ignored
    case abs(state)
        0, 1: state := abs(state)
        other:
            return
    writereg(core.OSCILLATOR, state)

PRI writereg(reg_nr, ptr_buff) | cmd_pkt[2], i
' Write reg_nr to device from ptr_buff
    cmd_pkt.byte[0] := SLAVE_WR | _addr_bits

    case reg_nr
        core.DISP_RAM:                          ' Display RAM
            cmd_pkt.byte[1] := core.DISP_RAM
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 2)
            repeat i from 0 to 7
                i2c.write((byte[ptr_buff][i]) & $FF)
                i2c.write($00)
            i2c.stop()

        core.OSCILLATOR, core.DISPSETUP, core.ROWINT, {
        } core.BRIGHTNESS:                      ' Control registers
            cmd_pkt.byte[1] := reg_nr | ptr_buff
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 2)
            i2c.stop()
        other:
            return

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

