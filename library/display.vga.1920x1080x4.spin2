'' *************************************
'' *                                   *
'' *  Propeller 2 VGA Driver 4bpp lut  *
'' *     + graphics & text support     *
'' *                                   *
'' *     Ozpropdev 18th October 2016   *
'' *                                   *
'' *************************************
'' Modified for silicon - 15th November 2018 by ozpropdev
'' RR20181115 1920x1080 @ 180MHz
''  Notes:  setxfrq instruction hardcoded!!!!
''          mov temp3,#h/2  --> ##h/2
''          mov y1,#h/2     --> ##h/2
''          to make it fit hub, reduce h & v visible pixels/lines, increase bank pixels/lines
''          mov x,#bottom_blanks --> ##bottom_blanks
''  VGS_gfx11_FHDb.spin2 1440x540 working but gets hot and starts to fail
''               c       1680x540 cannot update fast enough so scrolls left (pix=clock=180MHz)
''               d       add xtal setup code
'' RR20181117 VGA_base_1920x1080_001a.spin
''            001b       scrolls left (pix=clock=180MHz)
''               c       adj: no scrolling, stable, warm
''               f       try to get full width 1920x480  180MHz!!!  try 150MHz (not on Acer)
''                       Acer X233H:  165MHz= doesnt work
''                                    168MHz=excellent, no shiver
''                                    180MHz=single pixel shiver
''                       Acer G246HL: similar results to above, but slightly off-screen to left
''                       Acer X233H#2: doesnt work (menu not wkg, VGA to laptop OK)
''               g       148.5MHz works
''               h       148.5MHz hsync works nicely
''            002a       saved
''               b       adj field (screen display code)
'' RR20181118    d       divide screen into sections
''               e       tweek code, fix loc ptra, --> #@palette, fix cls with ret, graphics ret wcz
''               e3      loc ptrx,#@xxxx --> loc ptrx,#\xxxx
''                       but this needs to be  loc pa,#@gfx !!!
''               f1      text display still wrong (remove)
''               f2      remove text & font
''            003a       use 512KB HUB for video buffer  (1920x1080/2 @ 4bpp = 506.25KB)
''               b       m_rf 2bpp
'' RR20181119    c       use loc x,#\@xxx for hub addresses
''               d       try to fix jitter on cls
''               e       4bpp (stuffed up somewhere!)
'' RR20181122    f       use 12MHz/4*99/2=148.5MHz (tested in 003a1 as suggested by Chip)
''            004a       remove gfx cog
''               d       all dots are visible in 4bpp
''               e       concentric rectangles


CON
  _XTALFREQ     = 20_000_000                                    ' crystal frequency
''_XDIV         = 12  * 2       '\                              ' crystal divider to give 0.5MHz
''_XMUL         = 297           '| 148.5MHz                     ' crystal / div * mul
''_XDIVP        = 1             '/                              ' crystal / div * mul /divp to give _CLKFREQ (1,2,4..30)
  _XDIV         = 10'7'4             '\                              '\ crystal divider                      to give 3.0MHz
  _XMUL         = 74'52'99            '| 148.5MHz                     '| crystal / div * mul                  to give 297MHz
  _XDIVP        = 2             '/                              '/ crystal / div * mul /divp            to give 148.5MHz
  _XOSC         = %01                                   'OSC    ' %00=OFF, %01=OSC, %10=15pF, %11=30pF
  _XSEL         = %11                                   'XI+PLL ' %00=rcfast(20+MHz), %01=rcslow(~20KHz), %10=XI(5ms), %11=XI+PLL(10ms)
  _XPPPP        = ((_XDIVP>>1) + 15) & $F                       ' 1->15, 2->0, 4->1, 6->2...30->14
  _CLOCKFREQ    = _XTALFREQ / _XDIV * _XMUL / _XDIVP            ' internal clock frequency
  _SETFREQ      = 1<<24 + (_XDIV-1)<<18 + (_XMUL-1)<<8 + _XPPPP<<4 + _XOSC<<2  ' %0000_000e_dddddd_mmmmmmmmmm_pppp_cc_00  ' setup  oscillator
  _ENAFREQ      = _SETFREQ + _XSEL                                             ' %0000_000e_dddddd_mmmmmmmmmm_pppp_cc_ss  ' enable oscillator

'' 1920x1080 60Hz mode @ 148.5MHz   from https://timetoexplore.net/blog/video-timings-vga-720p-1080p
'' ----------------------------------------------------------------------------------
  PIXEL_CLK     = _CLOCKFREQ              '
  H_DISP        = 1920
  H_FPORCH      = 88
  H_SYNC        = 44
  H_BPORCH      = 148
  V_DISP        = 1080
  V_FPORCH      = 4
  V_SYNC        = 5
  V_BPORCH      = 36
'' ----------------------------------------------------------------------------------

{{
'' 1920x1080 60Hz mode @ 180MHz   from http://www.epanorama.net/faq/vga2rgb/calc.html
'' ----------------------------------------------------------------------------------
  PIXEL_CLK     = _CLOCKFREQ              '
  H_DISP        = 1920          '-480      '- 240 '480 '960
  H_FPORCH      = 32            '+120      '
  H_SYNC        = 696                     '
  H_BPORCH      = 32            '+360      '+ 240 '480 '960
  V_DISP        = 1080              -600  '- 540
  V_FPORCH      = 22                +300  '
  V_SYNC        = 11                      '
  V_BPORCH      = 22                +300  '+ 540
'' ----------------------------------------------------------------------------------
}}

  vsync         = 4                                     ' vsync pin
  intensity     = 80    '0..128

  w             =  H_DISP
' h             =  V_DISP             ' 1920x1080 2bpp = 506.35KB
  h             =  V_DISP / 2         ' 1920x 540 4bpp = 506.35KB

{{
' h             =  V_DISP
  h             =  480                '\ screen too big for hub so break into 3 parts
  h2            =  300                '|
  h3            =  300                '/
}}
{{
  h             =  V_DISP / 2         '\ screen too big for hub so break into 2 parts
  h2            =  V_DISP / 2         '|
' h3            =  300                '/
}}


  fpix          =  float(PIXEL_CLK)
  top_blanks    =  V_FPORCH
  sync_blanks   =  V_SYNC
  bottom_blanks =  V_BPORCH
  before_sync   =  H_FPORCH
  sync          =  H_SYNC
  before_visible = H_BPORCH
'' ----------------------------------------------------------------------------------


        pause = _CLOCKFREQ * 3

        'flags
        #0,rotated,small

        k = (w/8) * (h/16)      'number of lines per test bars

        'color palette names
        #0,black,blue,green,cyan,red,magenta,brown,gray
        dark_gray,bright_blue,bright_green,bright_cyan
        bright_red,bright_magenta,Yellow,white

'  fclk          = float(_CLOCKFREQ)
'  fset          = (fpix / fclk * 2.0) * float($4000_0000)
'  fset          = ((fpix / float(_CLOCKFREQ) * 2.0) * float($4000_0000))
   fset         = $8000_0000    'set to full clock freq    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  lut_start = 0


DAT             org     0
video_buffer                              ' $00000 Hub  ' 1920x1080 2bpp = 506.35KB
                                                        ' 1920x 540 4bpp = 506.35KB half screen
'+-------[ Set Xtal ]----------------------------------------------------------+
                hubset  #0                              ' set 20MHz+ mode
                hubset  ##_SETFREQ                      ' setup oscillator
                waitx   ##20_000_000/100                ' ~10ms
                hubset  ##_ENAFREQ                      ' enable oscillator
'+-----------------------------------------------------------------------------+

                loc     ptra,#\@palette                 '\  copy color palette to lut ram
                setq2   #16-1                           '|
                rdlong  lut_start,ptra                  '/


'{{======================================================
                loc     pa,#\@gfx                       '\ launch graphics demo
                coginit #16,pa                          '/

                waitx   ##pause
'========================================================}}

{{
'Clear screen...
                mov     temp,##$1111_1111               ' 4bpp (blue)
                loc     ptra,#\@video_buffer
''              rep     @.cls,##1920*1080*2/32          ' 129,600 longs = 506.25KB
                rep     @.cls,##1920*540*4/32           ' 4bpp = 129,600 longs = 506.25KB
                wrlong  temp,ptra++
.cls
}}





                setxfrq ##fset                          'set transfer frequency to xxxMHz
                dirh    #vsync                          'make vsync pin output

                'the next 4 lines may be commented out to bypass level scaling
                setcy   ##intensity << 24               '\ r      set colorspace for rgb
                setci   ##intensity << 16               '| g
                setcq   ##intensity << 08               '| b
                setcmod #%01_0_000_0                    '/ enable colorspace conversion

                wrpin   dacmode_s,#0                    '\ enable dac modes in pins 0..3
                wrpin   dacmode_c,#1                    '|
                wrpin   dacmode_c,#2                    '|
                wrpin   dacmode_c,#3                    '|
                setnib  dira,#$f,#0                     '/ & enable output


'                rdfast  ##w*h/128,##@video_buffer       'set rdfast to wrap on bitmap  '<<<<<<<<<<<<
'                rdfast  ##w*h/2/128,##@video_buffer       'set rdfast to wrap on bitmap  '<<<<<<<<<<<<
                rdfast  ##1920*540/128,##@video_buffer       'set rdfast to wrap on bitmap  '<<<<<<<<<<<<


'+-------[ Display Screen ]----------------------------------------------------+
' Field loop
'?                xzero   m_bv,#0                 '???                            '<<<<<<<<<<<<
field

                outnot  #vsync                  '\ vsync on
                mov     x,#sync_blanks          '|
                call    #blank                  '|
                outnot  #vsync                  '/ vsync off

                mov     x,#top_blanks
                call    #blank
'-----------------------------------------------
' display 1/2 screen section
''                rdfast  ##w*h/128,##@video_buffer       'set rdfast to wrap on bitmap  '<<<<<<<<<<<<
                mov     x,##h                   'set visible lines
line            call    #hsync                  'do horizontal sync
                xcont   m_rf,#0                 'visible line                   '<<<<<<<<<<<<
                djnz    x,#line                 'another line?
'-----------------------------------------------
' display 2/2 screen section
                mov     x,##h                   'set visible lines
line2           call    #hsync                  'do horizontal sync
                xcont   m_rf,#0                 'visible line                   '<<<<<<<<<<<<
                djnz    x,#line2                'another line?
'-----------------------------------------------
                mov     x,##bottom_blanks
                call    #blank

                jmp     #field                  'loop

' Subroutines
blank           call    #hsync                  'blank lines
                xcont   m_vi,#0
        _RET_   djnz    x,#blank

hsync           xcont   m_bs,#0                 'horizontal sync
                xcont   m_sn,#1
        _RET_   xcont   m_bv,#0
'+-----------------------------------------------------------------------------+

' Initialized data
dacmode_s       long    %0000_0000_000_1011000000000_01_00000_0         'hsync is 123-ohm, 3.3V
dacmode_c       long    %0000_0000_000_1011100000000_01_00000_0         'R/G/B are 75-ohm, 2.0V

m_bs            long    $CF000000+before_sync
m_sn            long    $CF000000+sync
m_bv            long    $CF000000+before_visible
m_vi            long    $CF000000+w             'visible
m_rf            long    $6F000000+w             '4bit RFLONG LUT
'm_rf            long    $5F000000+w             '2bit RFLONG LUT

x               res     1
y               res     1

DAT
'???                orgh    $400                    ' this is required !!!
'====================================================================
'Graphics demo
'====================================================================
                org     0

gfx
''              jmp     #demo                   ' goto demo code
'====================================================================
' This is the demo code...
                mov     color,#red
                call    #cls
                waitx   ##_CLOCKFREQ*8

                mov     color,#white

.loop           mov     x1,#0
                mov     y1,#0
                mov     x2,##w-1
                mov     y2,##h-1
                add     x1,n
                add     y1,n
                sub     x2,n
                sub     y2,n
                add     n,#8
                call    #plot_box
                waitx   ##_CLOCKFREQ/2
                djnz    loops,#.loop

                jmp     #$                      ' stop here <<<<<<<<<<<<<<<

n               long    0
loops           long    68

'******************************
'*  Basic graphics functions  *
'******************************

'Clear screen (fills with current color)
cls             mov     temp,color
                setnib  temp,color,#1
        '       setbyts temp,temp
                movbyts temp,#0

'                mov     temp,##$00aaaa00        'cyan <<<<<<<<<<<<<<<<<<<<<<<
'                mov     temp,##$aaaaaaaa        ' <<<<<<<<<<<<<<<<<<<<<<<

                loc     ptra,#\@video_buffer
                rep     @.cls,##w*h/8
                wrlong  temp,ptra++
.cls
                ret                       wcz


'Set pixel @ x1,y1 with current color

set_pixel       cmp     x1,##w-1          wcz   'boundary check
        if_a    ret                       wcz
                cmp     y1,##h-1          wcz
        if_a    ret                       wcz
                testb   x1,#31            wc
        if_c    ret                       wcz
                testb   y1,#31            wc
        if_c    ret                       wcz

                mov     ptra,y1
                mul     ptra,##w / 2            '2 pixels per byte
                mov     .temp,x1
                shr     .temp,#1
                add     ptra,.temp
                add     ptra,##@video_buffer
                rdbyte  .temp,ptra
                testb   x1,#0             wc
        if_nc   setnib  .temp,color,#0
        if_c    setnib  .temp,color,#1
                wrbyte  .temp,ptra
.loop
                ret                       wcz

.temp           long    0

'plot line from x1,y1 to x2,y2 in current color

plot_line       push    x1
                push    y1
                mov     x1,x2
                mov     y1,y2
                call    #set_pixel
                pop     y1
                pop     x1
                mov     x_inc,#1
                mov     y_inc,#1
                mov     pa,x2
                sub     pa,x1             wc
                negc    x_inc
                abs     width,pa                'get width
                mov     pb,y2
                sub     pb,y1             wc
                negc    y_inc
                abs     height,pb               'get height
                cmp     width,height      wcz
        if_b    jmp     #pl2
'x > y
                and     width,##$ffff     wz
        if_z    mov     width,#1
                qmul    height,_1000
                mov     temp2,#0
                push    x1
                push    y1
                getqx   temp
                qdiv    temp,width
                getqx   temp
.pl1            call    #set_pixel
                add     x1,x_inc
                add     temp2,temp
                cmp     temp2,_1000       wcz
        if_a    add     y1,y_inc
        if_a    sub     temp2,_1000
                djnz    width,#.pl1
                pop     y1
                pop     x1
                ret                       wcz
'y > x
pl2             and     height,##$ffff    wz
        if_z    mov     height,#1
                qmul    width,_1000
                mov     temp2,#0
                push    x1
                push    y1
                getqx   temp
                qdiv    temp,height
                getqx   temp
.pl2a           call    #set_pixel
                add     y1,y_inc
                add     temp2,temp
                cmp     temp2,_1000       wcz
        if_a    add     x1,x_inc
        if_a    sub     temp2,_1000
                djnz    height,#.pl2a
                pop     y1
                pop     x1
                ret                       wcz

'plot circle centred at x1,y1 using radius,start_angle,sweep, resolution
'
plot_circle     qfrac   start_angle,#360
                getqx   angle
                qfrac   resolution,##3600       '10 = 1 deg
                getqx   temp
                mov     cc,sweep
                mul     cc,#10
                qdiv    cc,resolution
                getqx   cc
.loop           qrotate radius,angle
                push    x1
                push    y1
                getqx   x9
                getqy   y9
                add     x1,x9
                add     y1,y9
                call    #set_pixel
                pop     y1
                pop     x1
                add     angle,temp
                djnz    cc,#.loop
                ret                       wcz

'draw box top left corner x1,y1 to bottom right x2,y2 in current color

plot_box        mov     x1a,x1
                mov     y1a,y1
                mov     x2a,x2
                mov     y2a,y2

                mov     y2,y1                   'top
                call    #plot_line

                mov     x1,x1a
                mov     y1,y2a
                mov     x2,x2a
                mov     y2,y2a
                call    #plot_line              'bottom

                mov     x1,x1a
                mov     y1,y1a
                mov     x2,x1
                mov     y2,y2a
                call    #plot_line              'left

                mov     x1,x2a
                mov     y1,y1a
                mov     x2,x1
                mov     y2,y2a
                call    #plot_line              'right

                mov     x1,x1a
                mov     y1,y1a
                mov     x2,x2a
                mov     y2,y2a

                ret                       wcz

'plot character @ x1,y1 using forecolor,backcolor
'if bit #0 of "flags" is set , text will be rotated left
{{
plot_char       testb   flags,#small      wc
        if_c    mov     font_h,#16
        if_nc   mov     font_h,#32
                loc     ptrb,#\@font
                testb   ascii,#0          wz
                bitl    ascii,#0
                shl     ascii,#6
                add     ptrb,ascii
                mov     count2,font_h

.loop2          rdlong  bits,ptrb++
                testb   flags,#small      wc
        if_c    rdlong  bits2,ptrb++
        if_c    or      bits,bits2
        if_nz   shr     bits,#1
                mov     count,#16
.loop           testb   bits,#0           wc
        if_c    mov     color,forecolor
        if_nc   mov     color,backcolor
                call    #set_pixel
                shr     bits,#2
                testb   flags,#rotated    wc
        if_nc   add     x1,#1
        if_c    sub     y1,#1
                djnz    count,#.loop
                testb   flags,#rotated    wc
        if_nc   sub     x1,#16
        if_nc   add     y1,#1
        if_c    add     y1,#16
        if_c    add     x1,#1
                djnz    count2,#.loop2
                testb   flags,#rotated    wc
        if_nc   sub     y1,font_h
        if_nc   add     x1,#16
        if_c    sub     x1,font_h
        if_c    sub     y1,#16
                ret                       wcz
}}

font_h          long    0
flags           long    0
ascii           long    0
count2          long    0
forecolor       long    white
backcolor       long    0
bits            long    0
bits2           long    0

{{
'plot zero terminated string @ptrb  to x1,y1

plot_string     rdbyte  ascii,ptrb        wz
        if_z    ret                       wcz
                push    ptrb
                call    #plot_char
                pop     ptrb
                add     ptrb,#1
                jmp     #plot_string

'plot value as hex string @ x1,y1
'entry at plot_hex_d assumes digits set by user

plot_hex        mov     digits,#8
plot_hex_d      mov     temp3,digits
                subr    temp3,#8
                shl     temp3,#2
                rol     value,temp3
.loop           getnib  ascii,value,#7
                cmp     ascii,#9          wcz
        if_be   add     ascii,#"0"
        if_a    add     ascii,#"A"-10
                call    #plot_char
                rol     value,#4
                djnz    digits,#.loop
                ret                       wcz

digits          long    0
value           long    0

'plot signed/unsigned decimal string @ x1,y1

plot_dec_s      testb   value,#31         wc
        if_nc   mov     ascii,#"+"
        if_c    mov     ascii,#"-"
                call    #plot_char
                negc    value

plot_dec        mov     r1,##1_000_000_000
                mov     r3,#0
                rep     @.sd2,#10
                qdiv    value,r1
                getqx   temp
                getqy   value
                rolnib  r4,r3,#7
                rolnib  r3,temp,#0
                qdiv    r1,#10
                getqx   r1
.sd2
                mov     digits,#2
                mov     value,r4
                call    #plot_hex_d
                mov     value,r3
                call    #plot_hex
                ret                       wcz
}}

r1              long    0
r2              long    0
r3              long    0
r4              long    0

'Assorted working registers

x1a             long    0
y1a             long    0
x2a             long    0
y2a             long    0

resolution      long    0
start_angle     long    0
sweep           long    0
x9              long    0
y9              long    0
cc              long    0
angle           long    0
radius          long    0
temp3           long    0


_1000           long    1_000
width           long    0
height          long    0
x_inc           long    0
y_inc           long    0
count           long    0
temp            long    0
temp2           long    0
x1              long    0
y1              long    0
x2              long    0
y2              long    0
color           long    0

mode            long    %1_00_11100_0000_0000_00_0_0000000000000

time            long    0
time_s          long    0


'====================================================================
' Graphics demo...
'====================================================================

demo            waitx   ##pause

                call    #cls

                waitx   ##pause

'show 16 x color stripes

demo_loop

                loc     ptrb,#\@video_buffer
                mov     pa,#16
                mov     pb,#0 '#$11111111
.loop2          rep     @.loop,##k
                wrlong  pb,ptrb++
.loop
                add     pb,##$11111111
                djnz    pa,#.loop2

                waitx   ##pause


'shrinking box in random color **********************************

sb              mov     x1,##0
                mov     y1,##0
                mov     x2,##w-1
                mov     y2,##h-1
                mov     temp3,##h/2
                getrnd  color

.loop           call    #plot_box
                add     x1,#1
                sub     x2,#1
                add     y1,#1
                sub     y2,#1
                djnz    temp3,#.loop

                waitx   ##pause


'circular pattern  ***********************************************

cp              mov     x1,##w/2
                mov     y1,##h/2
                mov     radius,#50
                mov     start_angle,#15
                mov     sweep,#330
                mov     resolution,#5           '10 = 1 deg steps

                getnib  temp3,color,#0
.same           getrnd  color
                and     color,#$f
                cmp     color,temp3 wcz
        if_e    jmp     #.same

                mov     count,#250
.loop           call    #plot_circle
                add     radius,#1
                djnz    count,#.loop

                waitx   ##pause

'random colored lines  ********************************************

                mov     x1,#0
                mov     y1,#0
                getrnd  color
                mov     color,#0                'black
                call    #cls
                mov     temp3,#500


again           getrnd  color
                getrnd  pa
                getword x2,pa,#0
                and     x2,##$3ff
                cmp     x2,##w-1 wcz
        if_a    jmp     #again
                getword y2,pa,#1
                and     y2,##$3ff
                cmp     y2,##h-1 wcz
        if_a    jmp     #again

                call    #plot_line
                mov     x1,x2
                mov     y1,y2
                djnz    temp3,#again

                waitx   ##pause


'text test  *******************************************************
{{                                                      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                bitl    flags,#rotated
                bitl    flags,#small


                mov     x1,#0 '100
                mov     y1,#0 '100
                mov     forecolor,#white
                mov     backcolor,#black
                loc     ptrb,#\@top_left                'msg
                call    #plot_string

                mov     x1,##496
                mov     y1,#0 '100
                loc     ptrb,#\@top_right
                call    #plot_string

                mov     x1,##0
                mov     y1,#448
                loc     ptrb,#\@bottom_left
                call    #plot_string

                mov     x1,##448
                mov     y1,#448
                loc     ptrb,#\@bottom_right
                call    #plot_string
}}
                mov     color,#white
                mov     x1,#0
                mov     y1,#0
                mov     x2,##w                          '##639    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                mov     y2,##h                          '##479    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                call    #plot_box
'?                call    #plot_line

                waitx   ##pause

{{
'show all characters in 16x16 mode  **************************

sac             bith    flags,#small

                mov     x1,#0
                mov     y1,#0
                mov     r1,#0
                mov     r3,#48
                mov     forecolor,#black
.loop2          mov     r2,#64            '50

.loop           mov     ascii,r1
                incmod  r1,#255
                getrnd  backcolor
                and     backcolor,#$f     wz
        if_z    mov     backcolor,#white
                call    #plot_char
                djnz    r2,#.loop
                mov     x1,#0
                add     y1,#16
                djnz    r3,#.loop2

                waitx   ##pause


'show all characters in 16x32 mode  **************************

sac2            bitl    flags,#small

                mov     x1,#0
                mov     y1,#0
                mov     r1,#0
                mov     r3,#24            '18
                mov     forecolor,#black
.loop2          mov     r2,#64            '50

.loop           mov     ascii,r1
                incmod  r1,#255
                getrnd  backcolor
                and     backcolor,#$f     wz
        if_z    mov     backcolor,#white
                call    #plot_char
                djnz    r2,#.loop
                mov     x1,#0
                add     y1,#32
                djnz    r3,#.loop2

                waitx   ##pause



'show all 16x16 characters rotated   ********************************

sac_rotated     bith    flags,#small
                bith    flags,#rotated

                mov     x1,#0
                mov     y1,##767
                mov     r1,#0
                mov     r3,#64
                mov     backcolor,#black
.loop2          mov     r2,#48

.loop           mov     ascii,r1
                incmod  r1,#255
                getrnd  forecolor
                and     forecolor,#$f     wz
        if_z    mov     forecolor,#white
                call    #plot_char
                djnz    r2,#.loop
                add     x1,#16
                mov     y1,##767
                djnz    r3,#.loop2

                waitx   ##pause


'show all 16x16 characters rotated   ********************************

sac_rotated2    bitl    flags,#small
                bith    flags,#rotated

                mov     x1,#0
                mov     y1,##767
                mov     r1,#0
                mov     r3,#32
                mov     backcolor,#black
.loop2          mov     r2,#48

.loop           mov     ascii,r1
                incmod  r1,#255
                getrnd  forecolor
                and     forecolor,#$f     wz
        if_z    mov     forecolor,#white
                call    #plot_char
                djnz    r2,#.loop
                add     x1,#32
                mov     y1,##767
                djnz    r3,#.loop2

                bitl    flags,#small
                bitl    flags,#rotated

                waitx   ##pause
}}

                jmp     #demo_loop


                fit     $1F0                            ' check fits in cog


DAT
                orgh    $ '400

'====================================================================
'24 bit color format = rr_gg_bb_00
'====================================================================
palette         long    0               'black
                long    $0000aa00       'blue
                long    $00aa0000       'green
                long    $00aaaa00       'cyan
                long    $aa000000       'red
''                long    $aa000000       'red       reverse red/cyan
''                long    $00aaaa00       'cyan
                long    $aa00aa00       'magenta
                long    $aa550000       'brown
                long    $aaaaaa00       'gray
                long    $55555500       'dark gray
                long    $5555ff00       'bright blue
                long    $55ff5500       'bright green
                long    $55ffff00       'bright cyan
                long    $ff555500       'bright red
                long    $ff55ff00       'bright magenta
                long    $ffff5500       'yellow
                long    $ffffff00       'white
'====================================================================

DAT
{{
                orgh
'====================================================================
' text msgs
'====================================================================
msg             byte    "VGA Graphics & text",0
msg2            byte    "Parallax Propeller 2 FPGA",0
msg3            byte    "Rotated text",0
top_left        byte    "Top left",0
top_right       byte    "Top right",0
bottom_left     byte    "Bottom left",0
bottom_right    byte    "Bottom right",0
'====================================================================
                alignl
}}

''font            file "p1_font.dat"

''video_buffer    byte    $33[w * h / 2]
'
