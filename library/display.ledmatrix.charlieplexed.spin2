{
---------------------------------------------------------------------------------------------------
    Filename:       display.ledmatrix.charlieplexed.spin2
    Description:    Driver for charlieplexed LED matrix displays
    Author:         Jesse Burt
    Started:        Jun 16, 2019
    Updated:        Feb 4, 2024
    Copyright (c) 2024 - See end of file for terms of use.
---------------------------------------------------------------------------------------------------

    NOTE: This was written specifically for the Parallax P2-EVAL add-on board #64006-ES(c),
        but may work with other charlieplexed LED boards.
    NOTE: This code uses excerpts from localroger's Conway's Game of Life demo for the same board.
}

#define MEMMV_NATIVE bytemove
#define LEDMATRIX_CHARLIEPLEXED
#include "graphics.common.spin2h"

#ifdef GFX_DIRECT
#   error "GFX_DIRECT/direct-to-display drawing not supported by this driver"
#endif


CON

    { /// Default I/O configuration (can be overridden by parent object) }
    BASE_PIN    = 0
    WIDTH       = 8
    HEIGHT      = 7
    { /// }


    XMAX        = WIDTH-1
    YMAX        = HEIGHT-1
    CENTERX     = WIDTH/2
    CENTERY     = HEIGHT/2

    BPP         = 1
    MAX_COLOR   = 1
    BYTESPERPX  = 1
    BPPDIV      = 1 #> (8 / BPP)
    BUFF_SZ     = (WIDTH * HEIGHT) / BPPDIV


VAR

    byte _framebuffer[BUFF_SZ]
    byte _basepin


PUB start(): status
' Start the driver using default I/O settings
    return startx(BASE_PIN, WIDTH, HEIGHT, @_framebuffer)


PUB startx(BASEPIN, DISP_WIDTH, DISP_HEIGHT, ptr_fb=0): okay
' Start the driver using custom I/O settings
'   BASEPIN:        base/lowest numbered I/O pin of LED matrix
'   DISP_WIDTH:     display width, in pixels
'   DISP_HEIGHT:    display height, in pixels
'   ptr_fb:         pointer to display buffer (optional; uses internal buffer if unspecified or 0)
'   Returns: cog ID+1 of parent cog, or 0 on failure (bad I/O pin)
    if ( (BASEPIN >= 0) and (BASEPIN <= 57) )
        _basepin := BASEPIN
        set_dims(DISP_WIDTH, DISP_HEIGHT)
        _buff_sz /= BPPDIV      ' xxx temp. workaround for set_dims() limitation
        _bytesperln /= BPPDIV   ' xxx
        address(ptr_fb)
        return (cogid() + 1)
    return FALSE


PUB stop()
' Stop driver
    _basepin := 0
    _disp_width := 0
    _disp_height := 0
    _disp_xmax := 0
    _disp_ymax := 0
    _buff_sz := 0
    _ptr_drawbuffer := 0


PUB address(addr)
' Set framebuffer address
    if ( (addr >= $00004) and (addr <= ($7FFFF-_buff_sz)) )
        { set draw buffer pointer if it's within these unlikely but technically legal bounds }
        _ptr_drawbuffer := addr
    else
        { otherwise, just use the internal buffer }
        _ptr_drawbuffer := @_framebuffer


PUB clear()
' Clear the display
    bytefill(_ptr_drawbuffer, _bgcolor, _buff_sz)


PUB plot(x, y, color)
' Draw pixel at (x, y) in color (buffered)
    if ( (x < 0) or (x > _disp_xmax) or (y < 0) or (y > _disp_ymax) )
        return
    case color
        1:
            byte[_ptr_drawbuffer][x + (y>>3) * _disp_width] |= (|< (y&7))
        0:
            byte[_ptr_drawbuffer][x + (y>>3) * _disp_width] &= !(|< (y&7))
        -1:
            byte[_ptr_drawbuffer][x + (y>>3) * _disp_width] ^= (|< (y&7))
        other:
            return


PUB point(x, y): pc
' Get color of pixel at x, y
    return (byte[_ptr_drawbuffer] ...                   { base }
                [ (x + (y >> 3) * _disp_width) ] ...    { offset }
                & (1 << (y & 7)) <> 0) * -1             { mask }


PUB show()
' Send the display buffer to the display
    wr_buffer(_ptr_drawbuffer)


CON DIRX_ALL    = $FF_FF_FF_FF
CON BITS_MATRIX = %1111111
PUB wr_buffer(ptr_buff) | row, outmask, dirmask, mask_matrix
' Send an alternate buffer to the display
' Charlieplex the regularized bitmap to the LED matrix

    { Preserve all DIRx bits except the ones for the matrix }
    mask_matrix := DIRX_ALL ^ (BITS_MATRIX << _basepin)
    repeat row from 0 to _disp_xmax             ' Charlieplex row, not bitmap row
        outmask := (1 << row)                   ' outx byte gets only the positive drive bit on, all others off
        'dirx must get the positive drive bit and all others that are set in the bitmap
        'each charlieplex row consists of left and right parts of two bitmap rows
        'at the top and bottom nonexistent bitmap rows are loaded, but then are masked out
        dirmask := outmask +    ( byte[ptr_buff + row - 1] >> (8 - row) ) + ...
                                ( byte[ptr_buff + row] & (127 >> row) ) << (row + 1)
        if ( _basepin < 32 )
            outa := outmask << _basepin
            dira := dirmask << _basepin
            waitus(1000)
            dira &= mask_matrix
        else
            outb := outmask << (_basepin & $1F)
            dirb := dirmask << (_basepin & $1F)
            waitus(1000)
            dirb &= mask_matrix

PRI memFill(xs, ys, val, count)
' Fill region of display buffer memory
'   xs, ys: Start of region
'   val: Color
'   count: Number of consecutive memory locations to write
    bytefill(_ptr_drawbuffer + (xs + (ys * _bytesperln)), val, count)


DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

