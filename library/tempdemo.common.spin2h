{
    --------------------------------------------
    Filename: tempdemo-common.spin2h
    Author: Jesse Burt
    Description: Temperature sensor demo - code common to all drivers (P2 version)
    Copyright (c) 2022
    Started Jul 16, 2022
    Updated Dec 24, 2022
    See end of file for terms of use.
    --------------------------------------------
}
#ifdef HAS_THERMCPL                             { thermocouple amplifier drivers }
VAR

    byte _tc_type

PUB show_temp_data() | tscl, cj_temp, tc_temp
' Display temperature sensor data
    tscl := lookupz(sensor.temp_scale(): "C", "F", "K")
    cj_temp := sensor.cj_temp()
    tc_temp := sensor.tc_temp()
    ser.printf(@"Temp (deg %c):\n\r", tscl)
    ser.printf(@"Cold junction: %3.3d.%02.2d\n\r", (cj_temp / 100), abs(cj_temp // 100))
    ser.printf(@"Thermocouple (%c): %3.3d.%02.2d\n\r", tc_type(_tc_type), {
}                                                              (tc_temp / 100), {
}                                                              abs(tc_temp // 100))

PUB tc_type(val): t
' Return thermocouple type as ASCII character, given sensor-specific value for type
    case val
        sensor.TYPE_B: t := "B"
        sensor.TYPE_E: t := "E"
        sensor.TYPE_J: t := "J"
        sensor.TYPE_K: t := "K"
        sensor.TYPE_N: t := "N"
        sensor.TYPE_R: t := "R"
        sensor.TYPE_S: t := "S"
        sensor.TYPE_T: t := "T"
        other: t := "?"

#else                                           { other temperature sensor drivers }

PUB show_temp_data() | temp, tscl
' Display temperature sensor data
    temp := sensor.temperature()
    tscl := lookupz(sensor.temp_scale(): "C", "F", "K")
    ser.printf(@"Temp. (deg %c): %3.3d.%02.2d\n\r", tscl, (temp / 100), abs(temp // 100))
#endif

{ define demo() only if something #including this file doesn't already provide one }
#ifndef HAS_DEMO
PUB demo()

#ifdef HAS_THERMCPL
    _tc_type := sensor.tc_type()                 ' read back and cache it
#endif
    repeat
        ser.pos_xy(0, 3)
        show_temp_data()
        waitms(250)
#endif

CON

    { temperature scales }
    C   = sensor.C
    F   = sensor.F
    K   = sensor.K

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

