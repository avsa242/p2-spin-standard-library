{
---------------------------------------------------------------------------------------------------
    Filename:       SmallMatrixDemo-common.spin2h
    Description:    Graphics demo for small-format dot-matrix displays (common code)
    Author:         Jesse Burt
    Started:        Jul 1, 2022
    Updated:        Jan 22, 2024
    Copyright (c) 2024 - See end of file for terms of use.
---------------------------------------------------------------------------------------------------

    NOTE: This is not a top-level object. This file is meant to be #included
    by a display driver-specific demo
}

OBJ

    math:   "math.int"


CON

    AR      = disp.WIDTH / disp.HEIGHT

    Q1      = 1023
    Q2      = 2047
    Q3      = 3071
    Q4      = 4095

VAR

    long _stack_timer[50]
    long _timer_set, _time

PUB demo()

    cogspin(NEWCOG, cog_timer(), @_stack_timer)
    disp.clear()

    demo_box()
    demo_circle()
    demo_line()
    demo_plot()
    demo_text()

    disp.stop()

PUB demo_box() | c, sz
' Draw expanding boxes
    _timer_set := _time
    sz := 0
    c := disp.MAX_COLOR
    repeat while _timer_set
        disp.clear()
        disp.box(sz, sz, abs(disp.XMAX-sz), abs(disp.YMAX-sz), c, false)
        disp.show()
        waitms(100)
        sz++
        if (sz > (disp.XMAX <# disp.YMAX))                ' limit size to whichever is smaller
            sz := 0
        c++
        if (c > disp.MAX_COLOR)
            c := 0
    waitclear()

PUB demo_circle() | c, r
' Draw expanding circles
    _timer_set := _time
    c := disp.MAX_COLOR
    r := 1
    repeat while _timer_set
        disp.clear()
        disp.circle(0, 0, r, c, false)
        disp.show()
        waitms(50)
        r++
        if (r > disp.WIDTH)
            r := 0
        c++
        if (c > disp.MAX_COLOR)
            c := 0
    waitclear()

PUB demo_line() | x, y, c, i, xr, yr
' Draw screen edge walking lines
    c := disp.MAX_COLOR
    xr := (200_000 / (disp.WIDTH*2))
    yr := (200_000 / (disp.HEIGHT*2))
    _timer_set := _time
    repeat while _timer_set
        repeat i from 0 to Q1 step 15
            disp.clear
            x := (math.cos(i) / xr) * AR
            y := (math.sin(i) / yr)
            disp.line(0, 0, x, y, c)
            disp.show()
            waitms(5)
        repeat i from Q3 to Q4 step 15
            disp.clear
            x := (math.cos(i) / xr) * AR
            y := (math.sin(i) / yr)
            disp.line(0, disp.YMAX, x, (disp.YMAX + y), c)
            disp.show()
            waitms(5)
        repeat i from Q2 to Q3 step 15
            disp.clear
            x := (math.cos(i) / xr) * AR
            y := (math.sin(i) / yr)
            disp.line(disp.XMAX, disp.YMAX, (disp.XMAX + x), (disp.YMAX + y), c)
            disp.show()
            waitms(5)
        repeat i from Q1 to Q2 step 15
            disp.clear
            x := (math.cos(i) / xr) * AR
            y := (math.sin(i) / yr)
            disp.line(disp.XMAX, 0, (disp.XMAX + x), y, c)
            disp.show()
            waitms(5)
    waitclear()

PUB demo_plot() | x, y
' Draw random pixels
    _timer_set := _time
    repeat while _timer_set
        disp.plot(math.rndi(disp.XMAX), math.rndi(disp.YMAX), math.rndi(disp.MAX_COLOR))
        disp.show()
    waitclear()

PUB demo_text() | ch
' Sequentially draw the whole font table
    disp.fgcolor(disp.MAX_COLOR)
    disp.bgcolor(0)
    ch := 32
    disp.pos_xy(0, 0)

    _timer_set := _time
    repeat while _timer_set
        disp.char(ch)
        if (ch++ > 127)
            ch := 32
        disp.show()
        waitms(100)
    waitclear()

PRI waitclear()
' Wait, then clear the display
    waitms(_time)
    disp.clear()

PRI cog_timer() | time_left
' Timer loop
    repeat
        repeat until _timer_set                 ' wait here until a timer has
        time_left := _timer_set                 '   been set

        repeat                                  ' loop for time_left ms
            time_left--
            waitms(1)
        while (time_left > 0)
        _timer_set := 0                         ' signal the timer's been reset

DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

