{
    --------------------------------------------
    Filename: BT81X-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the BT81x driver (P2 version)
    Copyright (c) 2022
    Started Dec 31, 2020
    Updated Oct 16, 2022
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _clkfreq    = 250_000_000
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

    CS_PIN      = 0
    SCK_PIN     = 1
    MOSI_PIN    = 2
    MISO_PIN    = 3
    RST_PIN     = 4                             ' optional; pull high if unused
    SCK_FREQ    = 20_000_000                    ' max is 30_000_000

    BRIGHTNESS  = 100                           ' Initial brightness (0..128)

' --

    INTER_DELAY = 2_000                         ' wait ms between demos

' Uncomment one of the following, depending on your display size/resolution
'   NOTE: WIDTH, HEIGHT, XMAX, YMAX, CENTERX, CENTERY symbols are defined
'   in the display timings file.
#include "eve3-lcdtimings.800x480.spinh"
'#include "eve3-lcdtimings.480x272.spinh"
'#include "eve3-lcdtimings.320x240.spinh"
'#include "eve3-lcdtimings.320x102.spinh"


OBJ

    cfg     : "boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    eve     : "display.lcd.bt81x"

PUB main()

    setup()

    eve.preset_high_perf()                       ' defaults, but max clock
    eve.set_brightness(BRIGHTNESS)

    demo_line()
    demo_box()
    demo_spinner()
    demo_button()
    demo_gauge()
    demo_gradient()
    demo_gradient_trans()
    demo_keys()
    demo_progress_bar()
    demo_scrollbar()
    demo_slider()
    demo_dial()
    demo_toggle()
    demo_text_wrap_wid()
    demo_num()
    demo_disp_rot()

    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.dl_end()
    fadeout(30)
    eve.powered(FALSE)
    repeat

PUB demo_box() | i

    ser.strln(string("box()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.line_width(1)
    repeat i from 10 to CENTERY step 20
        eve.color_rgb(0, i/4, 128)
        eve.box(i, CENTERY-i, XMAX-i, CENTERY+i, true)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_button() | i, btn_w, btn_h

    ser.strln(string("button()"))
    btn_w := 78
    btn_h := 32
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.widget_fgcolor($40_40_40)
    eve.button(400-btn_w, 240-btn_h, btn_w, btn_h, 16, eve.OPT_3D, string("A button!"))
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_dial()

    ser.strln(string("dial()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.dial(80, 60, 55, 0, $8000)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.dial(80, 60, 55, eve.OPT_FLAT, $8000)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.dial(28, 60, 24, 0, $0000)
    eve.str(28, 100, 26, eve.OPT_CENTER, string("0%"))
    eve.dial(80, 60, 24, 0, $5555)
    eve.str(80, 100, 26, eve.OPT_CENTER, string("33%"))
    eve.dial(132, 60, 24, 0, $AAAA)
    eve.str(132, 100, 26, eve.OPT_CENTER, string("66%"))
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_gauge() | i

    ser.strln(string("gauge()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.gauge(CENTERX, CENTERY, 100, eve.OPT_FLAT, 10, 5, i, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    repeat i from 0 to 100
        eve.wait_rdy()
        eve.dl_start()
        eve.clear()
        eve.gauge(CENTERX, CENTERY, 50, eve.OPT_3D, 10, 5, i, 100)
        eve.dl_end()
        waitms(10)
    waitms(INTER_DELAY)
    repeat i from 100 to 0
        eve.wait_rdy()
        eve.dl_start()
        eve.clear()
        eve.gauge(CENTERX, CENTERY, 50, eve.OPT_3D, 10, 5, i, 100)
        eve.dl_end()
        waitms(10)

    waitms(INTER_DELAY)

PUB demo_gradient()

    ser.strln(string("gradient()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.gradient(0, 0, $0000FF, XMAX, 0, $FF0000)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.Gradient (0, 0, $808080, XMAX, 0, $80FF40)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.gradient(0, 0, $808080, XMAX, YMAX, $80FF40)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_gradient_trans()

    ser.strln(string("gradient_trans()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.str(80, 60, 30, eve.OPT_CENTER, string("background"))
    eve.gradient_trans(0, 0, $FF00FF00, 160, 0, $0000FF00)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.str(80, 30, 30, eve.OPT_CENTER, string("background"))
    eve.str(80, 60, 30, eve.OPT_CENTER, string("background"))
    eve.str(80, 90, 30, eve.OPT_CENTER, string("background"))
    eve.gradient_trans(0, 20, $40FF0000, 0, 100, $FF0000FF)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_keys() | k

    ser.strln(string("keys()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(10, 10, 140, 30, 26, 0, string("12345"))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(10, 10, 140, 30, 26, eve.OPT_FLAT, string("12345"))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(10, 10, 140, 30, 26, 0, string("12345"))
    eve.keys(10, 60, 140, 30, 26, eve.OPT_CENTER, string("12345"))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(10, 10, 140, 30, 26, $32, string("12345"))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(22, 1, 116, 28, 29, 0, string("789"))
    eve.keys(22, 31, 116, 28, 29, 0, string("456"))
    eve.keys(22, 61, 116, 28, 29, 0, string("123"))
    eve.keys(22, 91, 116, 28, 29, 0, string("0."))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(2, 2, 156, 21, 20, eve.OPT_CENTER, string("qwertyuiop"))
    eve.keys(2, 26, 156, 21, 20, eve.OPT_CENTER, string("asdfghjkl"))
    eve.keys(2, 50, 156, 21, 20, eve.OPT_CENTER, string("zxcvbnm"))
    eve.button(2, 74, 156, 21, 20, 0, string(" "))
    eve.dl_end()
    waitms(INTER_DELAY)

    k := $66
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.keys(2, 2, 156, 21, 20, k | eve.OPT_CENTER, string("qwertyuiop"))
    eve.keys(2, 26, 156, 21, 20, k | eve.OPT_CENTER, string("asdfghjkl"))
    eve.keys(2, 50, 156, 21, 20, k | eve.OPT_CENTER, string("zxcvbnm"))
    eve.button(2, 74, 156, 21, 20, 0, string(" "))
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_line() | i

    ser.strln(string("line()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    repeat i from 10 to XMAX-10 step 10
        eve.color_rgb(0, i/4, 128)
        eve.line(i, 10, XMAX-10-i, YMAX-10)
    repeat i from 10 to YMAX-10 step 10
        eve.color_rgb(0, 128, i/4)
        eve.line(XMAX-10, i, 10, YMAX-10-i)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_num()

    ser.strln(string("num()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.num(20, 60, 31, 0, 42)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.num(80, 60, 31, eve.OPT_CENTER, 42)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.num(20, 20, 31, eve.OPT_SIGNED, 42)
    eve.num(20, 60, 31, eve.OPT_SIGNED, -42)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.num(150, 20, 31, eve.OPT_RIGHTX | 3, 42)
    eve.num(150, 60, 31, eve.OPT_SIGNED | eve.OPT_RIGHTX | 3, -1)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.num(80, 30, 28, eve.OPT_CENTER, 123456)
    eve.set_base(16)
    eve.num(80, 60, 28, eve.OPT_CENTER, 123456)
    eve.set_base(2)
    eve.num(80, 90, 26, eve.OPT_CENTER, 123456)

    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_progress_bar()

    ser.strln(string("progress_bar()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.progress_bar(20, 50, 120, 12, 0, 50, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.progress_bar(20, 50, 120, 12, eve.OPT_FLAT, 50, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.widget_bgcolor($402000)
    eve.progress_bar(20, 50, 120, 4, 0, 9000, 65535)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_disp_rot() | r

    ser.strln(string("disp_rot()"))
    repeat r from 0 to 7
        eve.wait_rdy()
        eve.dl_start()
        eve.clear_color(0, 0, 0)
        eve.clear()
        eve.disp_rot(r)
        eve.str(CENTERX, CENTERY, 31, eve.OPT_CENTER, string("Screen rotation"))
        eve.dl_end()
        waitms(INTER_DELAY)
    waitms(INTER_DELAY)

PUB demo_scrollbar()

    ser.strln(string("scrollbar()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.scrollbar(20, 50, 120, 8, 0, 10, 40, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.scrollbar(20, 50, 120, 8, eve.OPT_FLAT, 10, 40, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.widget_bgcolor($402000)
    eve.widget_fgcolor($703800)
    eve.scrollbar(140, 10, 8, 100, 0, 10, 40, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_slider()

    ser.strln(string("slider()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.slider(20, 50, 120, 8, 0, 50, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.slider(20, 50, 120, 8, eve.OPT_FLAT, 50, 100)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.widget_bgcolor($402000)
    eve.widget_fgcolor($703800)
    eve.slider(76, 10, 8, 100, 0, 20000, 65535)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_spinner() | i

    ser.strln(string("spinner()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.str(CENTERX, CENTERY-30, 27, eve.OPT_CENTER, string("Please wait..."))
    eve.spinner(CENTERX, CENTERY, eve.SPIN_CIRCLE_DOTS, 0)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.str(CENTERX, CENTERY-30, 27, eve.OPT_CENTER, string("Please wait..."))
    eve.spinner(CENTERX, CENTERY, eve.SPIN_LINE_DOTS, 0)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.str(CENTERX, CENTERY-40, 27, eve.OPT_CENTER, string("Please wait..."))
    eve.spinner(CENTERX, CENTERY, eve.SPIN_CLOCKHAND, 0)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.str(CENTERX, CENTERY-30, 27, eve.OPT_CENTER, string("Please wait..."))
    eve.spinner(CENTERX, CENTERY, eve.SPIN_ORBIT_DOTS, 0)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.spinner(CENTERX, CENTERY, eve.SPIN_CIRCLE_DOTS, 1)
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 48)
    eve.clear()
    eve.spinner(CENTERX, CENTERY, eve.SPIN_CIRCLE_DOTS, 2)
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_text_wrap_wid()

    ser.strln(string("text_wrap_wid(), str()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.text_wrap_wid(160)
    eve.str(0, 0, 30, eve.OPT_FILL, string("This text doesn't fit on one line"))
    eve.dl_end()
    waitms(INTER_DELAY)

PUB demo_toggle()

    ser.strln(string("toggle()"))
    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.toggle(60, 20, 33, 27, 0, 0, string("no", $FF, "yes"))
    eve.toggle(60, 60, 33, 27, 0, 65535, string("no", $FF, "yes"))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.toggle(60, 20, 33, 27, eve.OPT_FLAT, 0, string("no", $FF, "yes"))
    eve.toggle(60, 60, 33, 27, eve.OPT_FLAT, 65535, string("no", $FF, "yes"))
    eve.dl_end()
    waitms(INTER_DELAY)

    eve.wait_rdy()
    eve.dl_start()
    eve.clear_color(0, 0, 0)
    eve.clear()
    eve.widget_bgcolor($402000)
    eve.widget_fgcolor($703800)
    eve.toggle(60, 20, 33, 27, 0, 0, string("no", $FF, "yes"))
    eve.toggle(60, 60, 33, 27, 0, 65535, string("no", $FF, "yes"))
    eve.dl_end()
    waitms(INTER_DELAY)

PUB fadeout(delay_ms) | i

    ser.strln(string("set_brightness()"))
    repeat i from BRIGHTNESS to 0
        eve.set_brightness(i)
        waitms(delay_ms)

PUB setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(string("Serial terminal started"))
    if eve.startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SCK_FREQ, RST_PIN, @_disp_setup)
        ser.strln(string("BT81x driver started"))
    else
        ser.strln(string("BT81x driver failed to start - halting"))
        repeat

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
SOFTWARE.
}
