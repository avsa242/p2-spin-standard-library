{
    --------------------------------------------
    Filename: VGA-Text-Demo.spin2
    Description: Demo of the tiling VGA text driver
    Author: Eric Smith
    Modified by: Jesse Burt
    Started Nov 13, 2019
    Updated Oct 31, 2022
    See end of file for terms of use.
    --------------------------------------------
}

'
' clock frequency settings
' for 640x480 we use a 25 MHz pixel clock
' for 800x600 we use a 40 MHz pixel clock
' for 1024x768 we use a 65 MHz pixel clock
'
' for best results the system clock should be a multiple of
' the pixel clock
'
' 200 MHz is a convenient one for many purposes, and
' is only a slight overclocking
'
CON

    _xtlfreq        = cfg._xtlfreq
    _clkfreq        = 200_000_000
    PIXSHIFT        = 31

' -- User-modifiable constants
    VGA_PINBASE     = 0
' --

DAT

    democolors
        long $FF000000, $FFFF0000, $00FF0000, $00FFFF00
        long $0000FF00, $FF00FF00, $FFFFFF00, $00000000
        long $7F000000, $007F7F00, $007F0000

VAR

    long _params[40]                            ' VGA tile driver params
    long _screen_buffer[vidmode.ROWS * vidmode.COLS * (vidmode.CELL_SIZE/4)]

OBJ

    cfg         : "boardcfg.p2eval"
    vga         : "display.vga.text"

' Uncomment one of the below for the specified video mode
    vidmode : "core.con.vga.640x480"
'    vidmode : "core.con.vga.800x600"
'    vidmode : "core.con.vga.1024x768"

DAT

    orgh
' font buffer
    long
    fontdata    file "font.8x16.unscii.bin"

PUB main()

    setup()

    demo_fill_text()
    demo_run_text()

PUB demo_fill_text() | x, y, fgcol, bgcol, ch, grey, col1, col2, idx

    ch := 0

    repeat y from 0 to vidmode.ROWS-1
        grey := y << 3
        bgcol := (grey << 24) | (grey << 16) | (grey << 8)
        repeat x from 0 to vidmode.COLS-1
            grey := (x & 15)
            idx := x / 16
            col1 := democolors[idx]
            col2 := democolors[idx+1]
            fgcol := colorblend(col1, col2, (grey << 4) + grey)
            vga.glyphat(x, y, ch++, fixupcol(fgcol), fixupcol(bgcol), $20)

    waitms(10_000)

PUB demo_run_text() | n

    vga.puts(string(27, "[1;1H"))
    vga.puts(string(27, "[0J"))

    n := 0
    repeat
        vga.newline()
        vga.puts(string("Hello! ", 27, "[BCursor down"))
        vga.puts(string(27, "[31mRed text "))
        vga.puts(string(27, "[1;31mBright Red text"))
        vga.puts(string(27, "[7mInverse "))
        vga.puts(string(27, "[22;31mBold off "))
        vga.puts(string(27, "[4mUnderline", 27, "[24m"))
        vga.puts(string(27, "[9mStrikethru"))
        vga.puts(string(27, "[0mEffects off "))
        vga.putdec(n)
        n++
        waitms(100)

PUB setup() | i, pclkscale, pclk, sysclk

    pclk := vidmode.PIX_CLKFREQ                 ' pixel clock
    sysclk := clkfreq                           ' system clock
    ' calculate scale := $8000_0000 * pclk / sysclk
    ' this is equal to pclk / (sysclk / $8000_000)
    pclkscale := calcscale(pclk, sysclk)

    i := 0
    _params[i++] := VGA_PINBASE
    _params[i++] := @_screen_buffer             ' screen buffer
    _params[i++] := vidmode.COLS                ' screen columns
    _params[i++] := vidmode.ROWS                ' screen rows
    _params[i++] := @fontdata                   ' font data
    _params[i++] := 8                           ' font width
    _params[i++] := vidmode.FONT_HEIGHT         ' font height
    _params[i++] := pclkscale                   ' pixel clock scaling value
    _params[i++] := vidmode.H_FP                ' horizontal front porch
    _params[i++] := vidmode.HSYNC               ' hsync pulse
    _params[i++] := vidmode.H_BP                ' horizontal back porch
    _params[i++] := vidmode.V_FP                ' vertical front porch
    _params[i++] := vidmode.VSYNC_LINES         ' vertical sync lines
    _params[i++] := vidmode.V_BP                ' vertical back porch
    _params[i++] := vidmode.POLARITY            ' vertical/horizontal polarity
    _params[i++] := vidmode.CELL_SIZE

    ' start up the VGA driver
    vga.startx(VGA_PINBASE, @_params, @_screen_buffer)

PRI colorblend(a, b, mix): blended

    org
        setpiv mix
        blnpix a, b
    end

    return a

PRI fixupcol(a): x | r, g, b

    b := (a >> 8) & $FF
    g := (a >> 16) & $FF
    r := a >> 24
    x := vga.rgbcolor(r, g, b)
    return x

PRI calcscale(pixclk, sysclk): scale | shiftcnt

    shiftcnt := PIXSHIFT
' remove factors of 5 (will be pretty common)
    repeat while 0 == (pixclk // 5) and 0 == (sysclk // 5)
        pixclk := pixclk / 5
        sysclk := sysclk / 5

' scale a up as much as we can
    repeat while ((pixclk & $4000_0000) == 0) and shiftcnt > 0
        pixclk := pixclk << 1
        shiftcnt--

    repeat while ((sysclk & 1) == 0) and shiftcnt > 0
        sysclk := sysclk >>1
        shiftcnt--
    return (pixclk / sysclk) << shiftcnt

