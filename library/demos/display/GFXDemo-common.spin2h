{
---------------------------------------------------------------------------------------------------
    Filename:       GFXDemo-common.spin2h
    Description:    Graphics demo for all supported display types (common code)
    Author:         Jesse Burt
    Started:        Feb 16, 2022
    Updated:        Jan 21, 2024
    Copyright (c) 2024 - See end of file for terms of use.
---------------------------------------------------------------------------------------------------

    NOTE: This is not a top-level object. This file is meant to be #included
    by a display driver-specific demo
}

OBJ

    math:   "math.int"


VAR

    long _stack_timer[50]
    long _timer_set, _time

PUB demo()

    cogspin(NEWCOG, cog_timer(), @_stack_timer)
    disp.clear()

    demo_greet()
    demo_bounce()
    demo_box()
    demo_boxfilled()
    demo_circle()
    demo_circlefilled()
    demo_line()
    demo_plot()
    demo_sinewave()
    demo_text()
    demo_wander()

    disp.stop()
    repeat

PUB demo_bounce() | bx, by, dx, dy, radius
' Draw a circle bouncing off screen edges
' Pick a random screen location to start from, and a random direction
    radius := 5
    bx := (math.rndi(disp.XMAX) // (disp.WIDTH - (radius * 4))) + (radius * 2)
    by := (math.rndi(disp.YMAX) // (disp.HEIGHT - (radius * 4))) + (radius * 2)
    dx := math.rndi(4) // 2 * 2 - 1
    dy := math.rndi(4) // 2 * 2 - 1

    _timer_set := _time
    repeat while _timer_set
        bx += dx
        by += dy

        ' if any edge of the screen is reached, change direction
        if (by <= radius) or (by >= (disp.HEIGHT - radius))
            dy *= -1                            ' top/bottom edges
        if (bx <= radius) OR (bx >= (disp.WIDTH - radius))
            dx *= -1                            ' left/right edges

        disp.circle(bx, by, radius, disp.MAX_COLOR, FALSE)
        disp.show()
        disp.clear()
    waitclear()

PUB demo_box() | c
' Draw random boxes
    _timer_set := _time
    repeat while _timer_set
        c := math.rndi(disp.MAX_COLOR)
        disp.box(math.rndi(disp.XMAX), math.rndi(disp.YMAX), math.rndi(disp.XMAX), math.rndi(disp.YMAX), c, FALSE)
        disp.show()
    waitclear()

PUB demo_boxfilled() | c
' Draw random filled boxes
    _timer_set := _time
    repeat while _timer_set
        c := math.rndi(disp.MAX_COLOR)
        disp.box(math.rndi(disp.XMAX), math.rndi(disp.YMAX), math.rndi(disp.XMAX), math.rndi(disp.YMAX), c, TRUE)
        disp.show()
    waitclear()

PUB demo_circle() | x, y, r
' Draw circles at random locations
    _timer_set := _time
    repeat while _timer_set
        x := math.rndi(disp.XMAX)
        y := math.rndi(disp.YMAX)
        r := math.rndi(disp.YMAX / 2)
        disp.circle(x, y, r, math.rndi(disp.MAX_COLOR), FALSE)
        disp.show()
    waitclear()

PUB demo_circlefilled() | x, y, r
' Draw circles at random locations
    _timer_set := _time
    repeat while _timer_set
        x := math.rndi(disp.XMAX)
        y := math.rndi(disp.YMAX)
        r := math.rndi(disp.YMAX / 2)
        disp.circle(x, y, r, math.rndi(disp.MAX_COLOR), TRUE)
        disp.show()
    waitclear()

PUB demo_greet()
' Display the banner/greeting
    disp.fgcolor(disp.MAX_COLOR)
    disp.bgcolor(0)
    disp.pos_xy(0, 0)
    disp.printf(string("%s\n\r"), @_drv_name)
    disp.printf(string("P2X8C4M64P\n\r%dMHz\n\r"), clkfreq / 1_000_000)
    disp.printf(string("%dx%d"), disp.WIDTH, disp.HEIGHT)
    disp.show()
    waitclear()

PUB demo_line()
' Draw random lines
    _timer_set := _time
    repeat while _timer_set
        disp.line(math.rndi(disp.XMAX), math.rndi(disp.YMAX), math.rndi(disp.XMAX), math.rndi(disp.YMAX), math.rndi(disp.MAX_COLOR))
        disp.show()
    waitclear()

PUB demo_plot() | x, y
' Draw random pixels
    _timer_set := _time
    repeat while _timer_set
        disp.plot(math.rndi(disp.XMAX), math.rndi(disp.YMAX), math.rndi(disp.MAX_COLOR))
        disp.show()
    waitclear()

PUB demo_sinewave() | x, y, modifier, offset, div
' Draw a sine wave the length of the screen, influenced by the system counter
    case disp.HEIGHT
        32:
            div := 4096
        64:
            div := 2048
        other:
            div := 4096

    offset := disp.CENTERY                           ' Offset for Y axis

    _timer_set := _time
    repeat while _timer_set
        repeat x from 0 to disp.XMAX
            modifier := (abs(cnt) / 1_000_000)   ' system counter as modifier
            y := offset + (math.sin(x * modifier) / div)
            disp.plot(x, y, disp.MAX_COLOR)
        disp.show()
        disp.clear()
    waitclear()

PUB demo_text() | ch
' Sequentially draw the whole font table
    disp.fgcolor(disp.MAX_COLOR)
    disp.bgcolor(0)
    ch := 32
    disp.pos_xy(0, 0)

    _timer_set := _time
    repeat while _timer_set
        disp.char(ch)
        if (ch++ > 127)
            ch := 32
        disp.show()
    waitclear()

PUB demo_wander() | x, y
' Draw randomly wandering pixels
    x := (disp.XMAX / 2)                             ' start at screen center
    y := (disp.YMAX / 2)

    _timer_set := _time
    repeat while _timer_set
        case math.rndi(4)                       ' which way to move?
            1:                                  ' wander right
                x += 2
                if (x > disp.XMAX)                   ' wrap around at the edge
                    x := 0
            2:                                  ' wander left
                x -= 2
                if (x < 0)
                    x := disp.XMAX
            3:                                  ' wander down
                y += 2
                if (y > disp.YMAX)
                    y := 0
            4:                                  ' wander up
                y -= 2
                if (y < 0)
                    y := disp.YMAX
        disp.plot(x, y, math.rndi(disp.MAX_COLOR))
        disp.show()
    waitclear()

PRI waitclear()
' Wait, then clear the display
    waitms(_time)
    disp.clear()

PRI cog_timer() | time_left
' Timer loop
    repeat
        repeat until _timer_set                 ' wait here until a timer has
        time_left := _timer_set                 '   been set

        repeat                                  ' loop for time_left ms
            time_left--
            waitms(1)
        while (time_left > 0)
        _timer_set := 0                         ' signal the timer's been reset

{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

