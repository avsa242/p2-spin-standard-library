{
    --------------------------------------------
    Filename: VGA-AdjTimings.spin2
    Description: Utility for adjusting VGA driver display
        timings while displaying a simple test pattern
    Author: Jesse Burt
    Copyright (c) 2022
    Started: Jun 21, 2020
    Updated: Oct 16, 2022
    See end of file for terms of use.
    --------------------------------------------
}
CON

    _clkfreq        = cfg._clkfreq_def
    _xtlfreq        = cfg._xtlfreq

' -- User-modifiable constants
    SER_BAUD        = 2_000_000
    VGA_BASEPIN     = 48                         ' 0, 8, 16, 24, 32, 40, 48
' --

    WIDTH           = 320
    HEIGHT          = 240
    XMAX            = WIDTH-1
    YMAX            = HEIGHT-1
    BUFFSZ          = WIDTH * HEIGHT
    BPP             = 1
    BPL             = WIDTH * BPP

    { Default 640x480 timings }
    VF_DEF          = 10        ' vert front porch
    VB_DEF          = 33        ' vert back porch
    HF_DEF          = 16        ' horiz front porch
    HS_DEF          = 96        ' horiz sync pulse
    HB_DEF          = 48        ' horiz back porch
    HV_DEF          = 640       ' active horizontal

VAR

    byte _disp_buff[BUFFSZ]

OBJ

    cfg : "boardcfg.p2eval"
    ser : "com.serial.terminal.ansi"
    vga : "display.vga.bitmap-8bpp"
    fnt : "font.5x8"

PUB main() | ch, vf, vb, hf, hs, hb, hv

    vf := VF_DEF
    vb := VB_DEF
    hf := HF_DEF
    hs := HS_DEF
    hb := HB_DEF
    hv := HV_DEF

    vga.set_timings(vf, vb, hf, hs, hb, hv)

    setup()
    vga.clear()

    ser.position(0, 3)
    ser.strln(@"Keys:")
    ser.strln(@"   VF   VB   HF   HS   HB   HV")
    ser.strln(@"+  q    w    e    r    t    y")
    ser.strln(@"-  a    s    d    f    g    h")
    ser.strln(@"<SPACE> resets all to defaults")

    repeat
        vga.box(0, 0, XMAX, YMAX, 255)
        vga.line(0, 0, XMAX, YMAX, 255)
        vga.line(XMAX, 0, 0, YMAX, 255)
        vga.circle(XMAX/2, YMAX/2, YMAX/2, 255)

        ser.position(0, 10)
        ser.printf(@"vga.SetTimings(%d, %d, %d, %d, %d, %d)", vf, vb, hf, hs, hb, hv)

        case ser.charin()
            "q": vf++
            "a": vf--
            "w": vb++
            "s": vb--
            "e": hf++
            "d": hf--
            "r": hs++
            "f": hs--
            "t": hb++
            "g": hb--
            "y": hv++
            "h": hv--
            " ":
                vf := VF_DEF
                vb := VB_DEF
                hf := HF_DEF
                hs := HS_DEF
                hb := HB_DEF
                hv := HV_DEF
            other:
                next

        { timings are read on driver startup - re-cycle the driver
            when changes are made }
        vga.stop()
        vga.start(VGA_BASEPIN, WIDTH, HEIGHT, @_disp_buff)
        vga.set_timings(vf, vb, hf, hs, hb, hv)
        vga.wait_vsync()
        vga.show()
    repeat

PUB setup()

    ser.start(SER_BAUD)
    ser.clear()
    ser.printf(@"Serial terminal started - p2 @ %dMHz\n\r", (clkfreq/1000000))

    setup_palette()
    vga.start(VGA_BASEPIN, WIDTH, HEIGHT, @_disp_buff)
    ser.strln(@"VGA 8bpp driver started")
    vga.fontaddress(fnt.ptr())
    vga.fontsize(fnt.WIDTH, fnt.HEIGHT)
    vga.clear()

PRI setup_palette() | i, r, g, b, c, ptr_pal
' Set up palette
    r := 0
    g := 0
    b := 0
    ptr_pal := vga.palette_ptr()
    repeat i from 0 to 255
        c := 0 | (r << 16) | (g << 8) | b
        long[ptr_pal][i] := c

        case i
            0..63:
                r += 4
                g := 0
                b := 0
            64..127:
                r := 0
                g += 4
                b := 0
            128..191:
                r := 0
                g := 0
                b += 4
            192..253:
                r += 4
                g += 4
                b := 0
            254..255:
                r := 255
                g := 255
                b := 255

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}
