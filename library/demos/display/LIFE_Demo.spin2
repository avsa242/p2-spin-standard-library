{{
Conway's Game of Life demo
for the P2-ES LED matrix accessory board

Rules for ending a run:

board empty = extinction = quit immediately

starting at tick 10, take a snapshot; if the board ever matches
the snapshot, we are in an oscillator, and we display another
10 ticks before ending

each time a snap is taken, add 2 to the interval for taking
the next snap, so if we settle on a long-period oscillator
we will eventually break loose
}}
CON

     _xtlfreq   = cfg._xtlfreq
     _clkfreq   = cfg._clkfreq_def

    BASEPIN     = 32
    STATUSLED   = 57
    SNAPLED     = 58
    OSCLED      = 59

VAR

    byte bitmap[7]
    byte nextmap[7]
    byte endsnap[7]

OBJ

    cfg : "boardcfg.p2eval"

PUB Main()

    repeat
        dolife()

PUB DoLife() | i, j, s, r, b, rnd, endcnt, snaplife, snapint

    'announce what we're about
    outb[OSCLED..STATUSLED]~~
    dirb[OSCLED..STATUSLED]~~
    repeat i from 0 to strsize(@demo_string) - 2
        !outb[STATUSLED]
        repeat s from 0 to 5
            repeat j from 0 to 6
                r := charset[7 * (demo_string[i] - 32) + j] << 6 + charset[7 * (demo_string[i + 1] - 32) + j]
                r := r -> 4 <- s
                bitmap[6-j] := r
            repeat 3
                charlieplex()
    outb[STATUSLED]~

    'initialize the life board
    endcnt := 0
    snaplife := 0
    snapint := 10
    repeat i from 0 to 6
        bitmap[i]~
        endsnap[i]~
    repeat i from 0 to 6
        j := 1
        repeat 8
            org
                getrnd rnd 'use the P2 PRNG
            end
            if rnd & 3 == 0
                bitmap[i] += j
            j <<= 1

    repeat 20
        charlieplex()
    repeat
        'advance and redraw life board
        repeat i from 0 to 6
            nextmap[i]~  'clear result map
        repeat i from 0 to 6
            j := 1
            repeat 8
                'cycle through all cells
                s := 0 'count the cell's neighbors
                if i > 0
                    b := bitmap[i - 1]
                    if b & (j << 1)
                        s++
                    if b & j
                        s++
                    if b & (j >> 1)
                        s++
                if i < 6
                    b := bitmap[i + 1]
                    if b & (j << 1)
                        s++
                    if b & j
                        s++
                    if b & (j >> 1)
                        s++
                b := bitmap[i]
                if b & (j << 1)
                    s++
                if b & (j >> 1)
                    s++
                'apply the consequences
                if b & j
                    'cell is alive
                    if s == 2 or s == 3
                        'cell is still alive
                        nextmap[i] += j
                else
                    'cell is dead
                    if s == 3
                        'cell is now alive
                        nextmap[i] += j
                j <<= 1 'cycle to the next horizontal cell
        repeat i from 0 to 6
            bitmap[i] := nextmap[i] 'transfer new map to bitmap
        repeat 20
            charlieplex() 'show result
        'see if we're done.  Note we do the upper long compares with bitmap+3
        'because there are only 7 bytes in the array, not 8.
        if long[@bitmap] | long[@bitmap+3] == 0
            'we're extinct
            return
        elseif endcnt > 0
            'we've detected oscillation, just show it a bit
            outb[SNAPLED]~~
            outb[OSCLED]~
            endcnt++
            if endcnt > 10
                return
        else
            outb[SNAPLED]~~
            snaplife++
            if snaplife > snapint
                'get new snap
                long[@endsnap] := long[@bitmap]
                long[@endsnap+3] := long[@bitmap+3]
                snaplife~
                snapint += 2
                outb[SNAPLED]~
            elseif long[@endsnap] == long[@bitmap] and long[@endsnap+3] == long[@bitmap+3]
                'oscillation detected, show it for a bit
                endcnt := 1
                outb[OSCLED]~

PRI Charlieplex() | row, outmask, dirmask
    'charlieplex the regularized bitmap to the LED matrix
    repeat row from 0 to 7 'charlieplex row, not bitmap row
        'outx byte gets only the positive drive bit on, all others off
        outmask := 1 << row
        'dirx must get the positive drive bit and all others that are set in the bitmap
        'each charlieplex row consists of left and right parts of two bitmap rows
        'at the top and bottom nonexistent bitmap rows are loaded, but then are masked out
        dirmask := outmask + byte[@bitmap + row - 1] >> (8 - row) + (byte[@bitmap + row] & (127 >> row)) << (row + 1)
        if BASEPIN < 32
            outa[BASEPIN..BASEPIN+7] := outmask
            dira[BASEPIN..BASEPIN+7] := dirmask
        else
            outb[BASEPIN..BASEPIN+7] := outmask
            dirb[BASEPIN..BASEPIN+7] := dirmask
        waitcnt(clkfreq /500 + cnt())
        dira[BASEPIN..BASEPIN+7] := 0


DAT

'Padding spaces needed at beginning and end for side-scrolling
demo_string
byte " LIFE   ",0

charset

' space
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
' !
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00000
    byte %00100
' "
    byte %01010
    byte %01010
    byte %01010
    byte %00000
    byte %00000
    byte %00000
    byte %00000
' #
    byte %01010
    byte %01010
    byte %11111
    byte %01010
    byte %11111
    byte %01010
    byte %01010
' $
    byte %01010
    byte %01111
    byte %11010
    byte %01110
    byte %01011
    byte %11110
    byte %01010
' byte %
    byte %11001
    byte %11001
    byte %00010
    byte %00100
    byte %01000
    byte %10011
    byte %10011
' &
    byte %01100
    byte %10010
    byte %10100
    byte %01000
    byte %10101
    byte %10010
    byte %01101
' '
    byte %00100
    byte %00100
    byte %01000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
' (
    byte %00010
    byte %00100
    byte %01000
    byte %01000
    byte %01000
    byte %00100
    byte %00010
' )
    byte %01000
    byte %00100
    byte %00010
    byte %00010
    byte %00010
    byte %00100
    byte %01000
' *
    byte %00100
    byte %10101
    byte %01110
    byte %11111
    byte %01110
    byte %10101
    byte %00100
' +
    byte %00000
    byte %00100
    byte %00100
    byte %11111
    byte %00100
    byte %00100
    byte %00000
' ,
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00110
    byte %01100
' -
    byte %00000
    byte %00000
    byte %00000
    byte %11111
    byte %00000
    byte %00000
    byte %00000
' .
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00110
    byte %00110
' /
    byte %00001
    byte %00001
    byte %00010
    byte %00100
    byte %01000
    byte %10000
    byte %10000
' 0
    byte %01110
    byte %10001
    byte %10011
    byte %10101
    byte %11001
    byte %10001
    byte %01110
' 1
    byte %00100
    byte %01100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %01110
' 2
    byte %01110
    byte %10001
    byte %00001
    byte %00010
    byte %00100
    byte %01000
    byte %11111
' 3
    byte %01110
    byte %10001
    byte %00001
    byte %00110
    byte %00001
    byte %10001
    byte %01110
' 4
    byte %00010
    byte %00110
    byte %01010
    byte %10010
    byte %11111
    byte %00010
    byte %00010
' 5
    byte %11111
    byte %10000
    byte %10000
    byte %11110
    byte %00001
    byte %00001
    byte %11110
' 6
    byte %00111
    byte %01000
    byte %10000
    byte %11110
    byte %10001
    byte %10001
    byte %01110
' 7
    byte %11111
    byte %10001
    byte %00001
    byte %00010
    byte %00100
    byte %00100
    byte %00100
' 8
    byte %01110
    byte %10001
    byte %10001
    byte %01110
    byte %10001
    byte %10001
    byte %01110
' 9
    byte %01110
    byte %10001
    byte %10001
    byte %01111
    byte %00001
    byte %00010
    byte %01100
' :
    byte %00000
    byte %00000
    byte %00110
    byte %00110
    byte %00000
    byte %00110
    byte %00110
' '
    byte %00000
    byte %00000
    byte %00110
    byte %00110
    byte %00000
    byte %00110
    byte %01100
' <
    byte %00011
    byte %00100
    byte %01000
    byte %10000
    byte %01000
    byte %00100
    byte %00011
' =
    byte %00000
    byte %00000
    byte %11111
    byte %00000
    byte %11111
    byte %00000
    byte %00000
' >
    byte %11000
    byte %00100
    byte %00010
    byte %00001
    byte %00010
    byte %00100
    byte %11000
' ?
    byte %01110
    byte %10001
    byte %00001
    byte %00010
    byte %00100
    byte %00000
    byte %00100
' @
    byte %01110
    byte %10001
    byte %10001
    byte %10111
    byte %10110
    byte %10000
    byte %01111
' A
    byte %00100
    byte %01010
    byte %10001
    byte %10001
    byte %11111
    byte %10001
    byte %10001
' B
    byte %11110
    byte %10001
    byte %10001
    byte %11110
    byte %10001
    byte %10001
    byte %11110
' C
    byte %01110
    byte %10001
    byte %10000
    byte %10000
    byte %10000
    byte %10001
    byte %01110
' D
    byte %11110
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %11110
' E
    byte %11111
    byte %10000
    byte %10000
    byte %11110
    byte %10000
    byte %10000
    byte %11111
' F
    byte %11111
    byte %10000
    byte %10000
    byte %11110
    byte %10000
    byte %10000
    byte %10000
' G
    byte %01110
    byte %10001
    byte %10000
    byte %10111
    byte %10001
    byte %10001
    byte %01111
' H
    byte %10001
    byte %10001
    byte %10001
    byte %11111
    byte %10001
    byte %10001
    byte %10001
' I
    byte %01110
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %01110
' J
    byte %00001
    byte %00001
    byte %00001
    byte %00001
    byte %10001
    byte %10001
    byte %01110
' K
    byte %10001
    byte %10010
    byte %10100
    byte %11000
    byte %10100
    byte %10010
    byte %10001
' L
    byte %10000
    byte %10000
    byte %10000
    byte %10000
    byte %10000
    byte %10000
    byte %11111
' M
    byte %10001
    byte %11011
    byte %10101
    byte %10001
    byte %10001
    byte %10001
    byte %10001
' N
    byte %10001
    byte %10001
    byte %11001
    byte %10101
    byte %10011
    byte %10001
    byte %10001
' O
    byte %01110
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %01110
' P
    byte %11110
    byte %10001
    byte %10001
    byte %11110
    byte %10000
    byte %10000
    byte %10000
' Q
    byte %01110
    byte %10001
    byte %10001
    byte %10001
    byte %10101
    byte %01110
    byte %00011
' R
    byte %11110
    byte %10001
    byte %10001
    byte %11110
    byte %10010
    byte %10001
    byte %10001
' S
    byte %01110
    byte %10001
    byte %10000
    byte %01110
    byte %00001
    byte %10001
    byte %01110
' T
    byte %11111
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
' U
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %01110
' V
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %01010
    byte %01010
    byte %00100
' W
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %10101
    byte %10101
    byte %11011
' X
    byte %10001
    byte %10001
    byte %01010
    byte %00100
    byte %01010
    byte %10001
    byte %10001
' Y
    byte %10001
    byte %10001
    byte %01010
    byte %00100
    byte %00100
    byte %00100
    byte %00100
' Z
    byte %11111
    byte %00001
    byte %00010
    byte %00100
    byte %01000
    byte %10000
    byte %11111
' [
    byte %01110
    byte %01000
    byte %01000
    byte %01000
    byte %01000
    byte %01000
    byte %01110
' \
    byte %10000
    byte %10000
    byte %01000
    byte %00100
    byte %00010
    byte %00001
    byte %00001
' ]
    byte %01110
    byte %00010
    byte %00010
    byte %00010
    byte %00010
    byte %00010
    byte %01110
' ^
    byte %00100
    byte %01010
    byte %10001
    byte %00000
    byte %00000
    byte %00000
    byte %00000
' _
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %11111
' `
    byte %00100
    byte %00010
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
' a
    byte %00000
    byte %00000
    byte %01110
    byte %00001
    byte %01011
    byte %10001
    byte %01111
' b
    byte %10000
    byte %10000
    byte %10000
    byte %11110
    byte %10001
    byte %10001
    byte %11110
' c
    byte %00000
    byte %00000
    byte %01111
    byte %10000
    byte %10000
    byte %10000
    byte %01111
' d
    byte %00001
    byte %00001
    byte %00001
    byte %01111
    byte %10001
    byte %10001
    byte %01111
' e
    byte %00000
    byte %00000
    byte %01110
    byte %10001
    byte %11111
    byte %10000
    byte %01111
' f
    byte %00110
    byte %01001
    byte %01000
    byte %11100
    byte %01000
    byte %01000
    byte %01000
' g
    byte %01111
    byte %10001
    byte %10001
    byte %01111
    byte %00001
    byte %10001
    byte %01110
' h
    byte %10000
    byte %10000
    byte %10000
    byte %10110
    byte %11001
    byte %10001
    byte %10001
' i
    byte %00000
    byte %00100
    byte %00000
    byte %00100
    byte %00100
    byte %00100
    byte %00100
' j
    byte %00010
    byte %00000
    byte %00010
    byte %00010
    byte %10010
    byte %10010
    byte %01100
' k
    byte %10000
    byte %10000
    byte %10001
    byte %10010
    byte %11100
    byte %10010
    byte %10001
' l
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
    byte %00100
' m
    byte %00000
    byte %00000
    byte %11010
    byte %10101
    byte %10101
    byte %10101
    byte %10001
' n
    byte %00000
    byte %00000
    byte %10110
    byte %11001
    byte %10001
    byte %10001
    byte %10001
' o
    byte %00000
    byte %00000
    byte %01110
    byte %10001
    byte %10001
    byte %10001
    byte %01110
' p
    byte %00000
    byte %10110
    byte %11001
    byte %10001
    byte %10001
    byte %11110
    byte %10000
' q
    byte %00000
    byte %01101
    byte %10011
    byte %10001
    byte %10001
    byte %01111
    byte %00001
' r
    byte %00000
    byte %00000
    byte %10110
    byte %11001
    byte %10000
    byte %10000
    byte %10000
' s
    byte %00000
    byte %00000
    byte %01111
    byte %10000
    byte %01110
    byte %00001
    byte %11110
' t
    byte %00100
    byte %00100
    byte %01111
    byte %00100
    byte %00100
    byte %00101
    byte %00010
' u
    byte %00000
    byte %00000
    byte %10001
    byte %10001
    byte %10001
    byte %10001
    byte %01110
' v
    byte %00000
    byte %00000
    byte %10001
    byte %10001
    byte %01010
    byte %01010
    byte %00100
' w
    byte %00000
    byte %00000
    byte %10001
    byte %10001
    byte %10101
    byte %10101
    byte %01010
' x
    byte %00000
    byte %00000
    byte %10001
    byte %01010
    byte %00100
    byte %01010
    byte %10001
' y
    byte %00000
    byte %10001
    byte %10001
    byte %01111
    byte %00001
    byte %10001
    byte %01110
' z
    byte %00000
    byte %00000
    byte %11111
    byte %00010
    byte %00100
    byte %01000
    byte %11111
' {
    byte %00010
    byte %00100
    byte %00100
    byte %01000
    byte %00100
    byte %00100
    byte %00010
' |
    byte %00100
    byte %00100
    byte %00100
    byte %00000
    byte %00100
    byte %00100
    byte %00100
' }
    byte %01000
    byte %00100
    byte %00100
    byte %00010
    byte %00100
    byte %00100
    byte %01000
' ~
    byte %01010
    byte %10100
    byte %00000
    byte %00000
    byte %00000
    byte %00000
    byte %00000
' blot
    byte %11111
    byte %11111
    byte %11111
    byte %11111
    byte %11111
    byte %11111
    byte %11111
'






