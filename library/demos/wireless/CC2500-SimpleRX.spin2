{
    --------------------------------------------
    Filename: CC2500-SimpleRX.spin2
    Author: Jesse Burt
    Description: Simple receive demo of the cc2500 driver (P2 version)
    Copyright (c) 2022
    Started Nov 29, 2020
    Updated Nov 13, 2022
    See end of file for terms of use.
    --------------------------------------------
}
CON

    _clkfreq        = cfg._clkfreq_def
    _xtlfreq        = cfg._xtlfreq

' -- User-modifiable constants
    LED             = cfg.LED1
    SER_BAUD        = 2_000_000

    { SPI configuration }
    CS_PIN          = 3
    SCK_PIN         = 2
    MOSI_PIN        = 0
    MISO_PIN        = 1
    SPI_FREQ        = 5_000_000

    NODE_ADDRESS    = $01                       ' this node's address (1..254)
' --

    POS_TONODE      = 0
    POS_PAYLD       = 1
    MAX_PAYLD       = 255

OBJ

    ser     : "com.serial.terminal.ansi"
    cfg     : "boardcfg.p2eval"
    str     : "string"
    cc2500  : "wireless.transceiver.cc2500"

VAR

    byte _pkt_tmp[MAX_PAYLD]
    byte _recv[MAX_PAYLD]
    byte _pktlen

PUB main() | tmp, rxbytes

    setup()

    cc2500.preset_robust1()                     ' use preset settings
    cc2500.carrier_freq(2_401_000)              ' set carrier frequency
    cc2500.node_addr(NODE_ADDRESS)              ' this node's address

    ser.clear()
    ser.pos_xy(0, 0)
    ser.printf(@"Receive mode - %dkHz\n\r", cc2500.carrier_freq())

    repeat
        bytefill(@_pkt_tmp, $00, MAX_PAYLD)     ' clear out buffers 
        bytefill(@_recv, $00, MAX_PAYLD)

        cc2500.rx_mode()                        ' set to receive mode
        repeat until cc2500.fifo_rx_bytes() >= 1' wait for first recv'd bytes
        cc2500.rx_payld(1, @rxbytes)            ' get length of recv'd payload
                                                ' (1st byte of packet in
                                                '   default variable-length
                                                '   packet mode)
        repeat until cc2500.fifo_rx_bytes() >= rxbytes
        cc2500.rx_payld(rxbytes, @_pkt_tmp)     ' now, read that many bytes
        cc2500.flush_rx()                       ' flush receive buffer

        { show the packet received as a simple hex dump }
        ser.pos_xy(0, 3)
        ser.hexdump(@_pkt_tmp, 0, 2, strsize(@_pkt_tmp), 16 <# strsize(@_pkt_tmp))

        ser.strln(@"    |  |")
        ser.strln(@"    |  *- start of payload/data")
        ser.strln(@"    *---- address packet was sent to")

PUB setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(@"Serial terminal started")

    if cc2500.startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SPI_FREQ)
        ser.strln(@"CC2500 driver started")
    else
        ser.strln(@"CC2500 driver failed to start - halting")
        repeat

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

