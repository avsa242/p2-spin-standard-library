{{
spectrum_analyzer.spin2

Things to do:

apply window mu and sigma/fs - apply mu^2 log to the log convert in first case,
with the window (ie an extra scaling multiply as the window is applied depending on which mode)

}}

CON
    XTAL_FREQ = 20_000_000
    VCO_divide = 2   ' 4 bit field, represents 2/4/6/8/10/....
    PLL_divide = 4   ' 6 bit field, offset 1
    PLL_mult = 64   ' 10 bit field, offset 1

    OSCMODE = %1_000000_0000000000_0000_01_00 | ((PLL_divide-1) << 18) | ((PLL_mult-1) << 8) | ((VCO_divide/2-1) << 4)
    FREQ = XTAL_FREQ / PLL_divide * PLL_mult / VCO_divide  ' 160_000_000
    BAUD = 2_000_000'2 * 115_200

    DITHER_MODE  = %0000_0000_000_10100_00000000_01_00010_0   ' for 'scope output

    DAC_TESTPIN = 41
    ADC_PIN = 40 ' 40
    ADC_CYCLES = 480 '625 ' 3333  ' about 48kSPS
    ADC_READING_REPEAT_SHIFT = 3

    DAC_PIN = 44
    DISPLAY_CYCLES = 1600

    SCR_COL_A = 16
    SCR_COL_X = 24
    SCR_COL_B = 44
    SCR_COL_C = 58

    N = 11
    NN = 1 << N

    FIXINT = 5
    FIXFRACT = 32-FIXINT   ' assumed to be at least 16
    maxfix = 1<<(FIXINT-1)
    minfix = -maxfix

    MAX_PEAKS = 12
    PEAK_BIG_DIFF   = $20000000
    PEAK_SMALL_DIFF = $04000000

    'WINDOW_SPEC = fft#RECT_WINDOW
    'WINDOW_SPEC = fft#HANN_WINDOW
    'WINDOW_SPEC = fft#HAMMING_WINDOW
    'WINDOW_SPEC = fft#HFT95_WINDOW
    WINDOW_SPEC = fft#HFT116D_WINDOW
    'WINDOW_SPEC = fft#HFT144D_WINDOW

    MINHOLD_MODE = 0
    MAXHOLD_MODE = 0
    AVERAGE_N = 0  ' average upto 2^AVERAGE_N times

    ZOOM_MIN = $00000000
    ZOOM_MAX = $FFFFFFFF
    ZOOM_POW = 0

    X_LOG_SCALE = 0

    FFT_WITH_MAGSQR = fft#GO | fft#DO_FORWARDS | fft#DO_SCALED | fft#DO_MAG_SQR | fft#DO_WINDOW
    SLEEP = $FF


OBJ
    ser: "com.smartserial.spin2"
    siggen: "signal.synth.noise.spin2"
    acq: "signal.adc.smartpin.spin2"
    fft: "signal.fft.windowed.spin2"
    vga: "display.vga.1280x768x2.spin2"
    out: "signal.output.scopexy.spin2"
    font: "font.8x16.spin2"


VAR
    long  sampling_rate

    long  window_mu2
    long  window_sig2
    long  sample_freq

    ' params for acquire
    long  ACQ_N
    long  ACQ_FIXINT
    long  ACQ_buffer
    long  ACQ_pin
    long  ACQ_cycles
    long  ACQ_ready_flag
    long  ACQ_repeat

   ' params for output
    long  OUT_N
    long  OUT_buffer
    long  OUT_pin
    long  OUT_cycles
    long  OUT_ready_flag

    long  peaks_list [1 + 2 * MAX_PEAKS]

    long  scratch [2*NN + NN/2 + 2*(NN/2+1)]  ' hold NN complex fix8.24 values


PUB main | i, j, k, x, y, s, fbase, caddr, caddr2, horizontal, row, col
    clkset (OSCMODE, FREQ)
    pausems (10)
    ser.Startx (63, 62, 0, BAUD)
    ser.Str (string ("Hello"))
    ser.Char(13)
    ser.Char(10)

    font.reverse_font
    fbase := font.get_base

    vidram := vga.start
    vga_out := vga.outputter (N, @scratch, 8)
    blanker := vga.blank_address

    wrchar (0, 0, $2A)
    wrchar (79, 0, $2A)
    wrchar (0, 46, $2A)
    wrchar (79, 46, $2A)

    {repeat j from 8 to 71
        wrchar (j, 3, $2E)
        wrchar (j, 36, $2E)
    repeat k from 4 to 35
        wrchar (7, k, $2E)
        wrchar (72, k, $2E)
  }
    sampling_rate := (freq / ADC_CYCLES) >> ADC_READING_REPEAT_SHIFT
    horizontal := 11 - N - 4 - 1
    if horizontal < 0
        horizontal := sampling_rate >> -horizontal
    else
        horizontal := sampling_rate << horizontal

    row := 0
    wrstr (wrdec (SCR_COL_A, row, sampling_rate), row, string (" samples/sec"))
    wrstr (wrdec (SCR_COL_B, row, 10), row, string (" dB/division"))
    row += 1
    wrstr (wrdec (SCR_COL_B, row, horizontal), row, string (" Hz/division"))
    row += 1
    wrstr (wrstr (SCR_COL_A, 2, fft.window_name (WINDOW_SPEC)), 2, string (" window"))
    wrstr (wrdec (SCR_COL_B, 2, NN), 2, string (" point FFT"))

    row := 36
    wrstr (6, row, string("0 Hz"))
    wrstr (wrunit (36, row, freq_for_col(NN>>2)), row, string ("Hz"))
    wrstr (wrunit (68, row, freq_for_col(NN>>1)), row, string ("Hz"))

    row := 38
    wrstr (wrdec (SCR_COL_X, row, 1 << AVERAGE_N), row, string ("-fold spectral averaging"))
    row += 1
    wrstr (wrdec (SCR_COL_X, row, 1 << ADC_READING_REPEAT_SHIFT), row, string ("-fold input averaging"))
    row += 1
    wrstr (wrstr (SCR_COL_X, row, fft.module_name), row, string (" FFT module"))
    row += 1
    wrstr (wrstr (SCR_COL_X, row, acq.module_name), row, string (" Acquisition module"))
    row += 2
    wrstr (wrdec (wrstr (wrdec (wrstr (SCR_COL_X, row, string("Fixpoint ")), row, FIXINT), 38, string(".")), row, FIXFRACT), row, string (" arith"))
    row += 1
    wrstr (wrdec (wrstr (wrdec (SCR_COL_X, row, minfix), row, string(".0 <= val < ")), row, maxfix), row, string(".0"))
    row += 1
    wrstr (wrdec (wrstr (SCR_COL_X, row, string ("Clock ")), row, freq/1_000_000), row, string (" MHz"))


    repeat k from 1 to 15
        wrchar(3, 3 + 2*k, $2D)
        wrdec (4, 3 + 2*k, 10*k)


    siggen.start (DAC_TESTPIN)

    ACQ_N      := N
    ACQ_FIXINT := FIXINT
    ACQ_buffer := @scratch
    ACQ_pin    := ADC_PIN
    ACQ_cycles := ADC_CYCLES
    ACQ_ready_flag := 0
    ACQ_repeat := ADC_READING_REPEAT_SHIFT   ' this is used in decod
    acquire_start := @ACQ_ready_flag

    acq.start (@ACQ_N)
    pausems(2)

    OUT_N      := N
    OUT_buffer := @scratch
    OUT_pin    := DAC_PIN
    OUT_cycles := DISPLAY_CYCLES
    OUT_ready_flag := 0
    output_start := @OUT_ready_flag

    out.start (@OUT_N)
    pausems(2)


    byte[@FFT_operation][0]  := 0
    byte[@FFT_operation][1]  := FIXINT  '    fixint
    byte[@FFT_operation][2]  := FIXINT  '    input fixint
    byte[@FFT_operation][3]  := fft#INP_SHARED | 8   ' input flags
    byte[@FFT_N][0]     := N
    byte[@FFT_N][1]     := FIXINT               ' mag-square fixint
    byte[@FFT_N][2]     := WINDOW_SPEC ' window_id
    FFT_input_buffer  := @scratch
    FFT_work_buffer   := @scratch
    FFT_window_buffer := @scratch + (8 << N)
    peak_table := @peaks_list
    fft_start := @FFT_operation

    fft.start (@FFT_operation)
    pausems(2)

    lutcode := @average
    window_params := @window_mu2
    window_mu2 := 0
    window_sig2 := 0

    log_mode := X_LOG_SCALE
    cognew (@entry, @scratch)
    repeat
        pausems(200)
        ser.Str (string ("mu^2="))
        ser.Hex (window_mu2, 8)
        ser.Char(32)
        ser.Dec ((((window_mu2+8000) >> 14) * 100000) >> (18-FIXINT))
        ser.Char(32)
        ser.Str (string ("sigma^2="))
        ser.Dec ((((window_sig2+16000) >> 15) * 100000) >> (17-FIXINT))
        ser.Char(32)
        ser.Str (string ("fs="))
        ser.Dec (sample_freq)
        ser.Str (string ("Hz"))
        ser.Char(32)
        ser.Char(32)

        ser.Dec (FFT_timing)
        ser.Str (string (" clks"))
        ser.Char(13)
        ser.Char(10)

        repeat until vga.is_blanking

        row := 37
	repeat 10
            wrstr (0, row, string("                      "))
            row += 1
        row := 37
        i := 1
        j := peaks_list[0]
        if j > 9
            j := 9
        repeat j
            j := ((1000 * (peaks_list[i+1] >> 17) + 1024) >> 11) - 16000
            wrstr (wrunit(0, row, freq_for_col(peaks_list[i])), row, string("Hz "))
            k := abs(j)
            col := 11
            if k < 10000
                col += 1
                if k < 1000
                    col += 1
            if j < 0
                wrchar (col, row, $2D)
            col += 1
            j := k // 100
            k := k / 100
            wrstr (wrdecn (wrstr (wrdec (col, row, k), row, string(".")), row, j, 2), row, string(" dBV"))
            row += 1
            i += 2


PUB  freq_for_col(col)
    col *= (sampling_rate >> 1)
    result := col >> (N-1)


PUB  wrchar (x, y, c) | s, caddr, fbase, j,k, l
    fbase := font.get_base
    j := 41 * (y * 16 + 1 +6)
    k := x >> 1
    s := 0
    caddr := 16 * (c-32)
    repeat s from 1 to 15
        l := long[vidram][j+k]
        if x & 1
            l &= $FFFF
            l |= word[fbase][caddr+s] << 16
        else
            l &= $FFFF0000
            l |= word[fbase][caddr+s]
        long[vidram][j+k] := l
        j += 41

PUB  wrstr (x, y, s)
    repeat until byte[s][0] == 0
        wrchar (x, y, byte[s][0])
        x += 1
        s += 1
    result := x

PUB  wrdec (x, y, v)
    if v < 0
        wrchar (x, y, $2D)
        result := wrdec (x+1, y, -v)
    else
        if v < 10
            wrchar (x, y, $30+v)
            result := x+1
        else
            result := wrdec (wrdec (x, y, v / 10), y, v // 10)

PUB  wrdecn (x, y, v, n)
    if n == 1
        wrchar (x, y, $30+v)
        result := x+1
    else
        result := wrdec (wrdecn (x, y, v / 10, n-1), y, v // 10)

PUB  wrdec3 (x, y, v)
    if v < 100
        wrchar (x, y, $30)
        if v < 10
            wrchar (x+1, y, $30)
            result := wrdec (x+2, y, v)
        else
            result := wrdec (x+1, y, v)
    else
        result := wrdec (x, y, v)

PUB  wrunit (x, y, v) | thou, units
    if v < 2000
        result := wrstr (wrdec (x, y, v), y, string(" "))
    else
        thou := v / 1000
        units := v // 1000
        if thou < 10
            x += 1
        result := wrstr (wrdec3 (wrstr (wrdec (x, y, thou), y, string(".")), y, units), y, string(" k"))

DAT
    ' params for FFT

FFT_operation long    0
FFT_N         long    N
FFT_input_buffer  long  0
FFT_work_buffer   long  0
FFT_window_buffer long	0
FFT_timing  long 0

                ORG     0

entry           mov     base, PTRA

                setq2	#$1FF      ' copy code to LUTram
		rdlong	#0, lutcode

		qdiv	##FREQ, ##ADC_CYCLES
		GETQX	fs

                decod   size, #N
                shl     size, #3
                mov     winptr, base
                add     winptr, size
                mov     accumptr, winptr
                shr     size, #2
                add     accumptr, size
                shr     size, #1

.loop         ' call   #testpatt
                call    #acquire        ' read ADC samples
              ' mov     offset, ##$8000
              ' call   #output
                call    #do_fft         ' perform forward FFT
                mov     half, #1

		mov	t, #0
		mov	iter_action, ##avg
		cmp	t, #MINHOLD_MODE  wz
	if_nz	mov	iter_action, ##minhold
		cmp	t, #MAXHOLD_MODE  wz
	if_nz	mov	iter_action, ##maxhold
                call    #average        ' sum into accum

                call    #logconvert     ' replace with log(x)
		call	#peak_find
              ' call    #add_graticule
              ' mov     offset, #0
              ' call    #output         ' show on DAC
                call    #vga_output         ' show on DAC
                mov     half, #0
                jmp     #.loop

avgcount        long    0
fs		long	0

lutcode         long    @lutstart

{ white noise }

testpatt        mov     iter_action, #zeroit
                call    #iterate
                ret
zeroit          getrnd  x
                sar     x, #6
                mov     y, #0
                ret


{ graticule for 'scope }

add_graticule
                mov     a, #0
                mov     iter_action, #grat
                call    #iterate
add_graticule_ret ret
grat            incmod  a, #$FF
                cmp     a, #4  wz
        if_z    mov     x, ##$FFFFFFFF '  0dB
                cmp     a, #6  wz
        if_z    mov     x, ##$D8231000 '  -20dB (scaled 1.5)
                cmp     a, #2  wz
        if_z    mov     x, ##$B0463000 '  -40dB
                cmp     a, #8  wz
        if_z    mov     x, ##$88695000 '  -60dB
                cmp     a, #0  wz
        if_z    mov     x, ##$608C7000  ' -80dB
grat_ret        ret


{ generic scan of array }

iterate         cmp     iter_action, #0  wz
        if_z    jmp     iterate_ret

                mov     count, size
                cmp     half, #0  wz
        if_nz   shr     count, #1
        if_nz   add     count, #1
                mov     PTRA, base
.loop
		'rdlong  x, PTRA++
                'rdlong  y, PTRA--
		setq	#2-1
		rdlong  x, PTRA

		call    iter_action

		setq    #2-1
		wrlong  x, PTRA
		add	PTRA, #8
                'wrlong  x, PTRA++
                'wrlong  y, PTRA++
                djnz    count, #.loop
                mov     PTRA, base
iterate_ret     ret

iter_action     long    0
half            long    0



{ multiply fix8.24 }
mult            QMUL    a, b
                testb   a, #31  wc
                testb   b, #31  wz
                GETQY   val
                GETQX   lo
        if_c    sub     val, b
        if_z    sub     val, a
                shl     val, #FIXINT
                shr     lo, #FIXFRACT
                or      val, lo
mult_ret        ret




acquire_start   long    0

acquire         wrbyte  #1, acquire_start
                'waitx   ##100000000
.wait           rdbyte  t, acquire_start
                cmp     t, #0  wz
        if_nz   jmp     #.wait
		wrbyte  #SLEEP, acquire_start
acquire_ret     ret


{ logarithm }

avg_divisor     long    0

logconvert      mov     t, #0
	        cmp	t, #MINHOLD_MODE + MAXHOLD_MODE  wz
	if_z	mov     t, avgcount
        if_z    shl     t, #32-AVERAGE_N    ' varies upto FF000000
	if_nz	mov     t, #0
                QLOG    t
                GETQX   avg_divisor  ' varies C0000000..FFF.....
                sar     avg_divisor, #1

                mov     PTRB, accumptr
                mov     iter_action, #logify
                jmp     #iterate     ' tail call


logify          rdlong  x, PTRB++
                rdlong  y, PTRB++
		or y, #1
                cmp     x, #0  wz
        if_z    cmp     y, #0  wz
        if_z    mov y, #1 ' jmp     #logify_ret
                mov     t, #0
                testb   x, #31  wc
        if_c    jmp     #.skip
.loop           shl     y, #1  wc   ' scale till top bit set
                rcl     x, #1
                testb   x, #31  wc
        if_nc   sub     t, #1
        if_nc   jmp     #.loop
.skip
                QLOG    x           ' take log
                GETQX   x
                shr     x, #1     ' need 0..64 range
                add     t, #32+(FIXINT-1)   ' compensate for fixpoint representation, -1 for why?
                shl     t, #26
                add     x, t
                sub     x, avg_divisor  ' correct for avgcount
	sub	x, ##$00100000   ' correction as its overflowing on calib waveform?<

 		fge	x, ##$2B6587B4
		neg	t, x
		shr	t, #16
		mul	t, ##$3441
		sub	x, t

                fge     x, ##ZOOM_MIN
                fle     x, ##ZOOM_MAX
                shl     x, #ZOOM_POW

logify_ret	ret


fft_start       long    0

do_fft          wrbyte  #FFT_WITH_MAGSQR, fft_start

.wait           rdbyte  t, fft_start
                cmp     t, #0  wz
        if_nz   jmp     #.wait
		wrbyte  #SLEEP, fft_start
                ret



output_start   long    0

output          wrbyte  #1, output_start

.wait           rdbyte  t, output_start
                cmp     t, #0  wz
        if_nz   jmp     #.wait
		wrbyte	#SLEEP, output_start
                ret



vga_clear       mov     PTRB, vidram
		add	PTRB, ## 64 * 4*41 + 4*4
		mov	count, ##513
.rowloop
		setq2	#32-1
		wrlong  zero-lutstart, PTRB ' fast write 32 longs from a zero area in LUT
		add	PTRB, #32*4

		rdlong	t, PTRB
		andn	t, #1
		wrlong	t, PTRB

		add	PTRB, #4 * (41-32)
		djnz	count, #.rowloop
		ret


vga_output	rdlong	t, blanker  wz   ' wait for blanking time
	if_z	jmp	#vga_output

		call	#vga_clear
		mov	ind, #0
		mov	prev_y, #0

		mov	iter_action, #vgaplot
	        cmp	log_mode, #0  wz
	if_z	mov	xscale, #linear_xscale
	if_nz	mov	xscale, #log_xscale
		jmp	#iterate

log_mode	long	1
ind		long	0
xscale		long	0


linear_xscale   mov	val, ind
		shl	val, #11
		shr	val, #N
xscale_comm
		mov	longoff, val
		shr	longoff, #5
		add	longoff, #4
		decod	bitpatt, val
		ret

log_xscale	mov	val, ind
		shl	val, #8
		QLOG	val
		GETQX	val
		sub	val, ##$40000000
		shr	val, #27-10+4
		jmp	#xscale_comm

vgaplot
                call	xscale

		mov	val, x
	        shr     val, #32-9   ' scale to 512 range
		mov	miny, ##512 + 64
		sub	miny, val       ' invert sense and offset for screen pos

		mov	t, miny
                mov	maxy, miny

		cmp	prev_y, #0  wz
	if_z	mov	prev_y, t
		fle     miny, prev_y
		fge	maxy, prev_y
		mov	prev_y, t

		mov	rowcnt, maxy
		sub	rowcnt, miny
                add     rowcnt, #1

		mul	miny, #41
		add	miny, longoff
		shl	miny, #2
		add	miny, vidram
.loop
		rdlong  a, miny
		or	a, bitpatt
		wrlong	a, miny
		add	miny, #41*4
		djnz    rowcnt, #.loop

		add	ind, #1
		ret

rowcnt		long	0
miny		long	0
maxy		long	0
prev_y		long	0
bitpatt		long	0
longoff		long	0


rootph          long    0
mu_h		long	0
mu_l		long	0
sig_h		long	0
sig_l		long	0
win_mu2		long	0
win_sig2	long	0

ONE_VALUE       long    1 << FIXFRACT
winptr          long    0
accumptr	long	0
window_params	long	0
vidram		long	0
vga_out		long	0
blanker		long	0

size            long    NN

peak_table	long	0   ' needs setting up
peak_i		res	1
peak_curr	res	1
peak_prev	res	1
peak_state	res	1
peak_diff	res	1
peak_count	res	1

count           res     1
time            res     1
val             res     1
t               res     1
tt              res     1
x               res     1   ' x, y contiguous
y               res     1
x2              res     1
y2              res     1
xx              res     1
yy              res     1
xx2             res     1
yy2             res     1
t1              res     1
t2              res     1
t3              res     1
t4              res     1
lo1             res     1
lo2             res     1
lo3             res     1
lo4             res     1
hi              res     1
lo              res     1
wx              res     1
wy              res     1
base            res     1
bit             res     1
powx            res     1
powy            res     1
set_size        res     1
half_size       res     1
set             res     1
phase_inc       res     1

a0              res	1
a1		res	1
a2              res	1
a3		res	1
a4              res	1
a5		res	1
a6              res	1
a7		res	1
b0              res	1
b1		res	1
b2              res	1
b3		res	1
a		res	1
b		res	1

		FIT	$1EC

		ORG	$1EC  ' parameters to new vga outputter
output_N	long	0
output_array	long	0
output_stride	long	0
output_vidptr	long	0

                FIT     $1F0

{{ LUT code }}
                ORG     $200
lutstart
average         shl	avgcount, #1
		zerox   avgcount, #AVERAGE_N
		shr	avgcount, #1
	        add     avgcount, #1
		mov     PTRB, accumptr
                jmp     #iterate     ' tail call

avg		setq	#2-1
		rdlong	hi, PTRB   ' hi, lo contiguous

                cmp     avgcount, #1  wz
        if_z    mov     hi, #0
        if_z    mov     lo, #0

                shr     y, #AVERAGE_N
                mov     t, x
                shl     t, #32-AVERAGE_N
                or      y, t
                shr     x, #AVERAGE_N

                add     lo, y  wc
                addx    hi, x

		setq	#2-1
		wrlong	hi, PTRB
		add	PTRB, #8
                ret


maxhold		setq    #2-1
		rdlong	hi, PTRB

                cmp     avgcount, #1  wz
        if_z    mov     hi, #0
        if_z    mov     lo, #0

		cmp	hi, x  wcz
		fge	hi, x
	if_z	fge	lo, y
	if_b	mov	lo, y

		setq	#2-1
		wrlong	hi, PTRB
		add	PTRB, #8
		ret


minhold		setq    #2-1
		rdlong	hi, PTRB

                cmp     avgcount, #1  wz
        if_z    neg     hi, #1
        if_z    neg     lo, #1

		cmp	hi, x  wcz
		fle	hi, x
	if_z	fle	lo, y
	if_a	mov	lo, y

		setq	#2-1
		wrlong	hi, PTRB
		add	PTRB, #8
		ret


peak_find	call	#peak_find_init
		mov	iter_action, ##peak_find_step
		call	#iterate
		wrlong	#0, PTRB[2]
		wrlong	#0, PTRB[3]
		mov	PTRB, peak_table
		wrlong	peak_count, PTRB
		ret

peak_find_init	mov	PTRB, peak_table
		sub	PTRB, #4
		mov	peak_count, #0
		mov	peak_i, #0
		mov	peak_state, ##peakfind_idle
		mov	PTRA, base
		rdlong	peak_prev, PTRA
		ret

peak_find_step	mov	peak_curr, x  ' x is log scale, y is irrelevant
		mov	peak_diff, peak_curr
		sub	peak_diff, peak_prev
		jmp	peak_state
peakfind_idle
		cmps	peak_diff, ##PEAK_BIG_DIFF  wcz
	if_b	jmp	#peak_find_ret
		cmp	peak_count, #MAX_PEAKS  wcz
	if_ae	mov	peak_state, ##peakfind_full
	if_ae	jmp	peak_state
		add	peak_count, #1
		add	PTRB, #8
		mov	peak_state, ##peakfind_start
peakfind_newmax
		wrlong	peak_i, PTRB[0]
		wrlong	peak_curr, PTRB[1]
		jmp	#peak_find_ret

peakfind_start
		cmps	peak_diff, ##PEAK_SMALL_DIFF  wcz
	if_b	mov	peak_state, ##peakfind_peak
	if_b	jmp	peak_state
		jmp	#peakfind_newmax

peakfind_peak	neg	peak_diff
		cmps	peak_diff, ##PEAK_SMALL_DIFF  wcz
	if_ae	mov	peak_state, ##peakfind_idle
		rdlong	t, PTRB[1]
		cmp	peak_curr, t  wcz
	if_a	jmp	#peakfind_newmax
peak_find_ret
		mov	peak_prev, peak_curr
		add	peak_i, #1
		ret

peakfind_full   ret


zero		long	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

                FIT     $400
