{
    --------------------------------------------
    Filename:
    Author:
    Description:
    Copyright (c) 20__
    Started Month Day, Year
    Updated Month Day, Year
    See end of file for terms of use.
    --------------------------------------------
}

CON

    XTAL        = cfg#XTAL
    XDIV        = cfg#XDIV
    XMUL        = cfg#XMUL
    XDIVP       = cfg#XDIVP
    XOSC        = cfg#XOSC
    XSEL        = cfg#XSEL
    XPPPP       = cfg#XPPPP
    CLOCKFREQ   = cfg#CLOCKFREQ
    SETFREQ     = cfg#SETFREQ
    ENAFREQ     = cfg#ENAFREQ

    I2C_SCL     = 27
    I2C_SDA     = 28
    I2C_HZ      = 100_000

    LED         = cfg#LED1
    SER_BAUD    = 2_000_000

    ESC         = 27

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.smartserial"
    i2c     : "com.i2c.spin2"
    time    : "time"
    int     : "string.integer"

VAR

    long _keyinput_stack[50]
    byte _fmt

PUB Main | slave_addr, flag, x, y, offsetx, offsety, start, end

    Setup
    Clear
    Position(0, 0)
    ser.Str (@white)
    ser.Str (string("I2C Scanner"))
    offsetx := 3
    offsety := 3
    start := $02
    end := $FF
    _fmt := 7                       '7 or 8 bit format Slave addresses (affects display only)
    ser.Str (string(" ("))
    ser.Dec (_fmt)
    ser.Str (string("-bit format)"))
    ser.Str(@grey)
    repeat
        Position(14, 0)
        ser.Dec(_fmt)
        repeat slave_addr from start to end step 2
            flag := i2c.present (slave_addr)
            x := ((slave_addr & $F) + (slave_addr & $F)) + offsetx
            y := (slave_addr >> 4) + offsety
            PrintSA (x, y, slave_addr, flag)
        time.MSleep (100)

PUB PrintSA(x, y, slave_addr, flag)            

    case _fmt
        7:
            case flag
                TRUE:
                    Position (x, y)
                    ser.Str(@green)
                    ser.Char ("/")
                    ser.Hex (slave_addr >> 1, 2)
                    ser.Char ("/")
                    ser.Str(@grey)

                FALSE:
                    Position (x, y)
                    ser.Char (" ")
                    ser.Hex (slave_addr >> 1, 2)
                    ser.Char (" ")

        8:
            case flag
                TRUE:
                    Position (x, y)
                    ser.Str(@green)
                    ser.Char ("/" )
                    ser.Hex (slave_addr, 2)
                    ser.Char ("/")
                    ser.Str(@grey)

                FALSE:
                    Position (x, y)
                    ser.Char (" ")
                    ser.Hex (slave_addr, 2)
                    ser.Char (" ")
        OTHER:

PUB CSI

    ser.Char (27)
    ser.Char ("[")

PUB Clear

    CSI
    ser.Char ("2")
    ser.Char ("J")

PUB Home

    CSI
    ser.Char ("f")

PUB Position(x, y)
' Position cursor at column x, row y (from top-left).
    CSI
    ser.Dec (y)
    ser.Char (";")
    ser.Dec (x)
    ser.Char ("f")

PUB NL

    ser.Char (10)
    ser.Char (13)

PUB KeyInput | tmp

    repeat
        repeat while ser.RXCheck == -1
        tmp := ser.RX
        case tmp
            "7": _fmt := 7
            "8": _fmt := 8
            OTHER:

PUB Setup

    clkset(ENAFREQ, CLOCKFREQ, XSEL)
    ser.Startx (63, 62, 0, SER_BAUD)
    time.MSleep(5)
    Clear
    ser.Str(string("Serial terminal started"))
    NL
    i2c.Setup (I2C_SCL, I2C_SDA, I2C_HZ)
    ser.Str (string("I2C driver started"))
    NL
    cognew (KeyInput, @_keyinput_stack)

PUB Flash(led_pin, delay_ms)

    case led_pin
        0..31:
            dira[led_pin] := 1
            repeat
                !outa[led_pin]
                time.MSleep (delay_ms)

        32..63:
            led_pin &= 31
            dirb[led_pin] := 1
            repeat
                !outb[led_pin]
                time.MSleep (delay_ms)
DAT

    white       byte ESC, "[", "1", ";", "3", "7", "m", 0
    grey        byte ESC, "[", "0", ";", "3", "7", "m", 0
    green       byte ESC, "[", "0", ";", "3", "2", "m", 0

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
