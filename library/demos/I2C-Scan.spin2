{
    --------------------------------------------
    Filename: I2C-Scanner.spin2
    Author: Jesse Burt
    Description: Simple utility to scan for active slaves on an
        I2C bus
    Copyright (c) 2021
    Started Jun 17, 2019
    Updated May 24, 2021
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _xtlfreq   = cfg._xtlfreq
    _clkfreq   = cfg._clkfreq_def

' -- User-modifiable constants
    I2C_SCL     = 39
    I2C_SDA     = 38
    I2C_HZ      = 100_000

    LED         = cfg.LED1
    SER_RX      = cfg.SER_RX
    SER_TX      = cfg.SER_TX
    SER_BAUD    = 2_000_000
' --

    ESC         = 27

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    i2c     : "com.i2c"

VAR

    long _key_cog, _keyinput_stack[50]
    byte _fmt

PUB Main() | slave_addr, flag, x, y, offsetx, offsety, start, end

    setup()
    ser.clear()
    ser.bold()
    ser.underline()
    ser.printf ("I2C Scanner")
    ser.underline(FALSE)
    offsetx := 3
    offsety := 3
    start := $02
    end := $FF
    _fmt := 7                       '7 or 8 bit format Slave addresses (affects display only)
    ser.italic()
    ser.printf (" (%d-bit format)", _fmt)
    ser.reset()
    ser.hidecursor()
    repeat
        ser.position(13, 0)
        ser.dec(_fmt)
        repeat slave_addr from start to end step 2
            flag := i2c.present (slave_addr)
            x := ((slave_addr & $F) + (slave_addr & $F)) + offsetx
            y := (slave_addr >> 4) + offsety
            printsa (x, y, slave_addr, flag)
        waitms(100)
    until _key_cog == 0

    stop()
    flashled(LED, 100)

PUB PrintSA(x, y, slave_addr, flag)            

    case _fmt
        7:
            case flag
                TRUE:
                    ser.position (x, y)
                    ser.color (ser.BLACK, ser#GREEN)
                    ser.hex (slave_addr >> 1, 2)
                    ser.reset()

                FALSE:
                    ser.position (x, y)
                    ser.hex (slave_addr >> 1, 2)

        8:
            case flag
                TRUE:
                    ser.position (x, y)
                    ser.color (ser.BLACK, ser#GREEN)
                    ser.hex (slave_addr, 2)
                    ser.reset()

                FALSE:
                    ser.position (x, y)
                    ser.hex (slave_addr, 2)
        OTHER:

PUB KeyInput() | tmp
' Wait for keypress from user
    repeat
        repeat
            tmp := ser.rxcheck()
        until tmp <> -1

        case tmp
            "7": _fmt := 7
            "8": _fmt := 8
            "q", "Q":
                _key_cog := 0
                cogstop(cogid())
            OTHER:

PUB Setup()

    ser.startrxtx (SER_RX, SER_TX, 0, SER_BAUD)
    waitms(5)
    ser.reset()
    ser.clear()
    ser.printf("Serial terminal started\n")
    i2c.init(I2C_SCL, I2C_SDA, I2C_HZ)
    ser.printf("I2C driver started\n")
    _key_cog := cogspin(16, KeyInput(), @_keyinput_stack)

PUB Stop()

    ser.reset()
    ser.showcursor()
    ser.clear()
    ser.printf("Stopped\n")

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
