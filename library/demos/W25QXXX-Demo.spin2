{
    --------------------------------------------
    Filename: W25Qxxx-Test.spin2
    Author: Jesse Burt
    Description: Test app for the W25Qxxx driver
    Copyright (c) 2020
    Started Nov 09, 2019
    Updated Jun 14, 2020
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _xtlfreq    = cfg._xtlfreq
    _clkfreq    = 160_000_000

    CYCLES_USEC = _clkfreq / 1_000_000

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_RX      = cfg.SER_RX
    SER_TX      = cfg.SER_TX
    SER_BAUD    = 2_000_000

    CS          = 61
    SCK         = 60
    MOSI        = 59
    MISO        = 58
    SCK_FREQ    = 10_000_000
' --

OBJ

    ser         : "com.serial.terminal.ansi"
    cfg         : "core.con.boardcfg.p2eval"
    io          : "io"
    time        : "time"
    flash       : "memory.flash.w25qxxx.spi"

VAR

    long _ser_cog, _flash_cog
    byte _page[256]

PUB Main() | uid[2], base, seg, offs, rd_tmp, i, tmp, s, e

    Setup()

    ser.printf("Dev ID: %x\n", flash.DeviceID())
    ser.printf("Mfr ID: %x\n", flash.ManufacturerID())
    ser.printf("JEDEC ID: %x\n", flash.JEDECID())
    flash.UID(@uid)
    ser.printf("UID: %x%x\n", uid[0], uid[1])

    flash.WritesEnabled(FALSE)
    ser.printf("Writes enabled? %d\n", flash.WritesEnabled())

    seg := base := 0
    ser.position(0, 10)

' Page method
    repeat
        s := getct()
        flash.ReadBlock(base, 256, @_page)
        e := getct()-s
        ser.Hexdump(@_page, base, 256, 16, 0, 10)

        case ser.CharIn()
            "[":
                base := base - 256
                if base < 0
                    base := 0
            "]":
                base := base + 256
                if base > $FF_FF_00
                    base := $FF_FF_00
            "e":
                base := $FF_FF_00
            "s":
                base := 0
            "x":
                EraseSector(base)
            "w":
                WriteTest(base)
            "q":
                ser.printf("Halting\n")
                quit
            OTHER:
        MessageWritesEna()
        ser.printf("Reading done (%d cycles/%dns).\n", e, CyclesTonsec(e))
        ser.ClearLine()
'        ser.Position(0, 10)

{' Byte method
    repeat
        ser.printf("%x: ", base + seg)
        repeat offs from 0 to 15
            rd_tmp := flash.ReadByte(base + seg + offs)
            ser.hex(rd_tmp, 2)
            ser.char(" ")
        ser.newline
        seg += 16
        if seg > 255
            seg := 0
            case ser.CharIn
                "[":
                    base := base - 256
                    if base < 0
                        base := 0
                "]":
                    base := base + 256
                    if base > $FF_FF_00
                        base := $FF_FF_00
                "e":
                    base := $FF_FF_00
                "s":
                    base := 0
                "x":
                    EraseSector(base)
                "w":
                    WriteTest(base)
                "q":
                    ser.printf("Halting\n")
                    quit
                OTHER:
            ser.Position(0, 10)
}
    FlashLED(LED, 100)     ' Signal execution finished

PUB EraseSector(start_addr) | s, e

    flash.WritesEnabled(TRUE)
    MessageWritesEna()

    ser.printf("Erasing...")
    s := getct()
    flash.Erase(flash.SECTOR, start_addr)
    repeat until not flash.Busy()
    e := getct()-s
    ser.printf("done (%d cycles/%dns).\n", e, CyclesTonsec(e))
    ser.ClearLine()

PUB WriteTest(start_addr) | i, s, e, tmp

    tmp := $DE_AD_BE_EF
    ser.printf("Writing test value...")
    repeat until not flash.Busy()
    s := getct()
    repeat i from 0 to 3
        flash.WritesEnabled(TRUE)
        MessageWritesEna()
        flash.WriteByte(start_addr + i, tmp.byte[3-i])
    e := getct()-s
    ser.printf("done (%d cycles/%dns).\n", e, CyclesTonsec(e))
    ser.ClearLine()

PUB CyclesTonsec(cycles)

    return cycles / CYCLES_USEC

PUB MessageWritesEna()

    ser.printf("\nWrites enabled? ")
    case flash.WritesEnabled()
        TRUE:
            ser.printf("Yes\n")
        FALSE:
            ser.printf("No \n")
    ser.ClearLine()

PUB Setup()

    repeat until _ser_cog := ser.StartRXTX (SER_RX, SER_TX, 0, SER_BAUD)
    ser.Clear()
    ser.PrintF("Serial terminal started (P2 @%dMHz)\n", _clkfreq / 1_000_000)
    if _flash_cog := flash.Start (CS, SCK, MOSI, MISO, SCK_FREQ)
        ser.Printf("W25Qxxx driver started (SPI @%dMHz)\n", SCK_FREQ/1_000_000)
    else
        ser.Printf("W25Qxxx driver failed to start - halting\n")
        FlashLED(LED, 500)

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
