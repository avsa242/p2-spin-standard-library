{
    --------------------------------------------
    Filename: SSD1306-OLED-Demo.spin2
    Description: Demo of the ssd1306 i2c driver
    Author: Jesse Burt
    Copyright (c) 2018
    Created: Jun 15, 2019
    Updated: Jun 26, 2019
    See end of file for terms of use.
    --------------------------------------------
}
#ifndef __FASTSPIN__
#error "Sorry, this source requires FastSpin to compile."
#endif

#define FPS_MON_ENABLE  ' Optionally undef/comment out to disable the terminal framerate monitor

CON

    XTAL        = cfg#XTAL
    XDIV        = cfg#XDIV
    XMUL        = cfg#XMUL
    XDIVP       = cfg#XDIVP
    XOSC        = cfg#XOSC
    XSEL        = cfg#XSEL
    XPPPP       = cfg#XPPPP
    CLOCKFREQ   = cfg#CLOCKFREQ
    SETFREQ     = cfg#SETFREQ
    ENAFREQ     = cfg#ENAFREQ

    BUFFSZ      = (WIDTH * HEIGHT) / 8
    XMAX        = WIDTH-1
    YMAX        = HEIGHT-1

' User modifiable constants:
    WIDTH       = 128
    HEIGHT      = 64

    I2C_SCL     = 27
    I2C_SDA     = 28
    I2C_HZ      = 1_000_000

    SER_RX      = cfg#SER_RX
    SER_TX      = cfg#SER_TX
    SER_BAUD    = 2_000_000

    LED         = cfg#LED1

OBJ

    cfg         : "core.con.boardcfg.p2eval"
    ser         : "com.smartserial"
    time        : "time.spin2"
    oled        : "display.oled.ssd1306.i2c"
    int         : "string.integer"
    gfx         : "display.gfx.bitmap"
    fnt5x8      : "font.5x8"

VAR

    long _fps_mon_stack[50]
    long _rndSeed
    long bx, by, dx, dy
    byte _framebuff[BUFFSZ]
    byte _fps, _fps_mon_cog, _ser_cog


PUB Main | x, y, ch

    _fps := 0
    Setup
    ClearScreen

    oled.MirrorH(TRUE)
    oled.MirrorV(TRUE)

    Demo_Greet
    time.Sleep (5)
    ClearScreen

    Demo_Sine (500)
    ClearScreen

    Demo_Wave (500)
    ClearScreen

    Demo_MEMScroller($0_00_00, $0_40_00)
    ClearScreen

    Demo_DrawBitmap (@Beanie, 500)
    ClearScreen

    Demo_LineSweep(2)
    ClearScreen

    Demo_LineRND (500)
    ClearScreen

    Demo_PlotRND (500)
    ClearScreen

    Demo_BouncingBall (500, 5)
    ClearScreen

    Demo_ExpandingCircle(5)
    ClearScreen

    Demo_Wander (1000)
    ClearScreen

    Demo_Text (300)

    Demo_Contrast(2, 1)
    ClearScreen

    Stop
    Flash(LED, 100)

PUB Demo_BouncingBall(frames, radius)
'' Draws a simple ball bouncing off screen edges
    bx := (rnd(XMAX) // (WIDTH - radius * 4)) + radius * 2  'Pick a random screen location to
    by := (rnd(YMAX) // (HEIGHT - radius * 4)) + radius * 2 ' start from
    dx := rnd(4) // 2 * 2 - 1                               'Pick a random direction to
    dy := rnd(4) // 2 * 2 - 1                               ' start moving

    repeat frames
        bx += dx
        by += dy
        if (by =< radius OR by => HEIGHT - radius)          'If we reach the top or bottom of the screen,
            dy *= -1                                        ' change direction
        if (bx =< radius OR bx => WIDTH - radius)           'Ditto with the left or right sides
            dx *= -1

        gfx.Circle (bx, by, radius, 1)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++
        gfx.Clear

PUB Demo_DrawBitmap(addr_bitmap, reps)' XXX stock bitmap unsuitable for 64-height display
'' Continuously redraws bitmap at address 'addr_bitmap' (e.g., Demo_DrawBitmap(@bitmap1, 500)
'' Visually unexciting - just for demonstrating the max blit speed
    repeat reps
'        bytemove(@_framebuff, BUFFSZ, addr_bitmap, BUFFSZ)
'        oled.DrawBitmap (addr_bitmap)
        gfx.Bitmap(addr_bitmap, BUFFSZ)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++

PUB Demo_ExpandingCircle(reps) | i, x, y
'' Draws circles at random locations, expanding in radius
    repeat reps
        x := rnd(XMAX)
        y := rnd(YMAX)
        repeat i from 1 to 31
            gfx.Circle (x, y, ||i, -1)
            oled.WriteBuffer(@_framebuff, BUFFSZ)
            _fps++
            gfx.Clear

PUB Demo_Contrast(reps, delay_ms) | contrast_level
'' Fades out and in display contrast
    repeat reps
        repeat contrast_level from 255 to 1
            oled.Contrast (contrast_level)
            time.MSleep (delay_ms)
        repeat contrast_level from 0 to 254
            oled.Contrast (contrast_level)
            time.MSleep (delay_ms)

PUB Demo_Greet
'                    |0   |5  1|0  1|5
    gfx.Position (0, 0)
    gfx.Str (string("SSD1306 on the"))

    gfx.Position (0, 1)
    gfx.Str (string("Parallax"))

    gfx.Position (0, 2)
    gfx.Str (string("P2X8C4M64P @ "))
    gfx.Str (int.Dec(clkfreq/1_000_000))
    gfx.Str (string("MHz"))

    gfx.Position (0, 3)
    gfx.Str (int.DecPadded (WIDTH, 3))

    gfx.Position (3, 3)
    gfx.Str (string("x"))

    gfx.Position (4, 3)
    gfx.Str (int.DecPadded (HEIGHT, 2))
    oled.WriteBuffer (@_framebuff, BUFFSZ)

PUB Demo_LineRND (reps)
'' Draws random lines with color -1 (invert)
    repeat reps
        gfx.Line (rnd(XMAX), rnd(YMAX), rnd(XMAX), rnd(YMAX), -1)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++

PUB Demo_LineSweep (reps) | x, y
'' Draws lines top left to lower-right, sweeping across the screen, then
''  from the top-down
    repeat reps
        repeat x from 0 to XMAX step 1
            gfx.Line (x, 0, XMAX-x, YMAX, -1)
            oled.WriteBuffer(@_framebuff, BUFFSZ)
            _fps++

        repeat y from 0 to YMAX step 1
            gfx.Line (XMAX, y, 0, YMAX-y, -1)
            oled.WriteBuffer(@_framebuff, BUFFSZ)
            _fps++

PUB Demo_MEMScroller(start_addr, end_addr) | pos, st, en
'' Dumps Propeller Hub RAM (or ROM) to the framebuffer
'' Very meta/introspective/magic mirror-looking if dumping covers the area of RAM
''  occupied by this program's variables!
    repeat pos from start_addr to end_addr step 128
        gfx.Bitmap(pos, BUFFSZ)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++

PUB Demo_PlotRND (reps) | x, y
'' Draws random pixels to the screen, with color -1 (invert)
    repeat reps
        gfx.Plot (rnd(XMAX), rnd(YMAX), -1)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++

PUB Demo_Sine(reps) | x, y, modifier, offset, div
'' Draws a sine wave the length of the screen, influenced by
''  the system counter
    case HEIGHT
        32:
            div := 4096
        64:
            div := 3072
        OTHER:
            div := 2048

    offset := YMAX/2                                    ' Offset for Y axis

    repeat reps
        repeat x from 0 to XMAX
            modifier := (||cnt / 1_000_000)           ' Use system counter as modifier
            y := offset + sin(x * modifier) / div
            gfx.Plot(x, y, 1)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++
        gfx.Clear

PUB Demo_Text(reps) | col, row, maxcol, maxrow, ch, st
'' Sequentially draws the whole font table to the screen, for half of 'reps'
''  then random characters for the second half
    maxcol := (WIDTH/gfx.FontWidth)-1   'XXX In the future, pull part of this from a font def file,
    maxrow := (HEIGHT/gfx.FontHeight)-1  ' based on its size
    ch := $00
    repeat reps/2
        repeat row from 0 to maxrow
            repeat col from 0 to maxcol
                ch++
                if ch > $7F
                    ch := $00
                gfx.Position (col, row)
                gfx.Char (ch)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++

    repeat reps/2
        repeat row from 0 to maxrow
            repeat col from 0 to maxcol
                gfx.Position (col, row)
                gfx.Char (rnd(127))
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++

PUB Demo_Wave(frames) | x, y, ydir
'' Draws a simple triangular wave
    ydir := 1
    y := 0
    repeat frames
        repeat x from 0 to XMAX
            if y == YMAX
                ydir := -1
            if y == 0
                ydir := 1
            y := y + ydir
            gfx.Plot (x, y, 1)
        oled.WriteBuffer(@_framebuff, BUFFSZ)
        _fps++
        gfx.Clear

PUB Demo_Wander(reps) | x, y, d
'' Draws randomly wandering pixels
    x := XMAX/2
    y := YMAX/2
    repeat reps
        case d := rnd(4)
            1:
                x += 2
                if x > XMAX
                    x := 0
            2:
                x -= 2
                if x < 0
                    x := XMAX
            3:
                y += 2
                if y > YMAX
                    y := 0
            4:
                y -= 2
                if y < 0
                    y := YMAX
        gfx.Plot (x, y, -1)
        oled.WriteBuffer(@_framebuff, BUFFSZ)

PUB ClearScreen

    gfx.Clear
    oled.WriteBuffer(@_framebuff, BUFFSZ)

PUB Sin(angle) | tmp

    asm
        shl angle, #20
        qrotate ##100000, angle
        getqy tmp               'Can't getqy directly into result - too complex for inline asm
    endasm
    return tmp

PUB RND(maxval) | i       'Returns a random number between 0 and upperlimit

    asm
        getrnd i
        shr i, #16
        add maxval, #1
        mul i, maxval
        shr i, #16
    endasm
    return i

PUB Clear

    ser.Char (27)
    ser.Char ("[")
    ser.Char ("2")
    ser.Char ("J")
    Position (0, 0)

PUB Position(x, y)
' Position cursor at column x, row y (from top-left).
    ser.Char (27)
    ser.Char ("[")
    ser.Dec (x)
    ser.Char (";")
    ser.Dec (y)
    ser.Char ("f")

PUB NL

    ser.Char (10)
    ser.Char (13)

PUB fps_mon
'' Sit in another cog and tell us (more or less) how many frames per second we're rendering
    Position (0, 4)
    ser.Str (string("FPS: "))
    repeat
        time.MSleep (1000)
        Position (5, 4)
        ser.Str (int.DecZeroed (_fps, 3))
        _fps := 0

PUB Setup

    clkset(ENAFREQ, CLOCKFREQ, XSEL)
    repeat until ser.Startx (SER_RX, SER_TX, 0, SER_BAUD)
    Clear
    ser.Str (string("Serial terminal started"))
    NL
    gfx.Start (WIDTH, HEIGHT, 1, @_framebuff)
    gfx.FontSize (6, 8)
    gfx.FontAddress (fnt5x8.BaseAddr)
    if oled.Start (WIDTH, HEIGHT, I2C_SCL, I2C_SDA, I2C_HZ, 0)
        oled.Defaults
        oled.OSCFreq (407)
        ser.Str (string("SSD1306 object started"))
        NL
    else
        ser.Str (string("SSD1306 object failed to start - halting"))
        Stop
        Flash(LED, 500)

#ifdef FPS_MON_ENABLE
    _fps_mon_cog := cognew(fps_mon, @_fps_mon_stack)  'Start framerate monitor in another cog/core
#endif

PUB Flash(led_pin, delay_ms)

    dirb[led_pin] := 1
    repeat
        !outb [led_pin]
        time.MSleep(delay_ms)

PUB Stop

    oled.DisplayOff
    oled.Stop

    if _fps_mon_cog
        cogstop(_fps_mon_cog)
    if _ser_cog
        cogstop(_ser_cog)

DAT

    Beanie      byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80, $C0
                byte    $C0, $C0, $C0, $C0, $C0, $C0, $C0, $C0, $80, $80, $80, $80, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $80
                byte    $80, $00, $00, $00, $80, $80, $80, $80, $C0, $C0, $C0, $C0, $C0, $E0, $E0, $E0
                byte    $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
                byte    $E0, $E0, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $0F, $1F, $3F
                byte    $3F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $7F, $3F, $3F, $3F, $3F
                byte    $3F, $3F, $1F, $1F, $1E, $1E, $1E, $0E, $0E, $0E, $0E, $06, $06, $06, $F7, $FF
                byte    $FF, $F7, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $07
                byte    $07, $07, $07, $07, $07, $0F, $0F, $0F, $0F, $0F, $1F, $1F, $1F, $1F, $1F, $1F
                byte    $0F, $0F, $07, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $80, $C0, $C0, $E0, $E0, $60, $70, $30, $30, $18, $18, $C8, $FF, $FF, $FF
                byte    $FF, $FF, $FF, $C8, $18, $18, $30, $30, $70, $60, $E0, $E0, $C0, $C0, $80, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $80, $C0, $E0, $F0, $F8, $FC, $FE, $7F
                byte    $3F, $0F, $07, $03, $01, $00, $00, $00, $00, $C0, $FC, $FF, $FF, $FF, $FF, $FF
                byte    $FF, $FF, $FF, $FF, $FF, $FC, $C0, $00, $00, $00, $00, $01, $03, $07, $0F, $3F
                byte    $7F, $FE, $FC, $F8, $F0, $E0, $C0, $80, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $80, $E0, $F8, $FC, $FF, $FF, $FF, $FF, $FF, $3F, $07, $01, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $F8, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                byte    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $F8, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $01, $07, $3F, $FF, $FF, $FF, $FF, $FF, $FC, $F8, $E0, $80, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $C0, $FC, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $BF, $81, $80, $80, $80, $C0
                byte    $C0, $C0, $C0, $C0, $C0, $C0, $C0, $F0, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
                byte    $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $F0, $C0, $C0, $C0, $C0, $C0, $C0, $C0
                byte    $C0, $80, $80, $80, $81, $BF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FC, $C0, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $78, $FF, $FF, $FF, $FF, $FF, $FF, $CF, $CF, $CF, $CF, $CF, $C7, $87, $87, $87
                byte    $87, $87, $87, $87, $87, $87, $87, $07, $03, $03, $03, $03, $03, $03, $03, $03
                byte    $03, $03, $03, $03, $03, $03, $03, $03, $07, $87, $87, $87, $87, $87, $87, $87
                byte    $87, $87, $87, $C7, $CF, $CF, $CF, $CF, $CF, $FF, $FF, $FF, $FF, $FF, $FF, $78
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $01, $01, $03, $03, $03, $03, $03, $07, $07, $07, $07, $07, $07, $07
                byte    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
                byte    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F, $0F
                byte    $07, $07, $07, $07, $07, $07, $07, $03, $03, $03, $03, $03, $01, $01, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
                byte    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
