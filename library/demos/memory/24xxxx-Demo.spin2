{
    --------------------------------------------
    Filename: 24xxxx-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the 24xxxx driver (P2 version)
    Copyright (c) 2021
    Started May 9, 2020
    Updated Apr 27, 2021
    See end of file for terms of use.
    --------------------------------------------
    NOTE: Use the write and erase tests with care,
    if the contents of the EEPROM are valuable. The
    EEPROM data isn't backed up first.
}

CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

    I2C_SCL     = 0
    I2C_SDA     = 1
    I2C_HZ      = 1_000_000                     ' max is 1_000_000

    EE_SZ       = 512                           ' EEPROM size, in kbits
' --

    STATUS_LINE = 15
    CYCLES_USEC = _clkfreq / 1_000_000          ' calc . cycles in 1 microsec

    ERASED_CELL = $FF                           ' erased EE cell character

OBJ

    ser : "com.serial.terminal.ansi"
    cfg : "core.con.boardcfg.p2eval"
    mem : "memory.eeprom.24xxxx.i2c"

VAR

    long _ee_max_addr
    byte _buff[256]                             ' buffer up to max size EEPROM
    byte _pagesize

PUB Main() | mem_base, stime, etime

    setup()
    mem.eesize(EE_SZ)
    _pagesize := mem.pagesize()
    _ee_max_addr := mem.eemaxaddr()

    ser.position(0, 3)
    ser.printf(string("EE: %dkbits, page size: %d, max addr: %x"), EE_SZ, _pagesize, _ee_max_addr)
    mem_base := 0
    repeat
        readtest(mem_base)

        ser.hexdump(@_buff, mem_base, _pagesize, 16, 0, 5)
        ser.newline()

        case ser.charin()                       ' wait for terminal keypress
            "[":                                ' previous EEPROM page
                mem_base := 0 #> (mem_base - _pagesize)
            "]":                                ' next page
                mem_base := (mem_base + _pagesize) <# ((_ee_max_addr-_pagesize)+1)
            "s":                                ' start/first EEPROM page
                mem_base := 0
            "e":                                ' last EEPROM page
                mem_base := (_ee_max_addr-_pagesize)+1
            "w":                                ' write test on current page
                writetest(mem_base)
            "x":                                ' erase current page
                erasetest(mem_base)
            "q":                                ' quit demo
                ser.strln(string("Halting"))
                quit
            other:

    repeat

PUB EraseTest(st_addr) | stime, etime
' Erase EEPROM page
    bytefill(@_buff, ERASED_CELL, _pagesize)    ' fill buff with erase char
    ser.position(0, STATUS_LINE+1)
    ser.str(string("Erasing page..."))
    stime := getct()
    mem.writebytes(st_addr, _pagesize, @_buff)  ' write the buffer to EEPROM
    etime := getct()-stime

    cycletime(etime)                            ' display how long it took

PUB ReadTest(st_addr) | stime, etime
' Read EEPROM page
    bytefill(@_buff, 0, _pagesize)
    ser.position(0, STATUS_LINE)
    ser.str(string("Reading page..."))
    stime := getct()
    mem.readbytes(st_addr, _pagesize, @_buff)   ' read EEPROM page to buffer
    etime := getct()-stime

    cycletime(etime)

PUB WriteTest(st_addr) | stime, etime
' Write a test string to EEPROM page
    ser.position(0, STATUS_LINE+2)
    ser.str(string("Writing test value..."))
    stime := getct()
    mem.writebytes(st_addr, 4, string("TEST"))  ' write 4 bytes from string

    etime := getct()-stime

    cycletime(etime)

PRI CycleTime(cycles)
' Display elapsed time in cycles and microseconds
    ser.printf(string("%d cycles (%dusec)"), cycles, cycles / CYCLES_USEC)
    ser.clearline()

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(string("Serial terminal started"))
    if mem.startx(I2C_SCL, I2C_SDA, I2C_HZ)
        ser.strln(string("24xxxx driver started"))
    else
        ser.strln(string("24xxxx driver failed to start - halting"))
        repeat

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
