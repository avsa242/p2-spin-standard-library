{
---------------------------------------------------------------------------------------------------
    Filename:       Mic-to-VGA-Demo.spin2
    Description:    Demo that captures audio from a mic and outputs it directly to attached
        headphones while showing a scope output of the audio on an attached VGA display.
    Author:         Jesse Burt
    Started:        May 16, 2020
    Updated:        Jan 26, 2024
    Copyright (c) 2024 - See end of file for terms of use.
---------------------------------------------------------------------------------------------------
}

CON

    _xtlfreq        = cfg._xtlfreq
    _clkfreq        = cfg._clkfreq_def

' -- User-modifiable constants
' Parallax A/V Board, P/N 64006H (set AVBOARD_BASE)
    AVBOARD_BASE    = 32                        ' 0, 8, 16, 24, 32, 40, 48

    VGA_BASE        = AVBOARD_BASE+0
    MIC_PIN         = AVBOARD_BASE+5
    SPKR_L          = AVBOARD_BASE+6
    SPKR_R          = AVBOARD_BASE+7

    SAMPLE_RATE     = 44100
' CAUTION: Change this line with care. Test with headphones out of ears first,
'   or with speakers set to a low volume
    MIC_GAIN        = 1                         ' 1x, 3 (3.16), 10, 100
' --

    WIDTH           = 320
    HEIGHT          = 240
    XMAX            = WIDTH-1
    YMAX            = HEIGHT-1
    BUFFSZ          = WIDTH * HEIGHT
    BPP             = 1
    BPL             = WIDTH * BPP

    ADC_PERIOD      = _clkfreq / SAMPLE_RATE
    SCOPE_FACT      = ADC_PERIOD / HEIGHT


OBJ

    cfg:    "boardcfg.p2eval"
    ser:    "com.serial.terminal.ansi" | SER_BAUD=2_000_000
    vga:    "display.vga.bitmap-8bpp" | BASEPIN=32
    spkr:   "signal.dac.audio"
    mic:    "signal.adc.audio"


VAR

    long _audio_stack[100], _gfx_stack[100]
    long _audio_cog, _vga_cog, _adc_sample, _bias
    byte _offscreen[BUFFSZ]


PUB main() | adc_min, adc_max

    setup()
    ser.hide_cursor()

    _bias := 2048                               ' bias/DC offset
    adc_max := 0
    repeat 500                                  ' Gather some samples to get a
        adc_min := _adc_sample                  '   "real" minimum

    repeat
        adc_min := _adc_sample <# adc_min
        adc_max := adc_max #> _adc_sample
        ser.pos_xy(0, 4)
        ser.printf(@"ADC current: %d  \n\rmin: %d  \n\rmax: %d  ", _adc_sample, adc_min, adc_max)


PUB draw_wave() | x, y, y_offset                 ' XXX Rolls - no triggering
' Draw scope of audio input
    vga.clear()
    repeat x from 0 to XMAX
        y := vga.CENTERY+(_adc_sample / SCOPE_FACT)
        vga.plot(x, y, 255)
        waitx(ADC_PERIOD)


PUB cog_audio()
' Sample audio and output it directly to headphones/speakers
    mic.start(MIC_PIN, SAMPLE_RATE, MIC_GAIN)
    spkr.start(SPKR_L, SPKR_R, SAMPLE_RATE)
    _audio_cog := cogid()
    repeat
        _adc_sample := mic.adcsample16()-_bias
        spkr.output16(_adc_sample)


PUB cog_graphics()
' Run VGA driver and waveform/scope drawing loop
    vga.set_timings(10, 33, 16, 96, 48, 640)
    vga.defaults()
    vga.start()
    vga.draw_to(@_offscreen)
    vga.clear()

    _vga_cog := cogid()                         ' signal 'started' to main cog

    repeat
        draw_wave()
        vga.wait_vsync()
        vga.show()


PUB setup()

    ser.start()
    ser.clear()
    ser.strln(@"Serial terminal started")

    cogspin(NEWCOG, cog_graphics(), @_gfx_stack)
    repeat until _vga_cog
    ser.strln(@"VGA 8bpp driver started")

    cogspin(NEWCOG, cog_audio(), @_audio_stack)
    repeat until _audio_cog
    ser.printf(@"Audio cog started (%dHz sample rate)\n\r", SAMPLE_RATE)


DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}

