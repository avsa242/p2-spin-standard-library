{
    --------------------------------------------
    Filename: Mic-to-VGA-Demo.spin2
    Description: Demo that captures audio from a mic and
        outputs it directly to attached headphones
        showing a scope output of the audio on an attached VGA display
    Author: Jesse Burt
    Started: May 16, 2020
    Updated: Jul 14, 2020
    See end of file for terms of use.
    --------------------------------------------
}
CON

     _xtlfreq       = cfg._xtlfreq
     _clkfreq       = 250_000_000                           ' Must match constant set in VGA driver (default 250MHz)

' -- User-modifiable constants
    LED             = cfg.LED1
    SER_RX          = cfg.SER_RX
    SER_TX          = cfg.SER_TX
    SER_BAUD        = 2_000_000

    VGA_BASEPIN     = 0
    ADC_PIN         = 48
    AUD_L           = 6
    AUD_R           = 7
    SAMPLE_RATE     = 16000
' --

    WIDTH           = 320
    HEIGHT          = 240
    XMAX            = WIDTH-1
    YMAX            = HEIGHT-1
    BUFFSZ          = WIDTH * HEIGHT
    BPP             = 1
    BPL             = WIDTH * BPP

    ADC_PERIOD      = _clkfreq / SAMPLE_RATE               ' XXX something isn't right here
    AUDIO_PERIOD    = _clkfreq / SAMPLE_RATE               ' Perceived quality doesn't
    SCOPE_FACT      = ADC_PERIOD / HEIGHT                   ' correlate with SAMPLE_RATE

OBJ

    ser         : "com.serial.terminal.ansi"
    cfg         : "core.con.boardcfg.p2eval"
    io          : "io"
    time        : "time"
    sp          : "core.con.smartpins"
    vga         : "display.vga.bitmap-8bpp"
    fnt         : "font.5x8"
    audio       : "signal.dac.audio"
    mic         : "signal.adc.audio"

VAR

    long _palette[256]
    long _audio_stack[100], _gfx_stack[100]
    long _ser_cog, _audio_cog, _vga_cog, _adc_sample
    byte _framebuffer[BUFFSZ], _offscreen[BUFFSZ]

PUB Main() | adc_min, adc_max

    setup()
    ser.hidecursor()

    adc_max := 0
    repeat 500                                              ' Gather some samples to get a
        adc_min := _adc_sample                              '   "real" minimum

    repeat
        adc_min := _adc_sample <# adc_min
        adc_max := adc_max #> _adc_sample
        ser.position(0, 4)
        ser.printf("ADC current: %d  \nmin: %d  \nmax: %d  ", _adc_sample, adc_min, adc_max)

PUB DrawWave() | x, y, y_offset                             ' XXX Rolls - no triggering
' Draw scope of audio input
    vga.clear()
    repeat x from 0 to XMAX
        y := YMAX-(_adc_sample / SCOPE_FACT)                ' XXX This Y-offset calc needs
        vga.plot(x, y, 191)                                 '   improvement
        waitx(ADC_PERIOD)

PUB cog_Audio()
' Sample audio and output it directly to headphones/speakers
    mic.start(ADC_PIN, ADC_PERIOD, 1)
    audio.start(AUD_L, AUD_R, AUDIO_PERIOD)
    repeat
        _adc_sample := mic.adcsample16()
        audio.output16(_adc_sample)

PUB cog_Graphics()
' Run VGA driver and waveform/scope drawing loop
    vga.settimings(10, 33, 16, 96, 48, 640)
    setuppalette()
    if vga.start(VGA_BASEPIN, @_framebuffer, @_palette, WIDTH, HEIGHT)
        vga.drawto(@_offscreen)
        vga.fontaddress(fnt.baseaddr())
        vga.fontsize(6, 8)
        vga.clear()
        vga.fgcolor(vga.MAX_COLOR)
        vga.position(5, 5)
        vga.printf("Ready.")
        vga.update()
        time.sleep(5)
    else
        cogstop(cogid())

    _vga_cog := cogid()

    repeat
        drawwave()
        vga.waitvsync()
        vga.update()

PUB Setup()

    repeat until _ser_cog := ser.startrxtx (SER_RX, SER_TX, 0, SER_BAUD)
    ser.clear()
    ser.printf("Serial terminal started\n")

    cogspin(16, cog_graphics(), @_gfx_stack)
    repeat until _vga_cog
    ser.printf("VGA 8bpp driver started\n")

    cogspin(16, cog_audio(), @_audio_stack)
    repeat until _audio_cog
    ser.printf("Audio cog started (%dHz sample rate)\n", SAMPLE_RATE)

PUB SetupPalette() | i, r, g, b, c
' Set up palette
    r := 0
    g := 0
    b := 0

    repeat i from 0 to 255
        c := 0 | (r << 16) | (g << 8) | b
        _palette[i] := c

        case i
            0..63:
                r += 4
                g := 0
                b := 0
            64..127:
                r := 0
                g += 4
                b := 0
            128..191:
                r := 0
                g := 0
                b += 4
            192..254:
                r += 4
                g += 4
                b := 0
            255:
                r := 255
                g := 255
                b := 255

#include "lib.utility.spin2"

