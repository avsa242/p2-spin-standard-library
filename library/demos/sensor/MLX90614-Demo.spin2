{
    --------------------------------------------
    Filename: MLX90614-Demo.spin2
    Author: Jesse Burt
    Description: Demo for the MLX90614 driver (P2 version)
    Copyright (c) 2020
    Started Nov 10, 2019
    Updated May 15, 2020
    See end of file for terms of use.
    --------------------------------------------
}

CON

    XTAL        = cfg#XTAL
    XDIV        = cfg#XDIV
    XMUL        = cfg#XMUL
    XDIVP       = cfg#XDIVP
    XOSC        = cfg#XOSC
    XSEL        = cfg#XSEL
    XPPPP       = cfg#XPPPP
    CLOCKFREQ   = cfg#CLOCKFREQ
    SETFREQ     = cfg#SETFREQ
    ENAFREQ     = cfg#ENAFREQ

    LED         = cfg#LED1
    SER_RX      = cfg#SER_RX
    SER_TX      = cfg#SER_TX
    SER_BAUD    = 2_000_000

    I2C_SCL     = 28
    I2C_SDA     = 27
    I2C_HZ      = 100_000

    C           = 0
    F           = 1
    K           = 2

' Choose one of the temperature scales above
    TEMP_SCALE  = C

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    time    : "time"
    io      : "io"
    mlx     : "sensor.temperature.mlx90614.i2c.spin2"
    int     : "string.integer"

VAR

    byte _ser_cog

PUB Main | Tobj, Tamb

    Setup

    mlx.Scale(TEMP_SCALE)

    repeat
        Tobj := mlx.ObjTemp (1)
        Tamb := mlx.AmbientTemp

        ser.Position (0, 5)
        ser.printf("Tobj: ")
        Decimal(Tobj, 100)

        ser.printf("\nTa: ")
        Decimal(Tamb, 100)

        time.MSleep (100)

PUB Decimal(scaled, divisor) | whole[4], part[4], places, tmp
' Display a fixed-point scaled up number in decimal-dot notation - scale it back down by divisor
'   e.g., Decimal (314159, 100000) would display 3.14159 on the termainl
'   scaled: Fixed-point scaled up number
'   divisor: Divide scaled-up number by this amount
    whole := scaled / divisor
    tmp := divisor
    places := 0

    repeat
        tmp /= 10
        places++
    until tmp == 1
    part := int.DecZeroed(abs(scaled // divisor), places)

    ser.printf("%d.%s", whole, part)

PUB Setup

    clkset(ENAFREQ, CLOCKFREQ)
    repeat until _ser_cog := ser.StartRXTX (SER_RX, SER_TX, 0, SER_BAUD)
    ser.Clear
    ser.PrintF("Serial terminal started\n")

    if mlx.Startx(I2C_SCL, I2C_SDA, I2C_HZ)
        ser.PrintF("MLX90614 driver started\n")    
    else
        ser.PrintF("MLX90614 driver failed to start - halting\n")
        mlx.Stop
        time.MSleep (500)
        FlashLED(LED, 500)

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
