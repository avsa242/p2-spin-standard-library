{
    --------------------------------------------
    Filename: LIS3DH-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the LIS3DH driver
        (P2 version)
    Copyright (c) 2022
    Started Aug 12, 2017
    Updated Jul 9, 2022
    See end of file for terms of use.
    --------------------------------------------
}
#include "core.con.click.spin2"

CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED1        = cfg.LED1
    SER_BAUD    = 2_000_000

    CLICK_BASE  = 0

    { SPI configuration }
    { custom I/O pin definitions - uncomment the below, and comment out the #include
        line above to use }
'    CS_PIN      = 0
'    SCK_PIN     = 1                            ' (SCL)
'    MOSI_PIN    = 2                            ' (SDA)
'    MISO_PIN    = 3                            ' (SDO)
    SPI_FREQ    = 10_000_000                    ' max is 10_000_000

    { I2C configuration }
    { custom I/O pin definitions - uncomment the below, and comment out the #include
        line above to use }
'    SCL_PIN     = 28
'    SDA_PIN     = 29
    I2C_FREQ    = 400_000
    I2C_ADDRBITS= 0

    INT1        = 15

'   NOTE: If LIS3DH_SPI is #defined, and MOSI_PIN and MISO_PIN are the same,
'   the driver will attempt to start in 3-wire SPI mode.
' --

    DAT_X_COL   = 20
    DAT_Y_COL   = DAT_X_COL + 15
    DAT_Z_COL   = DAT_Y_COL + 15

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    int     : "string.integer"
    accel   : "sensor.accel.3dof.lis3dh"

PUB Main()

    setup()
    accel.preset_active()

    repeat
        ser.position(0, 3)
        accelcalc()

        if ser.rxcheck() == "c"                 ' press the 'c' key in the demo
            calibrate()                         ' to calibrate sensor offsets

PUB AccelCalc() | ax, ay, az

    repeat until accel.acceldataready()         ' wait for new sensor data set
    accel.accelg(@ax, @ay, @az)                 ' read calculated sensor data
    ser.str(string("Accel (g):"))
    ser.positionx(DAT_X_COL)
    decimal(ax, 1000000)                        ' data is in micro-g's; display
    ser.positionx(DAT_Y_COL)                    ' it as if it were a float
    decimal(ay, 1000000)
    ser.positionx(DAT_Z_COL)
    decimal(az, 1000000)
    ser.clearline()
    ser.newline()

PUB Calibrate()

    ser.position(0, 7)
    ser.str(string("Calibrating..."))
    accel.calibrateaccel()
    ser.positionx(0)
    ser.clearline()

PRI Decimal(scaled, divisor) | whole[4], part[4], places, tmp, sign
' Display a scaled up number as a decimal
'   Scale it back down by divisor (e.g., 10, 100, 1000, etc)
    whole := scaled / divisor
    tmp := divisor
    places := 0
    part := 0
    sign := 0
    if scaled < 0
        sign := "-"
    else
        sign := " "

    repeat
        tmp /= 10
        places++
    until tmp == 1
    scaled //= divisor
    part := int.deczeroed(abs(scaled), places)

    ser.char(sign)
    ser.dec(abs(whole))
    ser.char(".")
    ser.str(part)
    ser.chars(" ", 5)

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(string("Serial terminal started"))
#ifdef LIS3DH_SPI
    if accel.startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SPI_FREQ)
        ser.strln(string("LIS3DH driver started (SPI)"))
#else
    if accel.startx(SCL_PIN, SDA_PIN, I2C_FREQ, I2C_ADDRBITS)
        ser.strln(string("LIS3DH driver started (I2C)"))
#endif
    else
        ser.strln(string("LIS3DH driver failed to start - halting"))
        repeat

DAT
{
TERMS OF USE: MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
}

