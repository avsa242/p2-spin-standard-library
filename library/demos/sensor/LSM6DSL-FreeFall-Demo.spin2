{
    --------------------------------------------
    Filename: LSM6DSL-FreeFall-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the LSM6DSL driver
        Free-fall detection functionality (P2 version)
    Copyright (c) 2021
    Started Sep 6, 2021
    Updated Sep 6, 2021
    See end of file for terms of use.
    --------------------------------------------
}
' Uncomment one of the below lines to choose the interface
'#define LSM6DSL_I2C
#define LSM6DSL_SPI

CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000
#ifdef LSM6DSL_I2C
' I2C configuration
'    I2C_SCL     = 28
'    I2C_SDA     = 29
' Alternate constants for use if you have a MikroBus Click adapter board
'   (Parallax #64008)
'   - just specify the P2 base I/O pin (0, 16, 32, 48)
    CLICK_BASE  = 0                             ' basepin for Click adapter
    I2C_SCL     = CLICK_BASE + 1
    I2C_SDA     = CLICK_BASE + 0                ' leave these as-is
    INT_PIN     = CLICK_BASE + 4

    I2C_HZ      = 400_000                       ' max is 400_000
    ADDR_BITS   = 0                             ' 0, 1

#elseifdef LSM6DSL_SPI

' SPI configuration
'    CS_PIN      = 0
'    SCK_PIN     = 1
'    MOSI_PIN    = 2
'    MISO_PIN    = 3
' Alternate constants for use if you have a MikroBus Click adapter board
'   (Parallax #64008)
'   - just specify the P2 base I/O pin (0, 16, 32, 48)
    CLICK_BASE  = 32                             ' basepin for Click adapter
    CS_PIN      = CLICK_BASE + 8
    SCK_PIN     = CLICK_BASE + 9                ' leave these as-is
    MOSI_PIN    = CLICK_BASE + 11
    MISO_PIN    = CLICK_BASE + 10

    SCK_FREQ    = 10_000_000                    ' max is 10_000_000
#endif
' --

    DAT_X_COL   = 20
    DAT_Y_COL   = DAT_X_COL + 15
    DAT_Z_COL   = DAT_Y_COL + 15

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    time    : "time"
#ifdef LSM6DSL_I2C
    imu     : "sensor.imu.6dof.lsm6dsl.i2c"
#elseifdef LSM6DSL_SPI
    imu     : "sensor.imu.6dof.lsm6dsl.spi"
#endif

PUB Main()

    setup()
    imu.preset_freefall()                       ' default settings, but enable
                                                ' sensors, set scale factors,
                                                ' and free-fall parameters
    ser.position(0, 3)
    ser.str(string("Sensor stable       "))
    repeat
        ser.position(0, 3)
        ' check if sensor detects free-fall condition
        ' Note that InFreeFall() reads the WAKE_UP_SRC register, which also
        '   clears the interrupt. This is necessary when routing the free-fall
        '   interrupt to one of the sensor's INT pins, if interrupts are being
        '   latched
        if imu.infreefall()
            ser.strln(string("Sensor in free-fall!"))
            ser.str(string("Press any key to reset"))
            ser.charin()
            ser.positionx(0)
            ser.clearline()
            ser.position(0, 3)
            ser.str(string("Sensor stable       "))
        if ser.rxcheck() == "c"                 ' press the 'c' key in the demo
            calibrate()                         ' to calibrate sensor offsets

PUB Calibrate()

    ser.position(0, 7)
    ser.str(string("Calibrating..."))
    imu.calibratemag()
    imu.calibrateaccel()
    imu.calibrategyro()
    ser.positionx(0)
    ser.clearline()

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(string("Serial terminal started"))
#ifdef LSM6DSL_I2C
    if imu.startx(I2C_SCL, I2C_SDA, I2C_HZ, ADDR_BITS)
        ser.strln(string("LSM6DSL driver started (I2C)"))
#elseifdef LSM6DSL_SPI
    if imu.startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN)
        ser.strln(string("LSM6DSL driver started (SPI)"))
#endif
    else
        ser.strln(string("LSM6DSL driver failed to start - halting"))
        repeat

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
