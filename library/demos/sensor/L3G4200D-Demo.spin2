{
    --------------------------------------------
    Filename: L3G4200D-Demo.spin2
    Author: Jesse Burt
    Description: Simple demo of the L3G4200D driver
        (P2 version)
    Copyright (c) 2022
    Started May 9, 2021
    Updated Jul 5, 2022
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

    CS_PIN      = 0                             ' SPI
    SCL_PIN     = 1                             ' SPI, I2C
    SDA_PIN     = 2                             ' SPI, I2C
    SDO_PIN     = 3                             ' SPI

    I2C_FREQ    = 400_000                       ' max is 400_000
    SPI_FREQ    = 10_000_000                    ' max is 10_000_000
' --

    DAT_X_COL   = 15
    DAT_Y_COL   = DAT_X_COL + 15
    DAT_Z_COL   = DAT_Y_COL + 15

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    gyro    : "sensor.gyroscope.3dof.l3g4200d"
    int     : "string.integer"

PUB Main()

    setup()
    gyro.preset_active()                        ' default settings, but enable
                                                ' measurements, and set scale
                                                ' factor
    repeat
        ser.position(0, 3)
        gyrocalc()

        if ser.rxcheck() == "c"                 ' press the 'c' key in the demo
            calibrate()                         ' to calibrate sensor offsets

PUB GyroCalc() | gx, gy, gz

    repeat until gyro.gyrodataready()           ' wait for new sensor data set
    gyro.gyrodps(@gx, @gy, @gz)                 ' read calculated sensor data
    ser.str(string("Gyro (dps):"))
    ser.positionx(DAT_X_COL)
    decimal(gx, 1000000)                        ' data is in micro-dps; display
    ser.positionx(DAT_Y_COL)                    ' it as if it were a float
    decimal(gy, 1000000)
    ser.positionx(DAT_Z_COL)
    decimal(gz, 1000000)
    ser.clearline()
    ser.newline()

PUB Calibrate()

    ser.position(0, 7)
    ser.str(string("Calibrating..."))
    gyro.calibrategyro()
    ser.positionx(0)
    ser.clearline()

PRI Decimal(scaled, divisor) | whole, part, places, tmp, sign
' Display a scaled up number as a decimal
'   Scale it back down by divisor (e.g., 10, 100, 1000, etc)
    whole := scaled / divisor                   ' separate the whole part
    tmp := divisor                              ' temp/working copy of divisor
    places := 0
    part := 0
    sign := 0
    if scaled < 0                               ' determine sign character
        sign := "-"
    else
        sign := " "

    repeat                                      ' how many places to display:
        tmp /= 10                               ' increment every divide-by-10
        places++                                '   until we're left with 1
    until tmp == 1
    scaled //= divisor                          ' separate the fractional part
    part := int.deczeroed(abs(scaled), places)  ' convert to string

    ser.char(sign)                              ' display it
    ser.dec(abs(whole))
    ser.char(".")
    ser.str(part)
    ser.chars(32, 5)                            ' erase trailing chars

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(string("Serial terminal started"))
#ifdef L3G4200D_SPI
    if gyro.startx(CS_PIN, SCL_PIN, SDA_PIN, SDO_PIN, SPI_FREQ)
        ser.strln(string("L3G4200D driver started (SPI)"))
#else                                           ' default to I2C
    if gyro.startx(SCL_PIN, SDA_PIN, I2C_FREQ)
        ser.strln(string("L3G4200D driver started (I2C)"))
#endif
    else
        ser.strln(string("L3G4200D driver failed to start - halting"))
        repeat

DAT
{
TERMS OF USE: MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
}
