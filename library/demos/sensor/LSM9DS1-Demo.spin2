{
    --------------------------------------------
    Filename: LSM9DS1-Demo.spin2
    Author: Jesse Burt
    Description: Simple demo of the LSM9DS1 driver that
        outputs live data from the chip. (P2 version)
    Copyright (c) 2020
    Started Nov 3, 2019
    Updated Jun 13, 2020
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _xtlfreq    = cfg._xtlfreq
    _clkfreq    = cfg._clkfreq_def

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_RX      = cfg.SER_RX
    SER_TX      = cfg.SER_TX
    SER_BAUD    = 2_000_000

    SCL_PIN     = 14
    SDIO_PIN    = 12
    CS_AG_PIN   = 10
    CS_M_PIN    = 8
    INT_AG_PIN  = 9
    INT_M_PIN   = 11
    SCK_FREQ    = 5_000_000
' --

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    time    : "time"
    io      : "io"
    imu     : "sensor.imu.9dof.lsm9ds1.3wspi.spin2"
    int     : "string.integer"

VAR

    byte _ser_cog, _imu_cog

PUB Main()

    Setup()

    imu.MagDataRate(80_000)
    ser.HideCursor()

    repeat
        ser.Position (0, 3)
        AccelCalc()
        ser.Position (0, 4)
        GyroCalc()
        ser.Position (0, 5)
        MagCalc()
        ser.Position (0, 6)
        TempRaw()

        time.MSleep (10)

{
    repeat
        ser.Position (0, 3)
        AccelRaw
        ser.Position (0, 4)
        GyroRaw
        ser.Position (0, 5)
        MagRaw
        ser.Position (0, 6)
        TempRaw

        time.MSleep (10)
}

        case ser.RxCheck()
            27:
                quit
            "c", "C":
                Calibrate()

    ser.ShowCursor()
    FlashLED(LED, 100)

PUB Calibrate()

    ser.Position (0, 8)
    ser.Str(string("Calibrating..."))
    imu.CalibrateXLG()
    imu.CalibrateMag (10)
    ser.Position (0, 8)
    ser.Str(string("              "))

PUB AccelCalc() | ax, ay, az

    repeat until imu.AccelDataReady()
    imu.AccelG (@ax, @ay, @az)
    ser.printf("Accel:  %s", int.DecPadded (ax, 10)) 'Combining all 3 lines into one printf doesn't work;
    ser.printf(" %s", int.DecPadded (ay, 10))        'all values end up the same
    ser.printf(" %s", int.DecPadded (az, 10))

PUB GyroCalc() | gx, gy, gz

    repeat until imu.GyroDataReady()
    imu.GyroDPS (@gx, @gy, @gz)
    ser.printf("Gyro:   %s", int.DecPadded (gx, 10)) 'Combining all 3 lines into one printf doesn't work;
    ser.printf(" %s", int.DecPadded (gy, 10))        'all values end up the same
    ser.printf(" %s", int.DecPadded (gz, 10))

PUB MagCalc() | mx, my, mz

    repeat until imu.MagDataReady()
    imu.MagGauss (@mx, @my, @mz)
    ser.printf("Mag:    %s", int.DecPadded (mx, 10)) 'Combining all 3 lines into one printf doesn't work;
    ser.printf(" %s", int.DecPadded (my, 10))        'all values end up the same
    ser.printf(" %s", int.DecPadded (mz, 10))

PUB AccelRaw() | ax, ay, az

    repeat until imu.AccelDataReady()
    imu.AccelData (@ax, @ay, @az)
    ser.printf("Accel:  %s", int.DecPadded (ax, 7)) 'Combining all 3 lines into one printf doesn't work;
    ser.printf(" %s", int.DecPadded (ay, 7))        'all values end up the same
    ser.printf(" %s", int.DecPadded (az, 7))

PUB GyroRaw() | gx, gy, gz

    repeat until imu.GyroDataReady()
    imu.GyroData (@gx, @gy, @gz)
    ser.printf("Gyro:  %s", int.DecPadded (gx, 7)) 'Combining all 3 lines into one printf doesn't work;
    ser.printf(" %s", int.DecPadded (gy, 7))        'all values end up the same
    ser.printf(" %s", int.DecPadded (gz, 7))

PUB MagRaw() | mx, my, mz

    repeat until imu.MagDataReady()
    imu.MagData (@mx, @my, @mz)
    ser.printf("Mag:  %s", int.DecPadded (mx, 7)) 'Combining all 3 lines into one printf doesn't work;
    ser.printf(" %s", int.DecPadded (my, 7))        'all values end up the same
    ser.printf(" %s", int.DecPadded (mz, 7))

PUB TempRaw()

    ser.printf("Temperature: %s", int.DecPadded(imu.Temperature(), 7))

PUB Setup()

    repeat until _ser_cog := ser.StartRXTX (SER_RX, SER_TX, 0, SER_BAUD)
    ser.Clear()
    ser.printf("Serial terminal started\n")

    if _imu_cog := imu.Start (SCL_PIN, SDIO_PIN, CS_AG_PIN, CS_M_PIN, INT_AG_PIN, INT_M_PIN, SCK_FREQ)
        ser.printf("LSM9DS1 driver started\n")
    else
        ser.printf("LSM9DS1 driver failed to start- halting\n")
        FlashLED(LED, 500)

PUB waitkey(message)

    ser.Str (message)
    ser.CharIn()

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
