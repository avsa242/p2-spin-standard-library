{
    --------------------------------------------
    Filename: LSM9DS1-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the LSM9DS1 driver
    Copyright (c) 2020
    Started Nov 3, 2019
    Updated Jul 18, 2020
    See end of file for terms of use.
    --------------------------------------------
}
' Uncomment one of the following to choose which interface the LSM9DS1 is connected to
'#define LSM9DS1_I2C    NOT IMPLEMENTED YET
'#define LSM9DS1_SPI    NOT IMPLEMENTED YET
CON

     _xtlfreq   = cfg._xtlfreq
     _clkfreq   = cfg._clkfreq_def

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_RX      = cfg.SER_RX
    SER_TX      = cfg.SER_TX
    SER_BAUD    = 2_000_000

    SCL_PIN     = 32
    SDIO_PIN    = 33
    CS_AG_PIN   = 34
    CS_M_PIN    = 35
    INT_AG_PIN  = 24
    INT_M_PIN   = 25
    SCK_FREQ    = 5_000_000
' --

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    int     : "string.integer"
    imu     : "sensor.imu.9dof.lsm9ds1.3wspi"

VAR

    long _overruns
    byte _imu_cog

PUB Main() | dispmode, axo, ayo, azo, gxo, gyo, gzo

    Setup()
    imu.AccelScale(2)                                       ' 2, 4, 8, 16 (g's)
    imu.AccelAxisEnabled(%111)                              ' 0 or 1 for each bit (%xyz)

    imu.GyroScale(250)                                      ' 245, 500, 2000
    imu.GyroAxisEnabled(%111)                               ' 0 or 1 for each bit (%xyz)
    imu.GyroBias(0, 0, 0, imu#W)                            ' x, y, z: 0..65535, rw = 1 (write)

    imu.MagScale(4)                                         ' 4, 8, 12, 16
    imu.MagDataRate(80_000)

    ser.HideCursor()
    dispmode := 0

    gxo := gyo := gzo := 0
    axo := ayo := azo := 0
    ser.position(0, 3)                                      ' Read back the settings from above
    ser.printf("AccelScale: %d\n", imu.AccelScale())

    imu.AccelBias(@axo, @ayo, @azo)                       ' lsm9ds1 Accel has some factory trim accel offsets
    ser.printf("AccelBias: %d(x), %d(y), %d(z)\n", axo, ayo, azo)

    ser.printf("GyroScale: %d\n", imu.GyroScale())
    imu.GyroBias(@gxo, @gyo, @gzo)
    ser.printf("GyroBias: %d(x), %d(y), %d(z)\n", gxo, gyo, gzo)

    ser.printf("MagScale: %d\n", imu.MagScale())

    ser.newline()

    repeat
        case ser.RxCheck()
            "q", "Q":                                       ' Quit the demo
                ser.Position(0, 15)
                ser.printf("Halting")
                imu.Stop()
                waitms(5)
                quit
            "c", "C":                                       ' Perform calibration
                Calibrate()
            "r", "R":                                       ' Change display mode: raw/calculated
                ser.Position(0, 10)
                repeat 2
                    ser.ClearLine(ser.CLR_CUR_TO_END)
                    ser.Newline()
                dispmode ^= 1

        ser.Position (0, 10)
        case dispmode
            0:
                AccelRaw()
                GyroRaw()
                MagRaw()
            1:
                AccelCalc()
                GyroCalc()
                MagCalc()

        ser.position (0, 15)
        ser.printf("Interrupt: ")
        ser.bin(imu.Interrupt(), 8)

    ser.ShowCursor()
    FlashLED(LED, 100)

PUB AccelCalc() | ax, ay, az

    repeat until imu.AccelDataReady()
    imu.AccelG (@ax, @ay, @az)
    ser.printf("Accel micro-g: ")
    ser.Str (int.DecPadded (ax, 10))
    ser.Str (int.DecPadded (ay, 10))
    ser.Str (int.DecPadded (az, 10))
    ser.clearline(ser.CLR_CUR_TO_END)
    ser.Newline()

PUB AccelRaw() | ax, ay, az

    repeat until imu.AccelDataReady()
    imu.AccelData (@ax, @ay, @az)
    ser.printf("Accel raw: ")
    ser.Str (int.DecPadded (ax, 7))
    ser.Str (int.DecPadded (ay, 7))
    ser.Str (int.DecPadded (az, 7))
    ser.clearline(ser.CLR_CUR_TO_END)
    ser.Newline()

PUB GyroCalc() | gx, gy, gz

    repeat until imu.GyroDataReady()
    imu.GyroDPS (@gx, @gy, @gz)
    ser.printf("Gyro micro DPS:  ")
    ser.Str (int.DecPadded (gx, 11))
    ser.Str (int.DecPadded (gy, 11))
    ser.Str (int.DecPadded (gz, 11))
    ser.clearline(ser.CLR_CUR_TO_END)
    ser.newline()

PUB GyroRaw() | gx, gy, gz

    repeat until imu.GyroDataReady()
    imu.GyroData (@gx, @gy, @gz)
    ser.printf("Gyro raw:  ")
    ser.Str (int.DecPadded (gx, 7))
    ser.Str (int.DecPadded (gy, 7))
    ser.Str (int.DecPadded (gz, 7))
    ser.clearline(ser.CLR_CUR_TO_END)
    ser.newline()

PUB MagCalc() | mx, my, mz

    repeat until imu.MagDataReady()
    imu.MagGauss (@mx, @my, @mz)
    ser.printf("Mag nano T:   ")
    ser.Str (int.DecPadded (mx, 10))
    ser.Str (int.DecPadded (my, 10))
    ser.Str (int.DecPadded (mz, 10))
    ser.clearline(ser.CLR_CUR_TO_END)
    ser.newline()

PUB MagRaw() | mx, my, mz

    repeat until imu.MagDataReady()
    imu.MagData (@mx, @my, @mz)
    ser.printf("Mag raw:  ")
    ser.Str (int.DecPadded (mx, 7))
    ser.Str (int.DecPadded (my, 7))
    ser.Str (int.DecPadded (mz, 7))
    ser.clearline(ser.CLR_CUR_TO_END)
    ser.newline()

PUB Calibrate()

    ser.Position (0, 14)
    ser.printf("Calibrating...")
    imu.CalibrateXLG()
    imu.CalibrateMag (10)
    ser.Position (0, 14)
    ser.printf("              ")

PUB Setup()

    repeat until ser.StartRXTX (SER_RX, SER_TX, 0, SER_BAUD)
    waitms(30)
    ser.Clear()
    ser.printf("Serial terminal started\n")

    if _imu_cog := imu.Start (SCL_PIN, SDIO_PIN, CS_AG_PIN, CS_M_PIN, INT_AG_PIN, INT_M_PIN, SCK_FREQ)
        ser.printf("LSM9DS1 driver started\n")
    else
        ser.printf("LSM9DS1 driver failed to start- halting\n")
        FlashLED(LED, 500)

        imu.Stop()
        waitms(5)
        FlashLED(LED, 500)

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
