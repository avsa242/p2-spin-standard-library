{
    --------------------------------------------
    Filename: LSM9DS1-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the LSM9DS1 driver (P2 version)
    Copyright (c) 2022
    Started Aug 12, 2017
    Updated May 14, 2022
    See end of file for terms of use.
    --------------------------------------------
}
CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

' I2C configuration
    I2C_SCL     = 10
    I2C_SDA     = 11
    I2C_HZ      = 400_000                       ' 400_000 max

' SPI configuration

    SPI_CS_AG   = 8
    SPI_CS_M    = 9
    SPI_SCL     = 10
    SPI_SDA     = 11                            ' define these both the same
    SPI_SDO     = 12                            ' to use 3-wire SPI
' --

    DAT_X_COL   = 20
    DAT_Y_COL   = DAT_X_COL + 15
    DAT_Z_COL   = DAT_Y_COL + 15

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    int     : "string.integer"
    imu     : "sensor.imu.9dof.lsm9ds1"

PUB Main()

    setup()
    imu.preset_active()                         ' default settings, but enable
                                                ' reading mag through same bus
                                                ' as accel and gyro, and set
                                                ' scale factor for all three
    repeat
        ser.position(0, 3)
        accelcalc()
        gyrocalc()
        magcalc()

        if ser.rxcheck() == "c"                 ' press the 'c' key in the demo
            calibrate()                         ' to calibrate sensor offsets

PUB AccelCalc() | ax, ay, az

    repeat until imu.acceldataready()           ' wait for new sensor data set
    imu.accelg(@ax, @ay, @az)                   ' read calculated sensor data
    ser.str(string("Accel (g):"))
    ser.positionx(DAT_X_COL)
    decimal(ax, 1000000)                        ' data is in micro-g's; display
    ser.positionx(DAT_Y_COL)                    ' it as if it were a float
    decimal(ay, 1000000)
    ser.positionx(DAT_Z_COL)
    decimal(az, 1000000)
    ser.clearline()
    ser.newline()

PUB GyroCalc() | gx, gy, gz

    repeat until imu.gyrodataready()
    imu.gyrodps(@gx, @gy, @gz)
    ser.str(string("Gyro (dps):"))
    ser.positionx(DAT_X_COL)
    decimal(gx, 1000000)
    ser.positionx(DAT_Y_COL)
    decimal(gy, 1000000)
    ser.positionx(DAT_Z_COL)
    decimal(gz, 1000000)
    ser.clearline()
    ser.newline()

PUB MagCalc() | mx, my, mz

    repeat until imu.magdataready()
    imu.maggauss(@mx, @my, @mz)
    ser.str(string("Mag (gauss):"))
    ser.positionx(DAT_X_COL)
    decimal(mx, 1000)
    ser.positionx(DAT_Y_COL)
    decimal(my, 1000)
    ser.positionx(DAT_Z_COL)
    decimal(mz, 1000)
    ser.clearline()
    ser.newline()

PUB Calibrate()

    ser.position(0, 7)
    ser.str(string("Calibrating..."))
    imu.calibratemag()
    imu.calibrateaccel()
    imu.calibrategyro()
    ser.positionx(0)
    ser.clearline()

PRI Decimal(scaled, divisor) | whole[4], part[4], places, tmp, sign
' Display a scaled up number as a decimal
'   Scale it back down by divisor (e.g., 10, 100, 1000, etc)
    whole := scaled / divisor
    tmp := divisor
    places := 0
    part := 0
    sign := 0
    if scaled < 0
        sign := "-"
    else
        sign := " "

    repeat
        tmp /= 10
        places++
    until tmp == 1
    scaled //= divisor
    part := int.deczeroed(abs(scaled), places)

    ser.char(sign)
    ser.dec(abs(whole))
    ser.char(".")
    ser.str(part)
    ser.chars(" ", 5)

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(string("Serial terminal started"))
#ifdef LSM9DS1_I2C
    if imu.startx(I2C_SCL, I2C_SDA, I2C_HZ)
        ser.strln(string("LSM9DS1 driver started (I2C)"))
#elseifdef LSM9DS1_SPI
    if imu.startx(SPI_CS_AG, SPI_CS_M, SPI_SCL, SPI_SDA, SPI_SDO)
        ser.strln(string("LSM9DS1 driver started (SPI)"))
#endif
    else
        ser.strln(string("LSM9DS1 driver failed to start - halting"))
        repeat

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
