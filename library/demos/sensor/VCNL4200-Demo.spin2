{
    --------------------------------------------
    Filename: VCNL4200-Demo.spin2
    Author: Jesse Burt
    Description: Demo of the VCNL4200 driver
        (P2 version)
    Copyright (c) 2022
    Started Feb 07, 2021
    Updated Jul 10, 2022
    See end of file for terms of use.
    --------------------------------------------
}
#include "core.con.click.spin2"

CON

    _clkfreq    = cfg._clkfreq_def
    _xtlfreq    = cfg._xtlfreq

' -- User-defined constants
    SER_BAUD    = 2_000_000
    LED         = cfg.LED1

    { I2C configuration }
    { custom I/O pin definitions - uncomment the below, and comment out the #include
        line above to use }
'    SCL_PIN     = 28
'    SDA_PIN     = 29
    CLICK_BASE  = 0                             ' basepin for Click adapter
    I2C_FREQ    = 400_000                       ' max is 400_000
' --

    DAT_COL     = 20

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    time    : "time"
    int     : "string.integer"
    vcnl    : "sensor.light.vcnl4200"

PUB Main()

    setup()
'    ser.hex(vcnl.deviceid, 8)
 '   repeat
    vcnl.preset_als_prox()                      ' set to combined ALS and prox.
                                                ' sensor operating mode

    repeat
        ser.position(0, 3)
        ser.str(@"Lux: ")
        ser.positionx(DAT_COL)
        decimal(vcnl.lux(), 1000)
        ser.clearline()
        ser.newline()

        ser.str(@"White ADC: ")
        ser.positionx(DAT_COL)
        ser.hex(vcnl.whitedata(), 4)
        ser.newline()

        ser.str(@"Proximity ADC: ")
        ser.positionx(DAT_COL)
        ser.hex(vcnl.proxdata(), 4)

PRI Decimal(scaled, divisor) | whole[4], part[4], places, tmp, sign
' Display a scaled up number as a decimal
'   Scale it back down by divisor (e.g., 10, 100, 1000, etc)
    whole := scaled / divisor
    tmp := divisor
    places := 0
    part := 0
    sign := 0
    if scaled < 0
        sign := "-"
    else
        sign := " "

    repeat
        tmp /= 10
        places++
    until tmp == 1
    scaled //= divisor
    part := int.deczeroed(abs(scaled), places)

    ser.char(sign)
    ser.dec(abs(whole))
    ser.char(".")
    ser.str(part)

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(@"Serial terminal started")

    if vcnl.startx(SCL_PIN, SDA_PIN, I2C_FREQ)
        ser.strln(@"VCNL4200 driver started")
    else
        ser.strln(@"VCNL4200 driver failed to start - halting")
        repeat

DAT
{
TERMS OF USE: MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
}

