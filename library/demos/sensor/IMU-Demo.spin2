{
    --------------------------------------------
    Filename: IMU-Demo.spin2
    Author: Jesse Burt
    Description: IMU/Motion sensor data display demo
    Copyright (c) 2022
    Started Jul 18, 2020
    Updated Jul 10, 2022
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _xtlfreq    = cfg._xtlfreq
    _clkfreq    = cfg._clkfreq_def

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

#ifdef ICM20649_I2C
    SCL_PIN     = 0
    SDA_PIN     = 1
    ADDR_BITS   = 0                             ' optional: 0, 1
    I2C_HZ      = 400_000                       ' max: 400_000
#endif

#ifdef ICM20649_SPI
    CS_PIN      = 2
    SCK_PIN     = 3
    MOSI_PIN    = 4
    MISO_PIN    = 5
    SCK_HZ      = 7_000_000                     ' max: 7_000_000
#endif

#ifdef LSM303DLHC_I2C
' LSM303DLHC (I2C)
    SCL_PIN     = 26
    SDA_PIN     = 27
    SCL_HZ      = 400_000
    SLAVE_OPT   = 0
#endif

#ifdef LSM9DS1_SPI
' LSM9DS1
    CS_AG_PIN   = 24
    CS_M_PIN    = 25
    SCL_PIN     = 26
    SDIO_PIN    = 27
    SCL_HZ      = 10_000_000
#endif

#ifdef MPU9250_I2C
' MPU9250 (I2C)
    SCL_PIN     = 0
    SDA_PIN     = 1
    SCL_HZ      = 400_000
#endif
' --

    DATA_X_COL  = 20
    DATA_Y_COL  = DATA_X_COL+12
    DATA_Z_COL  = DATA_Y_COL+12
    DATA_OVR_COL= DATA_Z_COL+12

    ACCEL_YS    = 3
    GYRO_YS     = 6
    MAG_YS      = 9

    RAW         = 0
    CALC        = 1

OBJ

    cfg     : "boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    int     : "string.integer"
#ifdef ICM20649_SPI
    imu     : "sensor.imu.6dof.icm20649"
#elseifdef ICM20649_I2C
    imu     : "sensor.imu.6dof.icm20649"
#elseifdef LSM303DLHC_I2C
   imu     : "sensor.imu.6dof.lsm303dlhc"
#elseifdef LSM9DS1_SPI
    imu     : "sensor.imu.9dof.lsm9ds1"
#elseifdef MPU9250_I2C
    imu     : "sensor.imu.9dof.mpu9250"
#else
#error "One, and only one sensor must be defined"
#endif

VAR

    long _a_overruns, _g_overruns, _m_overruns
    byte _dispmode

PUB Main()

    setup()

    updatesettings()
    ser.hidecursor()
    _dispmode := 0

    displaysettings()

    repeat
        case ser.rxcheck()
            "q", "Q":                           ' Quit the demo
                ser.position(0, 15)
                ser.strln(@"Halting")
                imu.stop()
                waitms(5)
                quit
            "c", "C":                           ' Perform calibration
                calibrate()
                displaysettings()
            "r", "R":                           ' Change display mode: raw/calculated
                _dispmode ^= 1
                displaysettings()

        ser.position (DATA_X_COL, 15)
        ser.char("X")
        ser.position (DATA_Y_COL, 15)
        ser.char("Y")
        ser.position (DATA_Z_COL, 15)
        ser.char("Z")
        ser.position (DATA_OVR_COL, 15)
        ser.str(@"Overruns:")
        ser.newline()

        case _dispmode
            RAW:
                if imu.ACCEL_DOF > 0
                    accelraw()
                if imu.GYRO_DOF > 0
                    gyroraw()
                if imu.MAG_DOF > 0
                    magraw()
            CALC:
                if imu.ACCEL_DOF > 0
                    accelcalc()
                if imu.GYRO_DOF > 0    
                    gyrocalc()
                if imu.MAG_DOF > 0
                    magcalc()

    ser.showcursor()
    repeat

PUB AccelCalc() | ax, ay, az

    repeat until imu.acceldataready()
    imu.accelg(@ax, @ay, @az)
    if imu.acceldataoverrun()
        _a_overruns++
    ser.str(@"Accel:")

    ser.positionx(DATA_X_COL)
    decimaldot(ax, 1000000)

    ser.positionx(DATA_Y_COL)
    decimaldot(ay, 1000000)

    ser.positionx(DATA_Z_COL)
    decimaldot(az, 1000000)

    ser.positionx(DATA_OVR_COL)
    ser.dec(_a_overruns)
    ser.newline()

PUB AccelRaw() | ax, ay, az

    repeat until imu.acceldataready()
    imu.acceldata(@ax, @ay, @az)
    if imu.acceldataoverrun()
        _a_overruns++
    ser.str(@"Accel:")

    ser.positionx(DATA_X_COL)
    ser.str(int.decpadded(ax, 9))

    ser.positionx(DATA_Y_COL)
    ser.str(int.decpadded(ay, 9))

    ser.positionx(DATA_Z_COL)
    ser.str(int.decpadded(az, 9))

    ser.positionx(DATA_OVR_COL)
    ser.dec(_a_overruns)
    ser.newline()

PUB GyroCalc() | gx, gy, gz

    repeat until imu.gyrodataready()
    imu.gyrodps (@gx, @gy, @gz)
    if imu.gyrodataoverrun()
        _g_overruns++
    ser.str(@"Gyro:  ")

    ser.positionx(DATA_X_COL)
    decimaldot(gx, 1000000)

    ser.positionx(DATA_Y_COL)
    decimaldot(gy, 1000000)

    ser.positionx(DATA_Z_COL)
    decimaldot(gz, 1000000)

    ser.positionx(DATA_OVR_COL)
    ser.dec(_g_overruns)
    ser.newline()

PUB GyroRaw() | gx, gy, gz

    repeat until imu.gyrodataready()
    imu.gyrodata(@gx, @gy, @gz)
    if imu.gyrodataoverrun()
        _g_overruns++
    ser.str(@"Gyro:")

    ser.positionx(DATA_X_COL)
    ser.str(int.decpadded(gx, 9))

    ser.positionx(DATA_Y_COL)
    ser.str(int.decpadded(gy, 9))

    ser.positionx(DATA_Z_COL)
    ser.str(int.decpadded(gz, 9))

    ser.positionx(DATA_OVR_COL)
    ser.dec(_g_overruns)
    ser.newline()

PUB MagCalc() | mx, my, mz

    repeat until imu.magdataready()
    imu.maggauss(@mx, @my, @mz)
    if imu.magdataoverrun()
        _m_overruns++
    ser.str(@"Mag:")

    ser.positionx(DATA_X_COL)
    decimaldot(mx, 1000000)

    ser.positionx(DATA_Y_COL)
    decimaldot(my, 1000000)

    ser.positionx(DATA_Z_COL)
    decimaldot(mz, 1000000)

    ser.positionx(DATA_OVR_COL)
    ser.dec(_m_overruns)
    ser.newline()

PUB MagRaw() | mx, my, mz

    repeat until imu.magdataready()
    imu.magdata(@mx, @my, @mz)
    if imu.magdataoverrun()
        _m_overruns++
    ser.str(@"Mag:")

    ser.positionx(DATA_X_COL)
    ser.str(int.decpadded(mx, 9))

    ser.positionx(DATA_Y_COL)
    ser.str(int.decpadded(my, 9))

    ser.positionx(DATA_Z_COL)
    ser.str(int.decpadded(mz, 9))

    ser.positionx(DATA_OVR_COL)
    ser.dec(_m_overruns)
    ser.newline()

PUB Calibrate()

    ser.position(0, 14)
    ser.str(@"Calibrating...")
    if (imu.ACCEL_DOF > 0)
        imu.calibrateaccel()
    if (imu.GYRO_DOF > 0)
        imu.calibrategyro()
    if (imu.MAG_DOF > 0)
        imu.calibratemag()
    ser.positionx(0)
    ser.clearline()

PUB DecimalDot(scaled, divisor) | whole[4], part[4], places, tmp, sign
' Display a scaled up number in its natural form - scale it back down by divisor
    whole := scaled / divisor
    tmp := divisor
    places := 0
    part := 0
    sign := 0
    if scaled < 0
        sign := -1

    repeat
        tmp /= 10
        places++
    until tmp == 1
    scaled //= divisor
    part := int.deczeroed(abs(scaled), places)

    if sign
        ser.char("-")
    else
        ser.char(" ")
    ser.dec(abs(whole))
    ser.char(".")
    ser.str(part)
    ser.str(@"  ")

PUB DisplaySettings() | axo, ayo, azo, gxo, gyo, gzo, mxo, myo, mzo
' Read back and display the settings
    gxo := gyo := gzo := 0
    axo := ayo := azo := 0
    mxo := myo := mzo := 0

    if imu.ACCEL_DOF > 0
        ser.position(0, ACCEL_YS)
        ser.strln(@"AccelScale:")
        ser.strln(@"AccelDataRate:")
        ser.strln(@"AccelBias:")
        imu.accelbias(@axo, @ayo, @azo)

        ser.position(DATA_X_COL, 3)
        ser.printf(@"%dg\n", imu.accelscale())
        ser.positionx(DATA_X_COL)
        ser.printf(@"%dHz\n", imu.acceldatarate())
        ser.positionx(DATA_X_COL)
        ser.printf(@"%d(x), %d(y), %d(z)     \n", axo, ayo, azo)

    if imu.GYRO_DOF > 0
        ser.position(0, GYRO_YS)
        ser.strln(@"GyroScale:")
        ser.strln(@"GyroDataRate:")
        ser.strln(@"GyroBias:")
        imu.gyrobias(@gxo, @gyo, @gzo)

        ser.position(DATA_X_COL, 6)
        ser.printf(@"%ddps\n", imu.gyroscale())
        ser.positionx(DATA_X_COL)
        ser.printf(@"%dHz\n", imu.gyrodatarate())
        ser.positionx(DATA_X_COL)
        ser.printf(@"%d(x), %d(y), %d(z)     \n", gxo, gyo, gzo)

    if imu.MAG_DOF > 0
        ser.position(0, MAG_YS)
        ser.strln(@"MagScale:")
        ser.strln(@"MagDataRate:")
        ser.strln(@"MagBias:")
        imu.magbias(@mxo, @myo, @mzo)

        ser.position(DATA_X_COL, 9)
        ser.printf(@"%d.%dGs\n", imu.magscale()/10, imu.magscale()//10)
        ser.positionx(DATA_X_COL)
        ser.printf(@"%dHz\n", imu.magdatarate())
        ser.positionx(DATA_X_COL)
        ser.printf(@"%d(x), %d(y), %d(z)     \n", mxo, myo, mzo)

    ser.position(0, 15)
    ser.str(lookupz(_dispmode: @"Raw       ", @"Calculated"))

PUB UpdateSettings()

    if imu.ACCEL_DOF > 0
        imu.acceldatarate(1600)
'       AccelDataRate(Hz)
'       ADXL345:    0_10, 0_20, 0_39, 0_78, 1_56, 3_13, 6_25, 12_5, 25, 50, 100, 200, 400, 800, 1600, 3200
'       LIS3DH:     0, 1, 10, 25, 50, 100, 200, 400, 1344, 1600
'       LSM9DS1:    0, 14, 59, 119, 238, 476, 952 (locked together with GyroDataRate() - chip limitation)
'       LSM303DLHC: 0, 1, 10, 25, 50, 100, 200, 400, 1620, 1344, 5376
'       MPU9250:    4..1000

        imu.accelscale(2)
'       AccelScale(g's)
'       LSM9DS1:    2, 4, 8, 16
'       LSM303DLHC: 2, 4, 8, 16
'       MPU9250:    2, 4, 8, 16

        imu.accelaxisenabled(%111)
'       All: 0 or 1 for each bit (%xyz)

'        imu.accelbias(0, 0, 0, imu.W)                      ' *Don't use this with MPU9250
'       AccelBias(x_adc_cnts, y_adc_cnts, z_adc_cnts) - Manually set corrective bias/offsets
'       x, y, z (-32768..32767), rw = 1 (write)

    if imu.GYRO_DOF > 0
        imu.gyroscale(245)
'       GyroScale(deg/sec)
'       L3GD20H:    245, 500, 2000
'       LSM9DS1:    245, 500, 2000
'       MPU9250:    250, 500, 1000, 2000

        imu.gyrodatarate(800)
'       GyroDataRate(Hz)
'       L3GD20H:    100, 200, 400, 800
'       LSM9DS1:    0, 14, 59, 119, 238, 476, 952 (locked together with AccelDataRate() - chip limitation)
'       MPU9250:    4..1000
        imu.gyroaxisenabled(%111)
'       All: 0 or 1 for each bit (%xyz)

        imu.gyrobias(0, 0, 0, imu.W)
'       gyrobias(x_adc_cnts, y_adc_cnts, z_adc_cnts) - Manually set corrective bias/offsets
'       x, y, z (-32768..32767), rw = 1 (write)

    if imu.MAG_DOF > 0
        imu.magscale(4)
'       MagScale(Gauss)
'       LSM9DS1:    4, 8, 12, 16
'       LSM303DLHC: 1_3 (1.3), 1_9 (1.9), 2_5 (2.5), 4_0 (4.0), 4_7 (4.7), 5_6 (5.6), 8_1 (8.1)
'       MPU9250:    14, 16 (exception: bits)

        imu.magdatarate(80_000)
'       MagDataRate(milli-Hz)
'       LSM9DS1:    0_625, 1_250, 2_500, 5_000, 10_000, 20_000, 40_000, 80_000
'       LSM303DLHC: 0 (0.75), 1 (1.5), 3, 7 (7.5), 15, 30, 75, 220
'       MPU9250:    8, 100

        imu.magbias(0, 0, 0, imu.W)
'       magbias(x_adc_cnts, y_adc_cnts, z_adc_cnts) - Manually set corrective bias/offsets

PUB Setup()

    ser.start(SER_BAUD)
    waitms(30)
    ser.clear()
    ser.strln(@"Serial terminal started")

#ifdef ICM20649_SPI
    if imu.startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SCK_HZ)
        ser.strln(@"ICM20649 driver started (SPI)")
        imu.preset_active()
    else
        ser.str(@"ICM20649 driver failed to start - halting")
        imu.stop()
        waitms(5)
        repeat
#elseifdef ICM20649_I2C
    if imu.startx(SCL_PIN, SDA_PIN, I2C_HZ, ADDR_BITS)
        ser.strln(@"ICM20649 driver started (I2C)")
        imu.preset_active()
    else
        ser.str(@"ICM20649 driver failed to start - halting")
        repeat
#elseifdef LSM303DLHC_I2C
    if imu.startx(SCL_PIN, SDA_PIN, SCL_HZ)
        imu.preset_active()
        ser.strln(@"LSM303DLHC driver started (I2C)")
    else
        ser.strln(@"LSM303DLHC driver failed to start - halting")
        repeat
#elseifdef LSM9DS1_SPI
    if imu.startx(CS_AG_PIN, CS_M_PIN, SCL_PIN, SDIO_PIN, SCL_HZ)
        imu.preset_active()
        ser.strln(@"LSM9DS1 driver started (SPI)")
    else
        ser.strln(@"LSM9DS1 driver failed to start- halting")
        repeat
#elseifdef MPU9250_I2C
    if imu.startx(SCL_PIN, SDA_PIN, SCL_HZ)
        imu.preset_xl_g_m()
        ser.strln(@"MPU9250 driver started (I2C)")
    else
        ser.strln(@"MPU9250 driver failed to start - halting")
        repeat
#endif

DAT
{
TERMS OF USE: MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
}

