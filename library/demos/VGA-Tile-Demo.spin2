''
'' clock frequency settings
'' for 640x480 we use a 25 MHz pixel clock
'' for 800x600 we use a 40 MHz pixel clock
'' for 1024x768 we use a 65 MHz pixel clock
''
'' for best results the system clock should be a multiple of
'' the pixel clock
''
'' 200 MHz is a convenient one for many purposes, and
'' is only a slight overclocking
''
CON

    _XTALFREQ       = 20_000_000                                    ' crystal frequency
    _XDIV           = 1                                             ' crystal divider to give 1MHz
    _XMUL           = 10                                            ' crystal / div * mul
    _XDIVP          = 1                                             ' crystal / div * mul /divp to give _CLKFREQ (1,2,4..30)
    _XOSC           = %10                                   'OSC    ' %00=OFF, %01=OSC, %10=15pF, %11=30pF
    _XSEL           = %11                                   'XI+PLL ' %00=rcfast(20+MHz), %01=rcslow(~20KHz), %10=XI(5ms), %11=XI+PLL(10ms)
    _XPPPP          = ((_XDIVP>>1) + 15) & $F                       ' 1->15, 2->0, 4->1, 6->2...30->14
    _CLOCKFREQ      = _XTALFREQ / _XDIV * _XMUL / _XDIVP            ' internal clock frequency
    _SETFREQ        = 1<<24 + (_XDIV-1)<<18 + (_XMUL-1)<<8 + _XPPPP<<4 + _XOSC<<2  ' %0000_000e_dddddd_mmmmmmmmmm_pppp_cc_00  ' setup  oscillator

    PIXSHIFT        = 31
    sys_clock_freq  = _CLOCKFREQ
    sys_clock_mode  = _SETFREQ

    LED             = cfg#LED1
    SER_RX          = cfg#SER_RX
    SER_TX          = cfg#SER_TX
    SER_BAUD        = 2_000_000
    VGA_PINBASE     = 40

DAT

    democolors
        long $FF000000, $FFFF0000, $00FF0000, $00FFFF00
        long $0000FF00, $FF00FF00, $FFFFFF00, $00000000
        long $7F000000, $007F7F00, $007F0000

VAR

    long _params[40] ' parameters for running the VGA tile driver
    long _screen_buffer[vgatimings#ROWS * vgatimings#COLS * (vgatimings#CELL_SIZE/4)]

OBJ

    cfg         : "core.con.boardcfg.p2eval"
    vga         : "display.vga.tile"
    ser         : "com.serial.terminal.ansi"
    time        : "time"

' Uncomment one of the below for the specified video mode
'    vgatimings  : "core.con.vga.640x480"
'    vgatimings  : "core.con.vga.800x600"
    vgatimings  : "core.con.vga.1024x768"

DAT

    orgh
'
' font buffer
'
    long
    fontdata
        file "font.8x16.unscii.bin"

PUB Main

    Setup

    Demo_FillText
    Demo_RunText

PUB Demo_FillText | x, y, fgcol, bgcol, ch, grey, col1, col2, idx

    ch := 0

    repeat y from 0 to vgatimings#ROWS-1
        grey := y<<3
        bgcol := (grey<<24) | (grey<<16) | (grey<<8)
        repeat x from 0 to vgatimings#COLS-1
            grey := (x & 15)
            idx := x / 16
            col1 := democolors[idx]
            col2 := democolors[idx+1]
            fgcol := colorblend(col1, col2, (grey<<4) + grey)
            vga.glyphat(x, y, ch++, fixupcol(fgcol), fixupcol(bgcol), $20)

    time.MSleep(10000)

PUB Demo_RunText | n

    vga.str(string(27, "[1;1H"))
    vga.str(string(27, "[0J"))

    n := 0
    repeat
        vga.newline
        vga.str(string("Hello! ", 27, "[BCursor down"))
        vga.str(string(27, "[31mRed text "))
        vga.str(string(27, "[1;31mBright Red text"))
        vga.str(string(27, "[7mInverse "))
        vga.str(string(27, "[22;31mBold off "))
        vga.str(string(27, "[4mUnderline", 27, "[24m"))
        vga.str(string(27, "[9mStrikethru"))
        vga.str(string(27, "[0mEffects off "))
        vga.dec(n)
        n++
        time.MSleep(100)

PUB Setup | i, pclkscale, pclk, sysclk, x

    clkset(sys_clock_mode, sys_clock_freq)  ' 20 MHz crystal * 8
    ser.startrxtx(SER_RX, SER_TX, 0, SER_BAUD)
    ser.printf("VGA text demo\n")

    pclk := vgatimings#PIX_CLKFREQ ' pixel clock
    sysclk := clkfreq  ' system clock
    ' calculate scale := $8000_0000 * pclk / sysclk
    ' this is equal to pclk / (sysclk / $8000_000)
    pclkscale := calcscale(pclk, sysclk)

    i := 0
    _params[i++] := VGA_PINBASE
    _params[i++] := @_screen_buffer ' screen buffer
    _params[i++] := vgatimings#COLS           ' screen columns
    _params[i++] := vgatimings#ROWS           ' screen rows
    _params[i++] := @fontdata  ' font data
    _params[i++] := 8      ' font width
    _params[i++] := vgatimings#FONT_HEIGHT    ' font height
    _params[i++] := pclkscale 'fset           ' pixel clock scaling value
    _params[i++] := vgatimings#H_FP             ' horizontal front porch
    _params[i++] := vgatimings#HSYNC             ' hsync pulse
    _params[i++] := vgatimings#H_BP             ' horizontal back porch
    _params[i++] := vgatimings#V_FP             ' vertical front porch
    _params[i++] := vgatimings#VSYNC_LINES              ' vertical sync lines
    _params[i++] := vgatimings#V_BP             ' vertical back porch
    _params[i++] := vgatimings#POLARITY            ' vertical/horizontal polarity
    _params[i++] := vgatimings#CELL_SIZE

    ' start up the VGA driver
    vga.start(VGA_PINBASE, @_params, @_screen_buffer)
    ser.printf("VGA driver started\n")

PUB colorblend(a, b, mix)

    asm
        setpiv mix
        blnpix a, b
    endasm

    return a

PUB fixupcol(a) | r, g, b, x

    b := (a>>8) & $FF
    g := (a>>16) & $FF
    r := a>>24
    x := vga.getrgbcolor(r, g, b)
    'ser.printf("fixupcol(%x, %x, %x) -> %x\n", r, g, b, x)
    return x

PRI calcscale(a, b) | shiftcnt

    shiftcnt := PIXSHIFT
' remove factors of 5 (will be pretty common)
    repeat while 0 == (a // 5) and 0 == (b // 5)
        a := a / 5
        b := b / 5

' scale a up as much as we can
    repeat while ((a & $4000_0000) == 0) and shiftcnt > 0
        a := a << 1
        shiftcnt--

    repeat while ((b & 1) == 0) and shiftcnt > 0
        b := b>>1
        shiftcnt--
    return (a / b) << shiftcnt

