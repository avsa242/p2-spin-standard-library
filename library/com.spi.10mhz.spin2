{
    --------------------------------------------
    Filename: com.spi.10mhz.spin2
    Description: SPI engine (bit-banged) for the Propeller 2
    Author: Jesse Burt
    Created: Nov 9, 2019
    Updated: Dec 29, 2022
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is based on SPI_Spin.spin, by Beau Schwabe.
}

VAR

    long _SCK, _MOSI, _MISO, _clk_delay
    long _cog

PUB null()
' This is not a top-level object

PUB init(SCK, MOSI, MISO, SPI_MODE=0, SCK_HZ=1_000_000): status
' Initialize SPI engine using custom pins
'   SCK, MOSI, MISO: 0..63 (each unique)
'   SCK_HZ: 1..*TBD*
'   SPI_MODE: 0..3
'       0: CPOL 0, CPHA 0
'           SCK idles low
'           MISO shifted in on rising clock pulse
'           MOSI shifted out on falling clock pulse
'       1: CPOL 0, CPHA 1
'           SCK idles low
'           MISO shifted in on falling clock pulse
'           MOSI shifted out on rising clock pulse
'       2: CPOL 1, CPHA 0
'           SCK idles high
'           MISO shifted in on falling clock pulse
'           MOSI shifted out on rising clock pulse
'       3: CPOL 1, CPHA 1
'           SCK idles high
'           MISO shifted in on rising clock pulse
'           MOSI shifted out on falling clock pulse
'   NOTE: CS must be handled by the parent object
    longmove(@_SCK, @SCK, 3)                    ' copy pins to hub vars
    mode(SPI_MODE)                              ' set SPI mode

    pinl(MOSI)                                  ' ensure MOSI is an output
    pinf(MISO)                                  ' and MISO is an input
    _clk_delay := ((clkfreq / SCK_HZ) / 2) #> 2 ' calculate SPI clock period
    status := _cog := cogid() + 1               ' return current cogid + 1

PUB deinit()
' Deinitialize
'   Float I/O pins, clear out hub vars
    pinf(_SCK)
    pinf(_MOSI)
    pinf(_MISO)
    longfill(@_SCK, 0, 7)

PUB rdbits_lsbf(nr_bits): val | SCK, MOSI, MISO, clk_delay, b
' Read arbitrary number of bits from SPI bus, least-significant byte first
'   nr_bits: 1 to 32
    ifnot (lookdown(nr_bits: 1..32))            ' reject invalid # bits
        return
    longmove(@SCK, @_SCK, 4)
    val := 0
    pinf(MISO)
    case _spi_mode
        0, 2:
            repeat b from 0 to (nr_bits-1)
                val.[b] := pinr(MISO)
                pint(SCK)
                waitx(clk_delay)
                pint(SCK)
                waitx(clk_delay)
        1, 3:
            repeat b from 0 to (nr_bits-1)
                waitx(clk_delay)
                pint(SCK)
                val.[b] := pinr(MISO)
                waitx(clk_delay)
                pint(SCK)

PUB rdbits_msbf(nr_bits): val | SCK, MOSI, MISO, clk_delay, b
' Read arbitrary number of bits from SPI bus, most-significant byte first
'   nr_bits: 1 to 32
    ifnot (lookdown(nr_bits: 1..32))            ' reject invalid # bits
        return
    longmove(@SCK, @_SCK, 4)
    val := 0
    pinf(MISO)
    case _spi_mode
        0, 2:
            repeat b from (nr_bits-1) to 0
                val.[b] := pinr(MISO)
                pint(SCK)
                waitx(clk_delay)
                pint(SCK)
                waitx(clk_delay)
        1, 3:
            repeat b from (nr_bits-1) to 0
                waitx(clk_delay)
                pint(SCK)
                val.[b] := pinr(MISO)
                waitx(clk_delay)
                pint(SCK)

PUB rdblock_lsbf(ptr_buff, nr_bytes) | SCK, MOSI, MISO, clk_delay, b_num, tmp
' Read block of data from SPI bus, least-significant byte first
    longmove(@SCK, @_SCK, 4)                    ' copy hub vars
    pinf(MISO)                                  ' ensure MISO is an input
    case _spi_mode
        0, 2:
            repeat b_num from 0 to nr_bytes-1   ' byte loop
                repeat 8                        ' bit loop
                    ' sample MISO and update current working byte in buffer
                    byte[ptr_buff][b_num] := (byte[ptr_buff][b_num] << 1) | pinr(MISO)
                    pint(SCK)                   ' clock
                    waitx(clk_delay)
                    pint(SCK)
                    waitx(clk_delay)
        1, 3:
            repeat b_num from 0 to nr_bytes-1   ' byte loop
                repeat 8                        ' bit loop
                    waitx(clk_delay)
                    pint(SCK)                   ' clock
                    ' sample MISO and update current working byte in buffer
                    byte[ptr_buff][b_num] := (byte[ptr_buff][b_num] << 1) | pinr(MISO)
                    waitx(clk_delay)
                    pint(SCK)

PUB rdblock_msbf(ptr_buff, nr_bytes) | SCK, MOSI, MISO, clk_delay, b_num, tmp
' Read block of data from SPI bus, most-significant byte first
    longmove(@SCK, @_SCK, 4)                    ' copy hub vars
    pinf(MISO)                                  ' ensure MISO is an input
    case _spi_mode
        0, 2:
            repeat b_num from nr_bytes-1 to 0   ' byte loop
                repeat 8                        ' bit loop
                    ' sample MISO and update current working byte in buffer
                    byte[ptr_buff][b_num] := (byte[ptr_buff][b_num] << 1) | pinr(MISO)
                    pint(SCK)                   ' clock
                    waitx(clk_delay)
                    pint(SCK)
                    waitx(clk_delay)
        1, 3:
            repeat b_num from nr_bytes-1 to 0   ' byte loop
                repeat 8                        ' bit loop
                    waitx(clk_delay)
                    pint(SCK)                   ' clock
                    ' sample MISO and update current working byte in buffer
                    byte[ptr_buff][b_num] := (byte[ptr_buff][b_num] << 1) | pinr(MISO)
                    waitx(clk_delay)
                    pint(SCK)

PUB wrbits_lsbf(val, nr_bits) | SCK, MOSI, MISO, clk_delay, b
' Write arbitrary number of bits to SPI bus, least-significant byte first
'   nr_bits: 1 to 32
    ifnot (lookdown(nr_bits: 1..32))            ' reject invalid # bits
        return
    longmove(@SCK, @_SCK, 4)
    pinl(MOSI)
    repeat b from 0 to (nr_bits-1)
        pinw(MOSI, val.[b])
        pint(SCK)
        waitx(clk_delay)
        pint(SCK)
        waitx(clk_delay)

PUB wrbits_msbf(val, nr_bits) | SCK, MOSI, MISO, clk_delay, b
' Write arbitrary number of bits to SPI bus, most-significant byte first
'   nr_bits: 1 to 32
    ifnot (lookdown(nr_bits: 1..32))            ' reject invalid # bits
        return
    longmove(@SCK, @_SCK, 4)
    pinl(MOSI)
    repeat b from (nr_bits-1) to 0
        pinw(MOSI, val.[b])
        pint(SCK)
        waitx(clk_delay)
        pint(SCK)
        waitx(clk_delay)

PUB wrblock_lsbf(ptr_buff, nr_bytes) | SCK, MOSI, MISO, clk_delay, b_num, tmp
' Write block of data to SPI bus from ptr_buff, least-significant byte first
    longmove(@SCK, @_SCK, 4)                    ' copy pins from hub
    pinl(MOSI)                                  ' ensure MOSI is an output
    case _spi_mode
        0, 2:
            repeat b_num from 0 to nr_bytes-1       ' byte loop
                tmp := (byte[ptr_buff][b_num] << 24)' align byte with MSBit of long
                repeat 8                            ' bit loop
                    pinw(MOSI, (tmp rol= 1) & 1)     ' next bit into pos and isolate it
                    pint(SCK)                       ' clock
                    waitx(clk_delay)
                    pint(SCK)
                    waitx(clk_delay)
        1, 3:
            repeat b_num from 0 to nr_bytes-1       ' byte loop
                tmp := (byte[ptr_buff][b_num] << 24)' align byte with MSBit of long
                repeat 8                            ' bit loop
                    pinw(MOSI, (tmp rol= 1) & 1)     ' next bit into pos and isolate it
                    pint(SCK)                       ' clock
                    waitx(clk_delay)
                    pint(SCK)
                    waitx(clk_delay)

PUB wrblock_msbf(ptr_buff, nr_bytes) | SCK, MOSI, MISO, clk_delay, b_num, tmp
' Write block of data to SPI bus from ptr_buff, most-significant byte first
    longmove(@SCK, @_SCK, 4)                    ' copy pins from hub
    pinl(MOSI)                                  ' ensure MOSI is an output
    case _spi_mode
        0, 2:
            repeat b_num from nr_bytes-1 to 0       ' byte loop
                tmp := (byte[ptr_buff][b_num] << 24)' align byte with MSBit of long
                repeat 8                            ' bit loop
                    pinw(MOSI, (tmp rol= 1) & 1)     ' next bit into pos and isolate it
                    pint(SCK)                       ' clock
                    waitx(clk_delay)
                    pint(SCK)
                    waitx(clk_delay)
        1, 3:
            repeat b_num from nr_bytes-1 to 0       ' byte loop
                tmp := (byte[ptr_buff][b_num] << 24)' align byte with MSBit of long
                repeat 8                            ' bit loop
                    pinw(MOSI, (tmp rol= 1) & 1)     ' next bit into pos and isolate it
                    pint(SCK)                       ' clock
                    waitx(clk_delay)
                    pint(SCK)
                    waitx(clk_delay)

#include "com.spi.common.spin2h"                    ' R/W methods common to all SPI engines

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

