{
    --------------------------------------------
    Filename: com.parallel-8bit.spin2
    Author: Jesse Burt
    Description: 8-bit parallel I/O engine for LCDs (P2 version)
    Copyright (c) 2022
    Started Jan 10, 2022
    Updated Oct 11, 2022
    See end of file for terms of use.
    --------------------------------------------
}
CON

' 8-bit Parallel engine commands
    IDLE        = 0
    CMD         = 1
    DATA        = 2
    BLKDAT      = 3
    BLKWD_MSBF  = 4
    BLKWD_LSBF  = 5
    WORDX_MSBF  = 6

VAR

    long _cog, _eng_stack[50]
    long _io_cmd, _ptr_buff, _xfer_cnt
    long _DATA, _CS, _DC, _WR, _RD

PUB null()
' This is not a top-level object

PUB init(D_BASEPIN, CS_PIN, DC_PIN, WR_PIN, RD_PIN): status
' Initialize engine
'   D_BASEPIN: first of 8 I/O pin block
'   CS_PIN: CS / CSX (chip select)
'   DC_PIN: DC / DCX / RS (data/command or register select)
'   WR_PIN: WR / WRX (write clock)
'   RD_PIN: RD / RDX (read clock) - currently unused
    deinit()                                    ' stop engine, if started
    D_BASEPIN := (D_BASEPIN addpins 8)          ' set up data pinmask
    longmove(@_DATA, @D_BASEPIN, 5)             ' copy pin params to globals
    status := _cog := cogspin(NEWCOG, parallel_eng(), @_eng_stack)+1

    return status

PUB deinit()
' Deinitialize engine
'   Stop running cog and clear variables
    if (_cog)
        cogstop(_cog-1)
        longfill(@_cog, 0, 86)                  ' clear global vars

PUB wrbyte_cmd(c)
' Write command (8-bits)
    _xfer_cnt := 1                              ' set data size
    _ptr_buff := c                              ' command byte
    _io_cmd := CMD                              ' signal command to engine
    repeat until (_io_cmd == IDLE)              ' wait for engine to finish

PUB wrbyte_dat(d)
' Write data (8-bits)
    _xfer_cnt := 1
    _ptr_buff := d
    _io_cmd := DATA
    repeat until (_io_cmd == IDLE)

PUB wrblock_dat(ptr_buff, nr_bytes)
' Write block of data
'   ptr_buff: pointer to buffer of data
'   nr_bytes: number of bytes to write to display
    longmove(@_ptr_buff, @ptr_buff, 2)          ' copy params to PASM engine
    _io_cmd := BLKDAT                           '   params
    repeat until (_io_cmd == IDLE)

PUB wrblkword_lsbf(ptr_buff, nr_words)
' Write block of words (MSByte-first)
'   ptr_buff: pointer to buffer of data
'   nr_words: number of words to write to display
    longmove(@_ptr_buff, @ptr_buff, 2)
    _io_cmd := BLKWD_LSBF
    repeat until (_io_cmd == IDLE)

PUB wrblkword_msbf(ptr_buff, nr_words)
' Write block of words (MSByte-first)
'   ptr_buff: pointer to buffer of data
'   nr_words: number of words to write to display
    longmove(@_ptr_buff, @ptr_buff, 2)
    _io_cmd := BLKWD_MSBF
    repeat until (_io_cmd == IDLE)

PUB wrwordx_dat(dw, nr_words)
' Repeatedly write word dw, nr_words times
    longmove(@_ptr_buff, @dw, 2)
    _io_cmd := WORDX_MSBF
    repeat until (_io_cmd == IDLE)

PRI parallel_eng() | ptr_data, i, ptr_buff, D7_0, CS, DC, WRX, RDX, xcnt
' 8-bit parallel engine
    longmove(@D7_0, @_DATA, 5)                  ' cache local copies of pins

    ' set I/O pins initial state
    pinh(CS)
    pinh(WRX)                                   ' write clock idles high
    pinl(D7_0)                                  ' init data pins to 0
    pinh(RDX)                                   ' read clock idles high
    pinl(CS)
    repeat
        case_fast _io_cmd                       ' check for valid command
            IDLE:
            ' no command - loop
                next
            CMD:
            ' write a command byte
                pinl(DC)                        ' DC low: command
                pinw(D7_0, _ptr_buff)           ' write cmd to D7..D0
                pint(WRX)                       ' clock out cmd byte (L)
                pint(WRX)                       '                    (H)
                _io_cmd := IDLE                 ' signal command complete
            DATA:
            ' write a data byte
                pinh(DC)                        ' DC high: data
                pinw(D7_0, _ptr_buff)           ' write data to D7..D0
                pint(WRX)                       ' clock out data byte
                pint(WRX)
                _io_cmd := IDLE
            BLKDAT:
            ' write a block of data bytes
                ptr_buff := _ptr_buff           ' cache local copy of ptr
                xcnt := _xfer_cnt-1             ' and number of bytes
                pinh(DC)
                repeat i from 0 to xcnt         ' write data from ptr_buff
                    pinw(D7_0, byte[ptr_buff][i])
                    pint(WRX)
                    pint(WRX)
                _io_cmd := IDLE
            BLKWD_MSBF:
            ' write a block of MSByte-first data words
                ptr_buff := _ptr_buff
                xcnt := _xfer_cnt-1
                pinh(DC)
                repeat i from 0 to xcnt
                    pinw(D7_0, word[ptr_buff][i] >> 8)
                    pint(WRX)
                    pint(WRX)
                    pinw(D7_0, word[ptr_buff][i] & $ff)
                    pint(WRX)
                    pint(WRX)
                _io_cmd := IDLE
            BLKWD_LSBF:
            ' write a block of LSByte-first data words
                ptr_buff := _ptr_buff
                xcnt := _xfer_cnt-1
                pinh(DC)
                repeat i from 0 to xcnt
                    pinw(D7_0, word[ptr_buff][i] & $ff)
                    pint(WRX)
                    pint(WRX)
                    pinw(D7_0, word[ptr_buff][i] >> 8)
                    pint(WRX)
                    pint(WRX)
                _io_cmd := IDLE
            WORDX_MSBF:
            ' repeatedly write the same data word, xcnt times
                ptr_buff := _ptr_buff
                xcnt := _xfer_cnt
                pinh(DC)
                repeat xcnt
                    pinw(D7_0, (ptr_buff >> 8)) ' write MSB
                    pint(WRX)
                    pint(WRX)
                    pinw(D7_0, (ptr_buff & $ff))' write LSB
                    pint(WRX)
                    pint(WRX)
                _io_cmd := IDLE
            other:
            ' invalid command - ignore and change state to idle
                _io_cmd := IDLE
                next

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

