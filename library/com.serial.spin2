{
    --------------------------------------------
    Filename: com.serial.spin2
    Author: Eric Smith
    Modified by: Jesse Burt
    Description: Low-level UART serial driver
    Copyright (c) 2020
    Started Jun 28, 2019
    Updated Jul 23, 2020
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is a modified version of SmartSerial.spin,
        originally by Eric Smith. The original header is
        preserved below.
}
'
' SmartSerial.spin2
' simple smart pin serial object for P2 eval board
' implements a subset of FullDuplexSerial functionality
'
CON

    TXMODE = sp.ASYNCSERIAL_TX | sp.OUTPUT_ENABLED
    RXMODE = sp.ASYNCSERIAL_RX

OBJ

    sp  : "core.con.smartpins"

VAR

    long _rx_pin, _tx_pin

PUB Start(baudrate=-1): okay
' Start with default serial pins and mode
    return startrxtx(63, 62, 0, baudrate)

PUB StartRxTx(rxpin, txpin, mode, baudrate=-1): okay | bitperiod, bit_mode

    if baudrate == -1
        bitperiod := autobaud(rxpin)
    else
        bitperiod := (clkfreq / baudrate)

    _rx_pin := rxpin
    _tx_pin := txpin

    bit_mode := 7 + (bitperiod << 16)

    pinf(txpin)
    wrpin(txpin, TXMODE)
    wxpin(txpin, bit_mode)
    pinl(txpin)

    if lookdown(rxpin: 0..63)
        pinf(rxpin)
        wrpin(rxpin, RXMODE)
        wxpin(rxpin, bit_mode)
        pinl(rxpin)

    return cogid()+1

PUB Char(val)
' Send one character
    wypin(_tx_pin, val)
    txflush()

PUB TXFlush() | z
' Flush transmit buffer
    repeat
        z := pinr(_tx_pin)
    while z == 0

PUB RXCheck(): rxbyte | rxpin, z
' Check if byte received (never waits)
'   Returns:
'       -1 if no byte, otherwise byte
    rxbyte := -1
    rxpin := _rx_pin
    z := pinr(rxpin)
    if z
        rxbyte := rdpin(rxpin) >> 24

PUB CharIn(): rxbyte
' Receive a byte (waits until one ready)
    repeat
        rxbyte := rxcheck()
    while rxbyte == -1

PRI autobaud(pin): bitperiod | a, b, c, port, mask

    pinf(pin)                                               ' set pin as input
    waitx(1000)                                             ' wait to settle
    if pin >= 32
        port := 1
        mask := 1 << (pin-32)
    else
        port := 0
        mask := 1 << pin

' Code for detecting HI->LO->HI->LO transition
' We time the length of the first 1 bit sequence in the character,
'   then the next 0 bit sequence
' We assume one of these is the correct length
' This works if the character sent is space ($20), which has 1 bit high
'   or CR ($0d) which has 1 bit low after the high bit
'
    org
        test port, #1 wc                                    ' Set C to distinguish INA/OUTA
        test port, #2 wz                                    ' set Z (match on =)

        setpat mask, #0                                     ' Wait for pin lo (start bit)
        waitpat
        setpat mask, mask                                   ' Wait for pin hi (first 1)
        waitpat
        getct a
        setpat mask, #0                                     ' Wait for pin lo again (following 0)
        waitpat
        getct b
        setpat mask,mask                                    ' Wait for pin hi again (end of 0 sequence)
        waitpat
        getct c
    end
    bitperiod := b - a                                      ' Length of first 1 bit sequence
    c := c - b                                              ' Length of following 0
    if c < bitperiod
        bitperiod := c

' Now want to wait for idle
    waitx(16 * bitperiod)
    return bitperiod

{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
