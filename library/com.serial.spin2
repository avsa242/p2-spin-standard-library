{
    --------------------------------------------
    Filename: com.serial.spin2
    Author: Jesse Burt
    Description: Low-level UART serial driver
    Copyright (c) 2022
    Started Jun 28, 2019
    Updated Oct 16, 2022
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is based on SmartSerial.spin,
        originally by Eric Smith.
}

CON

    WORDLEN = 8-1                               ' serial word length, in bits-1

VAR

    long _rx_pin, _tx_pin

PUB start = init_def
PUB init_def(bps=-1): status
' Start using P2 default serial pins
    return init(63, 62, 0, bps)

PUB startrxtx = init
PUB init(rxpin, txpin, mode, bps=-1): status | bitperiod, bit_mode
' Start using custom I/O pins and configuration
'   rxpin: receive pin
'   txpin: transmit pin
'   mode: unused; currently for compatibility only
'   bps: bits per second/baud (-1 to attempt auto-baud)
    if (bps == -1)
        bitperiod := autobaud(rxpin)
    else
        bitperiod := (clkfreq / bps)

    _rx_pin := rxpin
    _tx_pin := txpin

    bit_mode := ((bitperiod << 16) + WORDLEN)

    if (lookdown(txpin: 0..63))
        pinf(txpin)
        wrpin(txpin, P_ASYNC_TX | P_OE)
        wxpin(txpin, bit_mode)
        pinl(txpin)

    if (lookdown(rxpin: 0..63))
        pinf(rxpin)
        wrpin(rxpin, P_ASYNC_RX)
        wxpin(rxpin, bit_mode)
        pinl(rxpin)

    return (cogid() + 1)

PUB tx = putchar
PUB char = putchar
PUB putchar(ch)
' Send single-byte character (blocking)
'   ch: character (ASCII byte value) to send
    wypin(_tx_pin, ch)
    tx_flush()

PUB rx = getchar
PUB charin = getchar
PUB getchar(): ch
' Receive a single byte (blocking)
'   Returns: $00..$FF
    repeat
        ch := rx_check()
    while (ch == -1)

PUB rxcheck = rx_check
PUB rx_check(): rxbyte
' Check if byte received (non-blocking)
'   Returns:
'       -1 if no byte, otherwise byte
    rxbyte := -1
    if pinr(_rx_pin)
        return (rdpin(_rx_pin) >> 24)

PUB tx_flush()
' Flush transmit buffer
    repeat until pinr(_tx_pin)

PRI autobaud(pin): bitperiod | a, b, c, port, mask

    pinf(pin)                                               ' set pin as input
    waitx(1000)                                             ' wait to settle
    if pin >= 32
        port := 1
        mask := 1 << (pin-32)
    else
        port := 0
        mask := 1 << pin

' Code for detecting HI->LO->HI->LO transition
' We time the length of the first 1 bit sequence in the character,
'   then the next 0 bit sequence
' We assume one of these is the correct length
' This works if the character sent is space ($20), which has 1 bit high
'   or CR ($0d) which has 1 bit low after the high bit
'
    org
        test    port, #1 wc                     ' Set C to distinguish INA/OUTA
        test    port, #2 wz                     ' set Z (match on =)

        setpat  mask, #0                        ' Wait for pin lo (start bit)
        waitpat
        setpat  mask, mask                      ' Wait for pin hi (first 1)
        waitpat
        getct   a
        setpat  mask, #0                        ' Wait for pin lo again (following 0)
        waitpat
        getct   b
        setpat  mask,mask                       ' Wait for pin hi again (end of 0 sequence)
        waitpat
        getct   c
    end
    bitperiod := (b - a)                        ' Length of first 1 bit sequence
    c := (c - b)                                ' Length of following 0
    if (c < bitperiod)
        bitperiod := c

' Now want to wait for idle
    waitx(16 * bitperiod)
    return bitperiod

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}
