{
    --------------------------------------------
    Filename: tiny.math.float.spin2
    Description: Floating-point math routines
        Single-precision, IEEE-754 (SPIN-based)
    Started 2006
    Updated Oct 4, 2021
    See end of file for terms of use.
    --------------------------------------------

    This is based on FloatMath.spin, originally
        by Chip Gracey
}
' Comment these out for older versions of FlexSpin
'   (FAbs() and FSqrt() are reserved words in newer versions)
#define HAS_FABS
#define HAS_FSQRT

PUB Null()
' This is not a top-level object

PUB FFloat(integer): single | sign, exp, mant
' Convert integer to float
    if mant := abs(integer)                 ' absolutize mantissa, if 0, result 0
        sign := integer >> 31               ' get sign
        exp := encod mant                   ' get exponent
        mant <<= 31 - exp                   ' msb-justify mantissa
        mant >>= 2                          ' bit29-justify mantissa

        return pack(@sign)                  ' pack result

PUB FRound(single): integer
' Convert float to rounded integer
    return finteger(single, 1)              ' use 1/2 to round

PUB FTrunc(single): integer
' Convert float to truncated integer
    return finteger(single, 0)              ' use 0 to round

PUB FNeg(singlea): single
' Negate singlea
    return singlea ^ $8000_0000             ' toggle sign bit

#ifndef HAS_FABS
PUB FAbs(singlea): single
' Absolute singlea
    return singlea & $7FFF_FFFF             ' clear sign bit
#endif

#ifndef HAS_FSQRT
PUB FSqrt(singlea): single | sign, exp, mant, root
' Compute square root of singlea
    if singlea > 0                          ' if a <= 0, result 0
        unpack(@sign, singlea)              ' unpack input
        mant >>= !exp & 1                   ' if exponent even, shift mantissa down
        exp sar= 1                          ' get root exponent
        root := $4000_0000                  ' compute square root of mantissa
        repeat 31
            single |= root
            if single sca single > mant
                single ^= root
            root >>= 1
        mant := single >> 1

        return pack(@sign)                  ' pack result
#endif

PUB FAdd(singlea, singleb): single | signa, expa, manta, signb, expb, mantb
' Add singlea and singleb
    single := 0

    unpack(@signa, singlea)                 ' unpack inputs
    unpack(@signb, singleb)

    if signa                                ' handle mantissa negation
        -manta
    if signb
        -mantb

    single := abs(expa - expb) <# 31         ' get exponent difference
    if expa > expb                          ' shift lower-exponent mantissa down
        mantb sar= single
    else
        manta sar= single
        expa := expb

    manta += mantb                          ' add mantissas
    signa := manta < 0                      ' get sign
    manta := abs(manta)                     ' absolutize result

    return pack(@signa)                     ' pack result

PUB FSub(singlea, singleb): single
' Subtract singleb from singlea
    return fadd(singlea, fneg(singleb))

PUB FMul(singlea, singleb): single | signa, expa, manta, signb, expb, mantb
' Multiply singlea by singleb
    unpack(@signa, singlea)                 ' unpack inputs
    unpack(@signb, singleb)

    signa ^= signb                          ' xor signs
    expa += expb                            ' add exponents
    manta := (manta sca mantb) << 3         ' multiply mantissas and justify

    return pack(@signa)                     ' pack result

PUB FDiv(singlea, singleb): single | signa, expa, manta, signb, expb, mantb
' Divide singlea by singleb
    single := 0

    unpack(@signa, singlea)                 ' unpack inputs
    unpack(@signb, singleb)

    signa ^= signb                          ' xor signs
    expa -= expb                            ' subtract exponents

    repeat 30                               ' divide mantissas
        single <<= 1
        if manta >= mantb
            manta -= mantb
            single++
        manta <<= 1
    manta := single

    return pack(@signa)                     ' pack result

PRI FInteger(a, r): integer | sign, exp, mant
' Convert float to rounded/truncated integer
    unpack(@sign, a)                        ' unpack input

    if exp >= -1 and exp <= 30              ' if exponent not -1..30, result 0
        mant <<= 2                          ' msb-justify mantissa
        mant >>= 30 - exp                   ' shift down to 1/2-lsb
        mant += r                           ' round (1) or truncate (0)
        mant >>= 1                          ' shift down to lsb
        if sign                             ' handle negation
            -mant
        return mant                         ' return integer

PRI Unpack(pointer, single) | sign, exp, mant, tmp
' Unpack floating-point into (sign, exponent, mantissa) at pointer
    sign := single >> 31                    ' unpack sign
    exp := single << 1 >> 24                ' unpack exponent
    mant := single & $007F_FFFF             ' unpack mantissa

    if exp                                  ' if exponent > 0,
        mant := mant << 6 | $2000_0000      ' ..bit29-justify mantissa with leading 1
    else
        tmp := encod mant - 22              ' else, determine first 1 in mantissa
        exp := tmp                          ' ..adjust exponent
        mant <<= 7 - tmp                    ' ..bit29-justify mantissa

    exp -= 127                              ' unbias exponent

    longmove(pointer, @sign, 3)             ' write (s,x,m) structure from locals

PRI Pack(pointer): single | sign, exp, mant
' Pack floating-point from (sign, exponent, mantissa) at pointer
    single := 0

    longmove(@sign, pointer, 3)             ' get (s,x,m) structure into locals

    if mant                                 ' if mantissa 0, result 0
        single := 32 - encod mant           ' determine magnitude of mantissa
        mant <<= single                     ' msb-justify mantissa without leading 1
        exp += 3 - single                   ' adjust exponent

        mant += $00000100                   ' round up mantissa by 1/2 lsb
        if not mant & $FFFFFF00             ' if rounding overflow,
            exp++                           ' ..increment exponent

        exp := exp + 127 #> -23 <# 255      ' bias and limit exponent

        if exp < 1                          ' if exponent < 1,
            mant := $8000_0000 + mant >> 1  ' ..replace leading 1
            mant >>= -exp                   ' ..shift mantissa down by exponent
            exp := 0                        ' ..exponent is now 0

        return sign << 31 | exp << 23 | mant >> 9   ' pack result

{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}

