{
    --------------------------------------------
    Filename: lib.ansiterminal.spin2
    Description: ANSI-compatible terminal library
    Author: Jesse Burt
    Started: Jun 28, 2019
    Updated: Oct 25, 2020
    See end of file for terms of use.
    --------------------------------------------

'   Must be included using the preprocessor #include directive
'   Requires:
'       An object that has the following standard terminal methods:
'           Dec (param)
'           Char (param)
'           Str (param)
}

CON

    LF                  = $0A
    CR                  = $0D
    ESC                 = $1B
    LBRACKET            = $5B

' Clear modes
    CLR_CUR_TO_END      = 0     ' Clear from cursor position to end of line
    CLR_CUR_TO_BEG      = 1     ' Clear from cursor position to beginning of line
    CLR_ALL_HOME        = 2     ' Clear screen and return to home position
    CLR_ALL_DEL_SCRLB   = 3     ' Clear all and delete scrollback

' Graphic Rendition modes
    SGR_RESET           = 0     ' Reset text attributes

    SGR_INTENSITY_BOLD  = 1     ' Text intensity
    SGR_INTENSITY_FAINT = 2
    SGR_INTENSITY_NML   = 22

    SGR_ITALIC          = 3     ' Can be either Italic or inverse, depending on the terminal

    SGR_UNDERLINE       = 4     ' Underlined text
    SGR_UNDERLINE_DBL   = 21
    SGR_UNDERLINE_OFF   = 24

    SGR_BLINKSLOW       = 5     ' Blinking text
    SGR_BLINKFAST       = 6     ' Not supported by all terminals
    SGR_BLINK_OFF       = 25

    SGR_INVERSE         = 7     ' Inverse text, or inverse terminal
    SGR_INVERSE_OFF     = 27

    SGR_CONCEAL         = 8     ' Concealed text
    SGR_REVEAL          = 28

    SGR_STRIKETHRU      = 9     ' Strike-through text
    SGR_STRIKETHRU_OFF  = 29

    SGR_PRI_FONT        = 10    ' Select primary font

    SGR_FGCOLOR_DEF     = 39
    SGR_BGCOLOR_DEF     = 49

    SGR_FRAMED          = 51    '
    SGR_ENCIRCLED       = 52    ' Not supported by many terminals
    SGR_FRAMED_ENC_OFF  = 54    '

    SGR_OVERLINED       = 53    ' Overlined text
    SGR_OVERLINED_OFF   = 55


' Text colors
    FG                  = 30
    BG                  = 40
    BRIGHT              = 60
    BLACK               = 0
    RED                 = 1
    GREEN               = 2
    YELLOW              = 3
    BLUE                = 4
    MAGENTA             = 5
    CYAN                = 6
    WHITE               = 7

' Semi-graphics characters
' Corners:
    LOWRT               = $6a                   ' Lower-right
    UPPRT               = $6b                   ' Upper-right
    UPPLT               = $6c                   ' Upper-left
    LOWLT               = $6d                   ' Lower-left
    CROSS               = $6e                   ' Cross/4-way
' Horizontal and Vertical lines
    HLINE               = $71                   ' H-line
    LVLHSTEM            = $74                   ' Left V-line w/H-stem
    RVLHSTEM            = $75                   ' Right V-line w/H-stem
    BHLVSTEM            = $76                   ' Bottom H-line w/V-stem
    THLVSTEM            = $77                   ' Top H-line w/V-stem
    VLINE               = $78                   ' V-line

PUB BGColor(color)
' Set background color
    CSI()
    Char(";")
    Dec(BG + color)
    Char("m")

PUB Blink(mode=5)
' Set Blink attribute
    SGR(mode)

PUB Bold(mode=1)
' Set Bold attribute
    SGR(mode)

PUB Box(x0, y0, x1, y1, brd_fg, brd_bg, filled=0) | inwidth, inheight, inbot, intop, x, y
' Draw a box, using semigraphics characters
'   x0, y0, x1, y1: upper left, lower right coords
'   brd_fg, brd_bg: border foreground, background colors
'   filled: fill box (bool)
    inwidth := x1-x0-1                          ' inside border w, h
    inheight := y1-y0-1
    intop := y0+1                               ' inside border top, bot.
    inbot := y1-1

    case filled
        false:                                  ' not filled:
            bgcolor(brd_bg)
            fgcolor(brd_fg)
            position(x0, y0)                    ' draw top:
            semigfx(true)                       '   enable semigfx mode
            char(UPPLT)                         '   upper-left corner
            repeat inwidth
                char(HLINE)                     '   fill horiz. lines
            char(UPPRT)                         '   upper-right corner

            position(x0, y1)                    ' draw bottom
            char(LOWLT)
            repeat inwidth
                char(HLINE)
            char(LOWRT)

            repeat y from intop to inbot        ' draw left side
                position(x0, y)
                char(VLINE)                     '   v-lines

            repeat y from intop to inbot        ' draw right side
                position(x1, y)
                char(VLINE)
            semigfx(false)                      ' done. turn off semigfx mode

        true:                                   ' filled:
            bgcolor(brd_bg)
            fgcolor(brd_fg)
            position(x0, y0)                    ' set window pos
            semigfx(true)                       ' turn on semigfx mode

            char(UPPLT)                         ' top row:
            repeat inwidth                      '   fill with horiz. lines
                char(HLINE)
            char(UPPRT)

            repeat y from intop to inbot        ' middle rows:
                position(x0, y)                 '   left border
                char(VLINE)                     '   vert. lines
                repeat inwidth
                    char(" ")                   '   fill line with spaces
                char(VLINE)                     '   right border
            newline()

            char(LOWLT)                         ' bottom row
            repeat inwidth
                char(HLINE)
            char(LOWRT)
            semigfx(false)                      ' done. turn off semigfx mode

PUB Clear(mode=2)
' Clear screen
    CSI()
    Dec(mode)
    Char("J")
    if mode == 2
        Position (0, 0)

PUB ClearLine(mode=0)
' Clear line
    CSI()
    Dec(mode)
    Char("K")

PUB Color(fgcolor=9, bgcolor=9)
' Set foreground and background colors
    CSI()
    Dec(FG+fgcolor)
    Char(";")
    Dec(BG+bgcolor)
    Char("m")

PUB Conceal(mode=8)
' Set Conceal attribute
    SGR(mode)

PUB CursorPosition(enabled=TRUE)
' Enable/disable mouse cursor position reporting
    CSI()
    case enabled
        FALSE:
            Str(string("?1000;1006;1015l"))
        OTHER:
            Str(string("?1000;1006;1015h"))

PUB CursorNextLine(rows=1)
' Move cursor to beginning of next row, or 'rows' number of rows down
    CSI()
    Dec(rows)
    Char("E")

PUB CursorPrevLine(rows=1)
' Move cursor to beginning of previous row, or 'rows' number of rows up
    CSI()
    Dec(rows)
    Char("F")

PUB Encircle()
' Set Encircle attribute
    SGR(SGR_ENCIRCLED)

PUB FGColor(color)
' Set foreground color
    CSI()
    Dec(FG + color)
    Char("m")

PUB Framed()
' Set framed attribute
    SGR(SGR_FRAMED)

PUB HideCursor()
' Hide cursor
    CSI()
    Char("?")
    Dec(25)
    Char("l")
    
PUB Home()
' Move cursor to home/upper-left position
    Position(0, 0)

PUB Inverse(mode=7)
' Set inverse attribute
    SGR(mode)

PUB Italic()
' Set italicized attribute
    SGR(SGR_ITALIC)

PUB MoveDown(rows=1)
' Move cursor down 1 or more rows
    CSI()
    Dec(rows)
    Char("B")

PUB MoveLeft(columns=1)
' Move cursor back/left 1 or more columns
    CSI()
    Dec(columns)
    Char("D")

PUB MoveRight(columns=1)
' Move cursor forward/right 1 or more columns
    CSI()
    Dec(columns)
    Char("C")

PUB MoveUp(rows=1)
' Move cursor up 1 or more rows
    CSI()
    Dec(rows)
    Char("A")

PUB Overline()
' Set Overline attribute
    SGR(SGR_OVERLINED)

PUB Position(x, y)
' Position cursor at column x, row y (from top-left)
    y++                                                     ' Without this, (1, 1) is considered
    x++                                                     '   upper-left/home position instead of
    CSI()                                                   '   the more common (0, 0)
    Dec(y)
    Char(";")
    Dec(x)
    Char("f")

PUB PositionX(column=1)
' Set horizontal position of cursor
'   Default value: column 1
    CSI()
    Dec(column+1)                                           '
    Char("G")

PUB PositionY(y)
' Set vertical position of cursor
    y++                                                     '
    CSI()
    Dec(y)
    Char("d")

PUB RCP() | tmp, token, place
' Report Current mouse position (press mouse button to update)
' Read serial
' If ESC, discard + proceed, otherwise, NEXT
'       If LBRACKET, discard + proceed, otherwise, NEXT
'               If "<", discard + proceed, otherwise, NEXT
'                       If isnum, echo to term, NEXT
'                               if ";", echo to term, NEXT
'                                       if "M", quit
    repeat
        tmp := CharIn()
        case tmp
            ESC:
                token := 1
            LBRACKET:
                token := 2
            "<":
                token := 3
            "0".."9":
                case token
                    3:  'Mouse button
                        Char(tmp)
                    4:  'X
                        Char(tmp)
                    5:  'Y
                        Char(tmp)
            ";":
                Char(";")
                token++
                place := 0
            "M":
                quit
            OTHER:
    until tmp == "M"

PUB Reset()
' Reset terminal attributes
    CSI()
    Char("m")

PUB ScrollDown(lines=1)
' Scroll display down 1 or more lines
    CSI()
    Dec(lines)
    Char("T")

PUB ScrollUp(lines=1)
' Scroll display up 1 or more lines
    CSI()
    Dec(lines)
    Char("S")

PUB SemiGfx(enabled=1)
' Enable semi-graphics (e.g., line-drawing) mode
    case abs(enabled)
        1:
            str(string(ESC, "(", "0"))
        0:
            str(string(ESC, "(", "B"))

PUB ShowCursor()
' Show cursor
    CSI()
    Char("?")
    Dec(25)
    Char("h")

PUB Strikethrough(mode=9)
' Set Strike-through attribute
    SGR(mode)

PUB TextWindow(ptr_titlestr, x, y, w, h, brd_fg, brd_bg, ttl_fg)
' Draw a window with title string and border
'   x, y: upper-left coords of window
'   w, h: window dimensions (_outer_)
'   brd_fg, brd_bg: window border foreground, background colors
'   ttl_fg: title text fg color
    box(x, y, x+w, y+h-1, brd_fg, brd_bg, true)
    bgcolor(brd_bg)
    fgcolor(ttl_fg)

    position(x+2, y)                            ' display window title
    str(ptr_titlestr)

PUB Underline(mode=4)
' Set Underline attribute
    SGR(mode)

PRI CSI()
' Command Sequence Introducer
    Str(string(ESC, LBRACKET))

PRI SGR(mode)
' Select Graphic Rendition
    CSI()
    Dec(mode)
    Char("m")
