{
    --------------------------------------------
    Filename: display.oled.ssd1309.i2c.spin2
    Description: Driver for Solomon Systech SSD1309 SPI OLED display drivers (P2 version)
    Author: Jesse Burt
    Copyright (c) 2020
    Created: Dec 27, 2019
    Updated: Jun 14, 2020
    See end of file for terms of use.
    --------------------------------------------
}
#define SSD130X
#include "lib.gfx.bitmap.spin2"

CON

    MAX_COLOR       = 1
    BYTESPERPX      = 1

' Display visibility modes
    NORMAL          = 0
    ALL_ON          = 1
    INVERTED        = 2

OBJ

    core    : "core.con.ssd1309"
    time    : "time"
    io      : "io"
    spi     : "com.spi"

VAR

    long _ptr_drawbuffer
    word _buff_sz
    word BYTESPERLN
    byte _disp_width, _disp_height, _disp_xmax, _disp_ymax
    byte _CS, _SCK, _MOSI, _DC, _RES

PUB Null()
' This is not a top-level object

PUB Start(width, height, CS_PIN, SCK_PIN, SDA_PIN, DC_PIN, RES_PIN, SCK_FREQ, dispbuffer_address): okay
' Start the driver with custom settings
' Valid values:
'       width: 0..128
'       height: 32, 64
'       CS_PIN, SCK_PIN, SDA_PIN, DC_PIN, RES_PIN: 0..63
    if lookdown(CS_PIN: 0..63) and lookdown(SCK_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and lookdown(DC_PIN: 0..63)
        if okay := spi.Start(SCK_PIN, SDA_PIN, -1, SCK_FREQ)
            _CS := CS_PIN
            _SCK := SCK_PIN
            _MOSI := SDA_PIN
            _DC := DC_PIN
            _RES := RES_PIN

            io.Low (_DC)
            io.High (_CS)
            io.High (_RES)
            io.Output (_DC)
            io.Output (_CS)
            io.Output (_RES)

            Reset()

            _disp_width := width
            _disp_height := height
            _disp_xmax := _disp_width-1
            _disp_ymax := _disp_height-1
            BYTESPERLN := _disp_width * BYTESPERPX
            _buff_sz := (_disp_width * _disp_height) / 8
            Address(dispbuffer_address)
            return
    return                                                'If we got here, something went wrong

PUB Stop()

    Powered(FALSE)

PUB Defaults()

    Powered(FALSE)
    ClockFreq (444)
    DisplayLines(_disp_height-1)
    DisplayOffset(0)
    DisplayStartLine(0)
    ChargePumpReg(TRUE)
    AddrMode (0)
    MirrorH(FALSE)
    MirrorV(FALSE)
    case _disp_height
        32:
            COMPinCfg(0, 0)
        64:
            COMPinCfg(1, 0)
        OTHER:
            COMPinCfg(0, 0)
    Contrast(127)
    PrechargePeriod (1, 15)
    COMLogicHighLevel (0_77)
    DisplayVisibility(NORMAL)
    DisplayBounds(0, 0, _disp_xmax, _disp_ymax)
    Powered(TRUE)

PUB Address(addr=-2): result
' Set framebuffer address
    case addr
        $0004..$7FFF-_buff_sz:
            _ptr_drawbuffer := addr
            result := _ptr_drawbuffer
            return
        OTHER:
            result := _ptr_drawbuffer
            return

PUB AddrMode(mode)
' Set Memory Addressing Mode
'   0: Horizontal addressing mode
'   1: Vertical
'   2: Page (POR)
    case mode
        0, 1, 2:
        OTHER:
            return

    writeReg(core.CMD_MEM_ADDRMODE, 1, mode)

PUB ChargePumpReg(enabled)
' Enable Charge Pump Regulator when display power enabled
    case abs(enabled)
        0, 1:
            enabled := lookupz(abs(enabled): $10, $14)
        OTHER:
            return
    writeReg(core.CMD_CHARGEPUMP, 1, enabled)

PUB ClearAccel()
' Dummy method

PUB ClockFreq(kHz)
' Set Oscillator frequency, in kHz
'   Valid values: 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540
'   Any other value is ignored
'   NOTE: Range is interpolated, based solely on the range specified in the datasheet, divided into 16 steps
    case kHz
        core.FOSC_MIN..core.FOSC_MAX:
            kHz := lookdownz(kHz: 360, 372, 384, 396, 408, 420, 432, 444, 456, 468, 480, 492, 504, 516, 528, 540) << core.FLD_OSCFREQ
        OTHER:
            return

    writeReg(core.CMD_SETOSCFREQ, 1, kHz)

PUB COMLogicHighLevel(level)
' Set Vcomh deselect level 0.65, 0.77, 0.83 * Vcc
'   Valid values: 0.65, 0.77, 0.83
'   Any other value sets the POR value, 0.77
    case level
        0.67:
            level := %000 << 4
        0.77:
            level := %010 << 4
        0.83:
            level := %011 << 4
        OTHER:
            level := %010 << 4

    writeReg(core.CMD_SETVCOMDESEL, 1, level)

PUB COMPinCfg(pin_config, remap) | config
' Set COM Pins Hardware Configuration and Left/Right Remap
'  pin_config: 0: Sequential                      1: Alternative (POR)
'       remap: 0: Disable Left/Right remap (POR)  1: Enable remap
' POR: $12
    config := %0000_0010
    case pin_config
        0:
        OTHER:
            config := config | (1 << 4)

    case remap
        1:
            config := config | (1 << 5)
        OTHER:

    writeReg(core.CMD_SETCOM_CFG, 1, config)

PUB Contrast(level)
' Set Contrast Level 0..255 (POR = 127)
    case level
        0..255:
        OTHER:
            level := 127

    writeReg(core.CMD_CONTRAST, 1, level)

PUB DisplayBounds(sx, sy, ex, ey)
' Set displayable area
    ifnot lookup(sx: 0..127) or lookup(sy: 0..63) or lookup(ex: 0..127) or lookup(ey: 0..63)
        return

    sy >>= 3
    ey >>= 3
    writeReg(core.CMD_SET_COLADDR, 2, (ex << 8) | sx)
    writeReg(core.CMD_SET_PAGEADDR, 2, (ey << 8) | sy)

PUB DisplayInverted(enabled) | tmp
' Invert display colors
    case abs(enabled)
        0:
            DisplayVisibility(NORMAL)
        1:
            DisplayVisibility(INVERTED)
        OTHER:
            return

PUB DisplayLines(lines)
' Set total number of display lines
'   Valid values: 16..64
'   Typical values: 32, 64
'   Any other value is ignored
    case lines
        16..64:
            lines -= 1
        OTHER:
            return

    writeReg(core.CMD_SETMUXRATIO, 1, lines)

PUB DisplayOffset(offset)
' Set Display Offset/vertical shift from 0..63
' POR: 0
    case offset
        0..63:
        OTHER:
            offset := 0

    writeReg(core.CMD_SETDISPOFFS, 1, offset)

PUB DisplayStartLine(start_line)
' Set Display Start Line from 0..63
    case start_line
        0..63:
        OTHER:
            return

    writeReg($40, 0, start_line)

PUB DisplayVisibility(mode) | tmp
' Set display visibility
    case mode
        NORMAL:
            writeReg (core.CMD_RAMDISP_ON, 0, 0)
            writeReg (core.CMD_DISP_NORM, 0, 0)
        ALL_ON:
            writeReg (core.CMD_RAMDISP_ON, 0, 1)
        INVERTED:
            writeReg (core.CMD_DISP_NORM, 0, 1)
        OTHER:
            return

PUB MirrorH(enabled)
' Mirror display, horizontally
' NOTE: Only affects subsequent data - no effect on data in GDDRAM  'XXX clarify
    case abs(enabled)
        0, 1: enabled := abs(enabled)
        OTHER:
            return

    writeReg(core.CMD_SEG_MAP0, 0, enabled)

PUB MirrorV(enabled)
' Mirror display, vertically
' NOTE: Only affects subsequent data - no effect on data in GDDRAM
' POR: 0
    case abs(enabled)
        0:
        1: enabled := 8
        OTHER:
            return

    writeReg(core.CMD_COMDIR_NORM, 0, enabled)

PUB Powered(enabled) | tmp
' Enable display power
    case abs(enabled)
        0, 1:
            enabled := abs(enabled) + core.CMD_DISP_OFF
        OTHER:
            return
    writeReg(enabled, 0, 0)

PUB PrechargePeriod(phs1_clks, phs2_clks)
' Set Pre-charge period: 1..15 DCLK
' POR: 2 (both)
    case phs1_clks
        1..15:
        OTHER:
            phs1_clks := 2

    case phs2_clks
        1..15:
        OTHER:
            phs2_clks := 2

    writeReg(core.CMD_SETPRECHARGE, 1, (phs2_clks << 4) | phs1_clks)

PUB Reset()
' Reset the display controller
    if lookup(_RES: 0..63)
        io.High(_RES)
        time.USleep(3)
        io.Low(_RES)
        time.USleep(3)
        io.High(_RES)

PUB Update() | tmp
' Write display buffer to display
    DisplayBounds(0, 0, _disp_xmax, _disp_ymax)

    io.Low(_CS)
    io.High(_DC)
    spi.WriteBytes(_buff_sz, _ptr_drawbuffer)
    io.High(_CS)

PUB WriteBuffer(buff_addr, buff_sz) | tmp
' Write buff_sz bytes of buff_addr to display
    DisplayBounds(0, 0, _disp_xmax, _disp_ymax)

    io.Low(_CS)
    io.High(_DC)
    spi.WriteBytes(buff_sz, buff_addr)
    io.High(_CS)

PRI writeReg(reg_nr, nr_bytes, val) | cmd_packet[2], tmp, ackbit
' Write nr_bytes to reg_nrister 'reg_nr' stored in val
' If nr_bytes is
'   0, It's a command that has no arguments - write the command only
'   1, It's a command with a single byte argument - write the command, then the byte
'   2, It's a command with two arguments - write the command, then the two bytes (encoded as a word)
    case nr_bytes
        0:
            cmd_packet.byte[0] := reg_nr | val 'Simple command
            nr_bytes := 1
        1:
            cmd_packet.byte[0] := reg_nr       'Command w/1-byte argument
            cmd_packet.byte[1] := val
            nr_bytes := 2
        2:
            cmd_packet.byte[0] := reg_nr       'Command w/2-byte argument
            cmd_packet.byte[1] := val & $FF
            cmd_packet.byte[2] := (val >> 8) & $FF
            nr_bytes := 3
        OTHER:
            return

    io.Low(_CS)
    io.Low(_DC)
    spi.WriteBytes(nr_bytes, @cmd_packet)
    io.High(_CS)

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
