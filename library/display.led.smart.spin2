{
    --------------------------------------------
    Filename: display.led.smart.spin2
    Author: Jesse Burt
    Description: Driver for various smart LED arrays
    Copyright (c) 2022
    Started Jun 13, 2021
    Updated Oct 30, 2022
    See end of file for terms of use.
    --------------------------------------------
}
#define MEMMV_NATIVE longmove
#include "graphics.common.spin2h"

CON

    BYTESPERPX      = 4
    MAX_COLOR       = 16_777_215

    BLACK           = $00_00_00_00
    RED             = $FF_00_00_00
    GREEN           = $00_FF_00_00
    BLUE            = $00_00_FF_00
    WHITE           = $FF_FF_FF_00
    WHITE2          = $00_00_00_FF
    CYAN            = $00_FF_FF_00
    MAGENTA         = $FF_00_FF_00
    YELLOW          = $FF_FF_00_00
    CHARTREUSE      = $7F_FF_00_00
    ORANGE          = $FF_60_00_00
    AQUAMARINE      = $7F_FF_D4_00
    PINK            = $FF_5F_5F_00
    TURQUOISE       = $3F_E0_C0_00
    REALWHITE       = $C8_FF_FF_00
    INDIGO          = $3F_00_7F_00
    VIOLET          = $BF_7F_BF_00
    MAROON          = $32_00_10_00
    BROWN           = $0E_06_00_00
    CRIMSON         = $DC_28_3C_00
    PURPLE          = $8C_00_FF_00

    ' TH+TL should be 1250ns +/- 600ns
    ' TH and TL each should be within 150ns of spec
    WS2811          = $2811
    WS2811_BITPER   = 1_250                     ' nsec

    WS2811_T0H      = 250_000 -20_000           ' nsec
    WS2811_T0L      = 1000_000 -120_000         '   (adjusted for overhead)
    WS2811_T1H      = 600_000 -20_000
    WS2811_T1L      = 650_000 -130_000
    WS2811_TRES     = 50

    ' TH+TL should be 1250ns +/- 600ns
    ' TH and TL each should be within 150ns of spec
    WS2812          = $2812
    WS2812_BITPER   = 1_250                     ' nsec

    WS2812_T0H      = 350_000 -20_000           ' nsec
    WS2812_T0L      = 800_000 -120_000          '   (adjusted for overhead)
    WS2812_T1H      = 700_000 -20_000
    WS2812_T1L      = 600_000 -130_000
    WS2812_TRES     = 50

    ' TH+TL should be 1250ns +/- 600ns
    ' TH and TL each should be within 150ns of spec
    WS2812B         = $2812B
    WS2812B_BITPER  = 1_250                     ' nsec

    WS2812B_T0H     = 400_000 -20_000           ' nsec
    WS2812B_T0L     = 850_000 -120_000          '   (adjusted for overhead)
    WS2812B_T1H     = 800_000 -20_000
    WS2812B_T1L     = 450_000 -130_000
    WS2812B_TRES    = 50

    ' TH+TL should be 1250ns +/- 300ns
    ' TH and TL each should be within 150ns of spec
    WS2813          = $2813
    WS2813_BITPER   = 1_250                     ' nsec

    WS2813_T0H      = 375_000 -20_000           ' nsec
    WS2813_T0L      = 875_000 -120_000          '   (adjusted for overhead)
    WS2813_T1H      = 875_000 -20_000
    WS2813_T1L      = 375_000 -130_000
    WS2813_TRES     = 300                       ' usec

    ' TH+TL should be 1250ns +/- 600ns
    ' TH and TL each should be within 150ns of spec
    SK6812_24       = $6812_24
    SK6812_32       = $6812_32
    SK6812_BITPER   = 1_250                     ' nsec

    SK6812_T0H      = 300_000 -20_000           ' nsec
    SK6812_T0L      = 950_000 -120_000          '   (adjusted for overhead)
    SK6812_T1H      = 600_000 -20_000
    SK6812_T1L      = 650_000 -130_000
    SK6812_TRES     = 80                        ' usec

    ' TH+TL should be 1250ns +/- 600ns
    ' TH and TL each should be within 150ns of spec
    TM1803          = $1803
    TM1803_BITPER   = 2_330                     ' nsec

    TM1803_T0H      = 680_000 -20_000           ' nsec
    TM1803_T0L      = 1360_000 -120_000         '   (adjusted for overhead)
    TM1803_T1H      = 1360_000 -20_000
    TM1803_T1L      = 680_000 -130_000
    TM1803_TRES     = 24                        ' usec

VAR

    long _cog
    long _nr_pix
    long _mdl_t0h, _mdl_t0l, _mdl_t1h, _mdl_t1l, _mdl_per, _show, _model
    long _t0h, _t0l, _t1h, _t1l, _smled_pin, _tres

PUB null()
' This is not a top-level object

PUB startx(SMLED_PIN, WIDTH, HEIGHT, MODEL, PTR_DISP)
' Start smart-LED engine
'   Valid values:
'       SMLED_PIN: I/O pin connected to smart-LED strip/array (0..63)
'       WIDTH: strip/array width, in pixels (1..1024)
'       HEIGHT: strip/array height, in pixels (1..1024)
'       MODEL: Specific model of LEDs; see set_model()
'       PTR_DISP: pointer to display buffer
'   NOTE: (WIDTH * HEIGHT) must be <= 1024
'   NOTE: Minimum Fsys = 16MHz
    if (lookdown(SMLED_PIN: 0..63) and ((WIDTH * HEIGHT) <= 1024))
        _smled_pin := SMLED_PIN
        set_model(MODEL)
        _disp_width := width
        _disp_height := height
        _disp_xmax := _disp_width - 1
        _disp_ymax := _disp_height - 1
        _buff_sz := _nr_pix := (WIDTH * HEIGHT)
        _bytesperln := _disp_width * BYTESPERPX
        address(PTR_DISP)
        pinl(_smled_pin)
        return _cog := (cogid() + 1)
    return FALSE

PUB stop()
' Deinitialize engine
    pinf(_smled_pin)
    longfill(@_ptr_drawbuffer, 0, 22)

PUB address(addr)
' Set address of display buffer
    case addr
        0..$7ffff-_buff_sz:
            _ptr_drawbuffer := addr
        other:
            return _ptr_drawbuffer

PUB clear()
' Clear the display buffer
    longfill(_ptr_drawbuffer, _bgcolor, _nr_pix)

PUB plot(x, y, color)
' Plot pixel at (x, y) in color
    if (x < 0 or x > _disp_xmax) or (y < 0 or y > _disp_ymax)
        return                                  ' coords out of bounds, ignore
#ifdef GFX_DIRECT
' direct to display
'   (not implemented)
#else
' buffered display
    long[_ptr_drawbuffer][x + (y * _disp_width)] := color
#endif

#ifndef GFX_DIRECT
PUB point(x, y): pix_clr
' Get color of pixel at x, y
    x := 0 #> x <# _disp_xmax
    y := 0 #> y <# _disp_ymax

    return long[_ptr_drawbuffer][x + (y * _disp_width)]
#endif

PUB set_clock(freq) | bitper
' Set clock frequency used to calculate timings
'   Most strips operate at 800_000 (800kHz)
    bitper := clkfreq / freq                    ' get bit period for freq
    ' calculate T0 and T1 high and low periods
    _t0h := (((_mdl_t0h / _mdl_per) * bitper) / 1_000)
    _t0l := (((_mdl_t0l / _mdl_per) * bitper) / 1_000)
    _t1h := (((_mdl_t1h / _mdl_per) * bitper) / 1_000)
    _t1l := (((_mdl_t1l / _mdl_per) * bitper) / 1_000)

PUB set_model(model): curr_model
' Set model of smart-LED array
'   Valid values:
'       WS2811 ($2811)
'       WS2812 ($2812)
'       WS2812B ($2812B)
'       WS2813 ($2813)
'       SK6812_24 ($6812_24)
'       SK6812_32 ($6812_32)
'       TM1803 ($1803)
    case model
        WS2811:
            _mdl_t0h := WS2811_T0H
            _mdl_t0l := WS2811_T0L
            _mdl_t1h := WS2811_T1H
            _mdl_t1l := WS2811_T1L
            _mdl_per := WS2811_BITPER
            _tres := WS2811_TRES
            _show := @show_rgb24
        WS2812:
            _mdl_t0h := WS2812_T0H
            _mdl_t0l := WS2812_T0L
            _mdl_t1h := WS2812_T1H
            _mdl_t1l := WS2812_T1L
            _mdl_per := WS2812_BITPER
            _tres := WS2812_TRES
            _show := @show_grb24
        WS2812B:
            _mdl_t0h := WS2812B_T0H
            _mdl_t0l := WS2812B_T0L
            _mdl_t1h := WS2812B_T1H
            _mdl_t1l := WS2812B_T1L
            _mdl_per := WS2812B_BITPER
            _tres := WS2812B_TRES
            _show := @show_grb24
        WS2813:
            _mdl_t0h := WS2813_T0H
            _mdl_t0l := WS2813_T0L
            _mdl_t1h := WS2813_T1H
            _mdl_t1l := WS2813_T1L
            _mdl_per := WS2813_BITPER
            _tres := WS2813_TRES
            _show := @show_rgb24
        SK6812_24:
            _mdl_t0h := SK6812_T0H
            _mdl_t0l := SK6812_T0L
            _mdl_t1h := SK6812_T1H
            _mdl_t1l := SK6812_T1L
            _mdl_per := SK6812_BITPER
            _tres := SK6812_TRES
            _show := @show_grb24
        SK6812_32:
            _mdl_t0h := SK6812_T0H
            _mdl_t0l := SK6812_T0L
            _mdl_t1h := SK6812_T1H
            _mdl_t1l := SK6812_T1L
            _mdl_per := SK6812_BITPER
            _tres := SK6812_TRES
            _show := @show_grb32
        TM1803:
            _mdl_t0h := TM1803_T0H
            _mdl_t0l := TM1803_T0L
            _mdl_t1h := TM1803_T1H
            _mdl_t1l := TM1803_T1L
            _mdl_per := TM1803_BITPER
            _tres := TM1803_TRES
            _show := @show_rgb24
        other:
            return _model
    set_clock(800_000)
    return model

PUB show()
' Send display buffer to smart-LED array
'   Call method pointed to (set by set_model())
    _show()

PUB show_grb24() | t0h, t0l, t1h, t1l, smled_pin, tres, pix_nr, color, bit, tmp
' Update G-R-B 24bpp smart-LED array
    longmove(@t0h, @_t0h, 6)                    ' copy timings to local vars

    repeat pix_nr from 0 to _nr_pix-1
        color := long[_ptr_drawbuffer][pix_nr]  ' get current pixel color data
        tmp := color.byte[3]
        color.byte[3] := color.byte[2]          ' swap red, green bytes
        color.byte[2] := tmp
        repeat bit from 0 to 23
            if (color rol= 1) & 1               ' move msb to lsb and isolate
                asm
                    drvh    smled_pin           ' 1-bit
                    waitx   t1h
                    drvl    smled_pin
                    waitx   t1l
                endasm
            else
                asm
                    drvh    smled_pin           ' 0-bit
                    waitx   t0h
                    drvl    smled_pin
                    waitx   t0l
                endasm
    pinl(smled_pin)                             ' reset code (end of array)
    waitus(tres)

PUB show_grb32() | t0h, t0l, t1h, t1l, smled_pin, tres, pix_nr, color, bit, tmp
' Update G-R-B 32bpp smart-LED array
    longmove(@t0h, @_t0h, 6)                    ' copy timings to local vars

    repeat pix_nr from 0 to _nr_pix-1
        color := long[_ptr_drawbuffer][pix_nr]  ' get current pixel color data
        tmp := color.byte[3]
        color.byte[3] := color.byte[2]          ' swap red, green bytes
        color.byte[2] := tmp
        repeat bit from 0 to 31
            if (color rol= 1) & 1               ' move msb to lsb and isolate
                asm
                    drvh    smled_pin           ' 1-bit
                    waitx   t1h
                    drvl    smled_pin
                    waitx   t1l
                endasm
            else
                asm
                    drvh    smled_pin           ' 0-bit
                    waitx   t0h
                    drvl    smled_pin
                    waitx   t0l
                endasm
    pinl(smled_pin)                             ' reset code (end of array)
    waitus(tres)

PUB show_rgb24() | t0h, t0l, t1h, t1l, smled_pin, tres, pix_nr, color, bit
' Update R-G-B 24bpp smart-LED array
    longmove(@t0h, @_t0h, 6)                    ' copy timings to local vars

    repeat pix_nr from 0 to _nr_pix-1
        color := long[_ptr_drawbuffer][pix_nr]  ' get current pixel color data
        repeat bit from 0 to 23
            if (color rol= 1) & 1               ' move msb to lsb and isolate
                asm
                    drvh    smled_pin           ' 1-bit
                    waitx   t1h
                    drvl    smled_pin
                    waitx   t1l
                endasm
            else
                asm
                    drvh    smled_pin           ' 0-bit
                    waitx   t0h
                    drvl    smled_pin
                    waitx   t0l
                endasm
    pinl(smled_pin)                             ' reset code (end of array)
    waitus(tres)

#ifndef GFX_DIRECT
PRI memfill(xs, ys, val, count)
' Fill region of display buffer memory
'   xs, ys: Start of region
'   val: Color
'   count: Number of consecutive memory locations to write
    longfill(_ptr_drawbuffer + ((xs << 1) + (ys * _bytesperln)), ((val >> 8) & $FF) | {
}   ((val << 8) & $FF00), count)
#endif

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

