{
    --------------------------------------------
    Filename: display.led.ht16k33.spin2
    Description: Driver for HT16K33-based LED displays (P2 version, matrix type)
    Author: Jesse Burt
    Copyright (c) 2022
    Created: Oct 11, 2018
    Updated: Oct 5, 2022
    See end of file for terms of use.
    --------------------------------------------
}

#define 1BPP
#define MEMMV_NATIVE bytemove
#include "ht16k33.common.spin2h"
#include "graphics.common.spin2h"

CON

    MAX_COLOR   = 1
    BYTESPERPX  = 1

PUB startx(SCL_PIN, SDA_PIN, I2C_HZ, ADDR_BITS, WIDTH, HEIGHT, ptr_dispbuff): status
' width, height: dimensions of matrix, in pixels
' SCL_PIN, SDA_PIN, I2C_HZ: I2C bus I/O pins and speed
' ADDR_BITS: specify LSBs of slave address (%000..%111)
' ptr_disp: pointer to display buffer, of minimum (W*H)/8 bytes
'   (e.g., for an 8x8 matrix, 8*8=64 / 8 = 8 bytes)
    if (lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and I2C_HZ <= core.I2C_MAX_FREQ)
        if (lookdown(ADDR_BITS: %000..%111))
            if (status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ))
                waitus(core.T_POR)              ' wait for device startup
                _addr_bits := ADDR_BITS << 1
                if (i2c.present(SLAVE_WR | _addr_bits))' test device presence
                    _disp_width := WIDTH
                    _disp_height := HEIGHT
                    _disp_xmax := _disp_width-1
                    _disp_ymax := _disp_height-1
                    _buff_sz := (_disp_width * _disp_height) / 8
                    _bytesperln := _disp_width * BYTESPERPX

                    address(ptr_dispbuff)

                    return
    ' if this point is reached, something above failed
    ' Double check I/O pin assignments, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE

PUB address(addr): curr_addr
' Set framebuffer address
    case addr
        $0004..$7FFFF-_buff_sz:
            _ptr_drawbuffer := addr
            return _ptr_drawbuffer
        other:
            return _ptr_drawbuffer

#ifndef GFX_DIRECT
PUB clear()
' Clear the display buffer
    bytefill(_ptr_drawbuffer, _bgcolor, _buff_sz)
#endif

PUB plot(x, y, color)
' Plot pixel at (x, y) in color
    if ((x < 0 or x > _disp_xmax) or (y < 0 or y > _disp_ymax))
        return                                  ' coords out of bounds, ignore
#ifdef GFX_DIRECT
' direct to display
'   (not implemented)
#else
' buffered display
    x := x + 7
    x := x // 8

    case color
        1:
            byte[_ptr_drawbuffer][y] |= decod(x)
        0:
            byte[_ptr_drawbuffer][y] &= !(decod(x))
        -1:
            byte[_ptr_drawbuffer][y] ^= decod(x)
        other:
            return
#endif

#ifndef GFX_DIRECT
PUB point(x, y): pix_clr
' Get color of pixel at x, y
    x := 0 #> x <# _disp_xmax
    y := 0 #> y <# _disp_ymax

    x := x + 7
    x := x // 8
    return byte[_ptr_drawbuffer][y + (x >> 3) * _disp_width]
#endif

PUB show()
' Write display buffer to display
    writereg(core.DISP_RAM, _ptr_drawbuffer)

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

