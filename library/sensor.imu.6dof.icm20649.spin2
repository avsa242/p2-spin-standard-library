{
    --------------------------------------------
    Filename: sensor.imu.6dof.icm20649.i2c.spin2
    Author: Jesse Burt
    Description: Driver for the TDK/Invensense ICM20649 6DoF IMU
        (P2 version)
    Copyright (c) 2022
    Started Sep 4, 2020
    Updated May 12, 2022
    See end of file for terms of use.
    --------------------------------------------
}
#include "sensor.imu.common.spin2h"

CON

    SLAVE_WR                = core.SLAVE_ADDR
    SLAVE_RD                = core.SLAVE_ADDR|1

    DEF_HZ                  = 100_000
    DEF_ADDR_BITS           = 0
    I2C_MAX_FREQ            = core.I2C_MAX_FREQ

    DEF_SCK_FREQ            = 1_000_000

' Indicate to user apps how many Degrees of Freedom each sub-sensor has
'   (also imply whether or not it has a particular sensor)
    ACCEL_DOF               = 3
    GYRO_DOF                = 3
    MAG_DOF                 = 0
    BARO_DOF                = 0
    DOF                     = ACCEL_DOF + GYRO_DOF + MAG_DOF + BARO_DOF

' Scales and data rates used during calibration/bias/offset process
    CAL_XL_SCL              = 4
    CAL_G_SCL               = 500
    CAL_M_SCL               = 0
    CAL_XL_DR               = 200
    CAL_G_DR                = 200
    CAL_M_DR                = 0

' Bias adjustment (AccelBias(), GyroBias()) read or write
    R                       = 0
    W                       = 1

' Axis-specific constants
    X_AXIS                  = 0
    Y_AXIS                  = 1
    Z_AXIS                  = 2
    ALL_AXIS                = 3

' Temperature scale constants
    CELSIUS                 = 0
    FAHRENHEIT              = 1
    KELVIN                  = 2

' FIFO modes
    BYPASS                  = 2
    FIFO                    = 0
    STREAM                  = 15

' Accelerometer operating modes
    NORMAL                  = 0
    LOWPWR                  = 1

' Clock sources
    INT20                   = 0
    AUTO                    = 1
    CLKSTOP                 = 7

' Temperature scales
    C                       = 0
    F                       = 1

VAR

    long _CS
    word _abiasraw[ACCEL_DOF], _gbiasraw[GYRO_DOF]
    word _abias_fact[ACCEL_DOF]
    word _ares, _gres, _temp_scale
    byte _roomtemp_offs
    byte _addr

OBJ
{ SPI? }
#ifdef ICM20649_SPI
    spi : "com.spi"                             ' SPI engine
#else
#define ICM20649_I2C
{ no, not SPI - default to I2C }
    i2c : "com.i2c"                             ' I2C engine
#endif
    core: "core.con.icm20649"                   ' hw-specific low-level const's

PUB Null()
' This is not a top-level object

#ifdef ICM20649_SPI
PUB Startx(CS_PIN, SCK_PIN, MOSI_PIN, MISO_PIN, SCK_HZ=1_000_000): status
' Start using custom I/O pin settings
    if lookdown(CS_PIN: 0..63) and lookdown(SCK_PIN: 0..63) and {
}   lookdown(MOSI_PIN: 0..63) and lookdown(MISO_PIN: 0..63)
        if (status := spi.init(SCK_PIN, MOSI_PIN, MISO_PIN, core.SPI_MODE, {
}       SCK_HZ))
            _CS := CS_PIN
            waitus(core.G_START_COLD)           ' wait for device startup
            if deviceid() == core.DEVID_RESP    ' validate device
                { read the factory accel bias }
                accelbias(@_abias_fact[X_AXIS], @_abias_fact[Y_AXIS], @_abias_fact[Z_AXIS], R)
                return
    ' if this point is reached, something above failed
    ' Re-check I/O pin assignments, bus speed, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE

#elseifdef ICM20649_I2C

PUB Startx(SCL_PIN, SDA_PIN, I2C_HZ=DEF_HZ, ADDR_BITS=DEF_ADDR_BITS): status
' Start using custom I/O pin settings and bus frequency
    if lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and {
}   I2C_HZ <= core.I2C_MAX_FREQ
        if (status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ))
            _addr := (abs(ADDR_BITS <> 0)) << 1 ' if not 0, then it's 1
            waitus(core.G_START_COLD)           ' wait for device startup
            if i2c.present(SLAVE_WR | _addr)    ' test device bus presence
                if deviceid() == core.DEVID_RESP' validate device
                    return
    ' if this point is reached, something above failed
    ' Re-check I/O pin assignments, bus speed, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE

#endif

PUB Stop()
' As applicable:
'   power down the device
'   stop the low-level interface engine (e.g., I2C, SPI, UART, etc)
#ifdef ICM20649_SPI
    spi.deinit()
#elseifdef ICM20649_I2C
    i2c.deinit()
#endif

PUB Defaults()
' Set factory defaults
    reset()

PUB Preset_Active()
' Like Defaults(), but
'   * powers on sensor
'   * sets scaling factors
    reset()
    powered(true)
    accelscale(4)
    gyroscale(500)
    tempscale(C)

PUB AccelAxisEnabled(mask=-2): curr_mask
' Enable data output for accelerometer (all axes)
'   Valid values: %000 (disable) or %001..%111 (enable), for all axes
'       (default: %111)
'   Any other value polls the chip and returns the current setting
'   NOTE: All axes are affected. The mask parameter is used for
'       compatibility with other IMU drivers.
    curr_mask := 0
    readreg(core.PWR_MGMT_2, 1, @curr_mask)
    case mask
        %000:
            mask := %111 << core.DIS_ACCEL      ' Chip logic is inverse
        %001..%111:                             ' If any bit is set,
            mask := %000                        '   enable the accel
        other:
            curr_mask >>= core.DIS_ACCEL
            curr_mask &= core.DIS_ACCEL_BITS
            return (curr_mask ^ %111)

    mask := (curr_mask & core.DIS_ACCEL_MASK) | mask
    writereg(core.PWR_MGMT_2, 1, @mask)

PUB AccelBias(ptr_x, ptr_y, ptr_z, rw=0) | tmp[3], tc_bit[3]
' Read or write/manually set accelerometer calibration offset values
'   Valid values:
'       When rw == W (1, write)
'           ptr_x, ptr_y, ptr_z: -16384..16383
'       When rw == R (0, read)
'           ptr_x, ptr_y, ptr_z:
'               Pointers to variables to hold current settings for respective axes
'   NOTE: The ICM20649 accelerometer is pre-programmed with offsets, which may
'       or may not be adequate for your application
    ' Discrete reads because the three axes aren't contiguous register pairs
    readreg(core.XA_OFFS_H, 2, @tmp[X_AXIS])
    readreg(core.YA_OFFS_H, 2, @tmp[Y_AXIS])
    readreg(core.ZA_OFFS_H, 2, @tmp[Z_AXIS])

    case rw
        W:
            ' preserve temperature compensation bit
            tc_bit[X_AXIS] := tmp[X_AXIS] & 1
            tc_bit[Y_AXIS] := tmp[Y_AXIS] & 1
            tc_bit[Z_AXIS] := tmp[Z_AXIS] & 1

            ptr_x := (_abias_fact[X_AXIS]-((ptr_x / 8) & $FFFE)) | tc_bit[X_AXIS]
            ptr_y := (_abias_fact[Y_AXIS]-((ptr_y / 8) & $FFFE)) | tc_bit[Y_AXIS]
            ptr_z := (_abias_fact[Z_AXIS]-((ptr_z / 8) & $FFFE)) | tc_bit[Z_AXIS]

            writereg(core.XA_OFFS_H, 2, @ptr_x)
            writereg(core.YA_OFFS_H, 2, @ptr_y)
            writereg(core.ZA_OFFS_H, 2, @ptr_z)
            return
        R:
            long[ptr_x] := ~~tmp[X_AXIS]
            long[ptr_y] := ~~tmp[Y_AXIS]
            long[ptr_z] := ~~tmp[Z_AXIS]
        other:
            return

PUB AccelClearInt() | tmp
' Clears out any interrupts set up on the Accelerometer
'   and resets all Accelerometer interrupt registers to their default values.
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    tmp := 0

PUB AccelData(ptr_x, ptr_y, ptr_z) | tmp[2]
' Reads the Accelerometer output registers
    readreg(core.ACCEL_XOUT_H, 6, @tmp)
    long[ptr_x] := ~~tmp.word[2]
    long[ptr_y] := ~~tmp.word[1]
    long[ptr_z] := ~~tmp.word[0]

PUB AccelDataOverrun(): flag
' Indicates previously acquired data has been overwritten
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    flag := 0

PUB AccelDataRate(rate=-2): curr_rate
' Set accelerometer output data rate, in Hz
'   Valid values: 1..1127 (default: 1127)
'   Any other value polls the chip and returns the current setting
    case rate
        1..1127:
            rate := (1127 / rate) - 1
            writereg(core.ACCEL_SMPLRT_DIV, 2, @rate)
        other:
            curr_rate := 0
            readreg(core.ACCEL_SMPLRT_DIV, 2, @curr_rate)
            return (1127 / (curr_rate + 1))

PUB AccelDataReady(): flag
' Flag indicating new accelerometer data available
'   Returns: TRUE (-1) if new data available, FALSE (0) otherwise
    return xlgdataready()

PUB AccelInt(): flag
' Flag indicating accelerometer interrupt asserted
'   Returns TRUE if interrupt asserted, FALSE if not
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    flag := 0

PUB AccelLowPassFilter(freq=-2): curr_freq | lpf_enable
' Set accelerometer output data low-pass filter cutoff frequency, in Hz
'   Valid values: 6, 12, 24, 50, 111, *246, 473
'   Any other value polls the chip and returns the current setting
    curr_freq := lpf_enable := 0
    readreg(core.ACCEL_CFG, 1, @curr_freq)
    case freq
        0:                                      ' Disable/bypass the LPF
            lpf_enable := %0
        6, 12, 24, 50, 111, 246, 473:
            freq := lookdown(freq: 246, 111, 50, 24, 12, 6, 473) << core.ACCEL_DLPFCFG
            lpf_enable := 1
        other:
            if (curr_freq & 1) <> 1
                return 0                        ' LPF bypass bit set; return 0
            else
                curr_freq := (curr_freq >> core.ACCEL_DLPFCFG) & core.ACCEL_DLPFCFG_BITS
                return lookup(curr_freq: 246, 111, 50, 24, 12, 6, 473)

    freq := (curr_freq & core.ACCEL_DLPFCFG_MASK & core.ACCEL_FCH_MASK) | {
}   freq | lpf_enable
    writereg(core.ACCEL_CFG, 1, @freq)

PUB AccelOpMode(mode=-2): curr_mode
' Set accelerometer operating mode
'   Valid values:
'      *NORMAL (0): Normal operating mode
'       LOWPWR (1): Low-power mode
'   Any other value polls the chip and returns the current setting
    curr_mode := 0
    readreg(core.LP_CONFIG, 1, @curr_mode)
    case mode
        LOWPWR, NORMAL:
            mode <<= core.ACCEL_CYCLE
        other:
            return ((curr_mode >> core.ACCEL_CYCLE) & 1)

    mode := (curr_mode & core.ACCEL_CYCLE_MASK) | mode
    writereg(core.LP_CONFIG, 1, @mode)

PUB AccelScale(scale=-2): curr_scl
' Set accelerometer full-scale range, in g's
'   Valid values: *4, 8, 16, 30
'   Any other value polls the chip and returns the current setting
    curr_scl := 0
    readreg(core.ACCEL_CFG, 1, @curr_scl)
    case scale
        4, 8, 16, 30:
            scale := lookdownz(scale: 4, 8, 16, 30) << core.ACCEL_FS_SEL
            _ares := lookupz(scale >> core.ACCEL_FS_SEL: 0_000122, 0_000244, 0_000488, 0_000976)
            ' 1/8192 (LSB per g), 1/4096, 1/2048, 1/1024 * 1_000_000
        other:
            curr_scl := (curr_scl >> core.ACCEL_FS_SEL) & core.ACCEL_FS_SEL_BITS
            return lookupz(curr_scl: 4, 8, 16, 30)

    scale := ((curr_scl & core.ACCEL_FS_SEL_MASK) | scale) & core.ACCEL_CFG_MASK
    writereg(core.ACCEL_CFG, 1, @scale)

PUB ClockSource(src=-2): curr_src
' Set sensor clock source
'   Valid values:
'       INT20 (0): Internal 20MHz oscillator
'      *AUTO (1): Automatically select best choice (PLL if ready, else internal oscillator)
'       CLKSTOP (7): Stop clock and hold in reset
    curr_src := 0
    readreg(core.PWR_MGMT_1, 1, @curr_src)
    case src
        INT20, AUTO, CLKSTOP:
        other:
            return (curr_src & core.CLKSEL_BITS)

    src := (curr_src & core.CLKSEL_MASK) | src
    writereg(core.PWR_MGMT_1, 1, @src)

PUB DeviceID(): id
' Read device identification
    readreg(core.WHO_AM_I, 1, @id)

PUB FIFOEnabled(state=-2): curr_state
' Enable the FIFO
'   Valid values: TRUE (-1 or 1), *FALSE (0)
'   Any other value polls the chip and returns the current setting
'   NOTE: This disables the interface to the FIFO, but the chip will still write data to it, if FIFO data sources are defined with FIFOSource()
    curr_state := 0
    readreg(core.USER_CTRL, 1, @curr_state)
    case abs(state)
        0, 1:
            state := abs(state) << core.FIFO_EN
            state := ((curr_state & core.FIFO_EN_MASK) | state) & core.USER_CTRL_MASK
            writereg(core.USER_CTRL, 1, @state)
        other:
            return (((curr_state >> core.FIFO_EN) & 1) == 1)

PUB FIFOFull(): flag
' Flag indicating FIFO is full
'   Returns: TRUE (-1) if FIFO is full, FALSE (0) otherwise
'   NOTE: If this flag is set, the oldest data has already been dropped from the FIFO
    readreg(core.INT_STATUS_2, 1, @flag)
    return (((flag >> core.FIFO_OVRFL_INT) & 1) == 1)

PUB FIFOMode(mode=-2): curr_mode
' Set FIFO mode
'   Valid values:
'       BYPASS (2): FIFO disabled
'      *STREAM (0): FIFO enabled; when full, new data overwrites old data
'       FIFO (15): FIFO enabled; when full, no new data will be written to FIFO
'   Any other value polls the chip and returns the current setting
'   NOTE: If no data sources are set using FIFOSource(), the current mode returned will be BYPASS (0), regardless of what the mode was previously set to
    curr_mode := 0
    readreg(core.FIFO_MODE, 1, @curr_mode)
    case mode
        BYPASS:                                 ' If bypassing the FIFO, turn
            fifosource(%00000000)               '   off FIFO data collection
            return
        STREAM, FIFO:
        other:
            curr_mode := curr_mode & 1
            if fifosource(-2)                   ' If there's a mask set with FIFOSource(), return
                return                          '   either STREAM or FIFO as the current mode
            else
                return BYPASS                   ' If not, anything besides 0 (BYPASS) doesn't really matter or make sense
    mode := ((curr_mode & core.FIFO_MODE_MASK) | mode)
    writereg(core.FIFO_MODE, 1, @mode)

PUB FIFORead(nr_bytes, ptr_data)
' Read FIFO data
'   Structure of data stored in FIFO
'   (as applicable, depending on what sources are enabled with FIFOSource()):
'       Accel X MSB, LSB
'       Accel Y MSB, LSB
'       Accel Z MSB, LSB
'       Gyro X MSB, LSB
'       Gyro Y MSB, LSB
'       Gyro Z MSB, LSB
'       Temp MSB, LSB
    readreg(core.FIFO_R_W, nr_bytes, ptr_data)

PUB FIFOSource(mask=-2): curr_mask
' Set FIFO source data, as a bitmask
'   Valid values: 1: enable source, 0: disable source
'       Bits: 43210
'           4: Accelerometer
'           3: Gyro Z-axis
'           2: Gyro Y-axis
'           1: Gyro X-axis
'           0: Temperature
'   Any other value polls the chip and returns the current setting
    case mask
        %00000..%11111:
            writereg(core.FIFO_EN_2, 1, @mask)
        other:
            curr_mask := 0
            readreg(core.FIFO_EN_2, 1, @curr_mask)
            return

PUB FIFOThreshold(level=-2): curr_lvl
' Set FIFO threshold level
'   Valid values:
'   Any other value polls the chip and returns the current setting
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    curr_lvl := 0

PUB FIFOUnreadSamples(): nr_samples
' Number of unread samples stored in FIFO
'   Returns: unsigned 13bit
    readreg(core.FIFO_COUNTH, 2, @nr_samples)

PUB GyroAxisEnabled(mask=-2): curr_mask
' Enable data output for gyroscope (all axes)
'   Valid values: %000 (disable) or %001..%111 (enable), for all axes
'       (default: %111)
'   Any other value polls the chip and returns the current setting
'   NOTE: All axes are affected. The mask parameter is used for
'       compatibility with other IMU drivers.
    curr_mask := 0
    readreg(core.PWR_MGMT_2, 1, @curr_mask)
    case mask
        %000:
            mask := %111                        ' Chip logic is inverse
        %001..%111:                             ' If any bit is set,
            mask := %000                        '   enable the gyro
        other:
            curr_mask &= core.DIS_GYRO_BITS
            return (curr_mask ^ %111)

    mask := ((curr_mask & core.DIS_GYRO_MASK) | mask)
    writereg(core.PWR_MGMT_2, 1, @mask)

PUB GyroBias(ptr_x, ptr_y, ptr_z, rw=0) | tmp[3]
' Read or write/manually set gyroscope calibration offset values
'   Valid values:
'       When rw == W (1, write)
'           ptr_x, ptr_y, ptr_z: -32768..32767
'       When rw == R (0, read)
'           ptr_x, ptr_y, ptr_z:
'               Pointers to variables to hold current settings for respective axes
    case rw
         W:
            ptr_x := -(ptr_x / 4)
            ptr_y := -(ptr_y / 4)
            ptr_z := -(ptr_z / 4)

            writereg(core.XG_OFFS_USRH, 2, @ptr_x)
            writereg(core.YG_OFFS_USRH, 2, @ptr_y)
            writereg(core.ZG_OFFS_USRH, 2, @ptr_z)
            return
        R:
            readreg(core.XG_OFFS_USRH, 2, @tmp[X_AXIS])
            readreg(core.YG_OFFS_USRH, 2, @tmp[Y_AXIS])
            readreg(core.ZG_OFFS_USRH, 2, @tmp[Z_AXIS])
            long[ptr_x] := ~~tmp[X_AXIS]
            long[ptr_y] := ~~tmp[Y_AXIS]
            long[ptr_z] := ~~tmp[Z_AXIS]
        other:
            return

PUB GyroClearInt() | tmp
' Clears out any interrupts set up on the Gyroscope and resets all Gyroscope interrupt registers to their default values.
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    tmp := 0

PUB GyroData(ptr_x, ptr_y, ptr_z) | tmp[2]
' Reads the Gyroscope output registers
    tmp := 0
    readreg(core.GYRO_XOUT_H, 6, @tmp)
    long[ptr_x] := ~~tmp.word[2]
    long[ptr_y] := ~~tmp.word[1]
    long[ptr_z] := ~~tmp.word[0]

PUB GyroDataOverrun()
' dummy method

PUB GyroDataRate(rate=-2): curr_rate
' Set gyroscope output data rate, in Hz
'   Valid values: 1..1100 (default: 1100)
'   Any other value polls the chip and returns the current setting
    case rate
        1..1100:
            rate := (1100 / rate) - 1
            writereg(core.GYRO_SMPLRT_DIV, 1, @rate)
        other:
            curr_rate := 0
            readreg(core.GYRO_SMPLRT_DIV, 1, @curr_rate)
            return 1100 / (curr_rate + 1)

PUB GyroDataReady(): flag
' Flag indicating new gyroscope data available
'   Returns: TRUE (-1) if new data available, FALSE (0) otherwise
    flag := 0
    return xlgdataready()

PUB GyroInt(): flag
' Flag indicating gyroscope interrupt asserted
'   Returns TRUE if interrupt asserted, FALSE if not
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    flag := 0

PUB GyroIntSelect(mode=-2): curr_mode
' Set gyroscope interrupt generator selection
'   Valid values:
'
'   Any other value polls the chip and returns the current setting
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    curr_mode := 0

PUB GyroLowPassFilter(freq=-2): curr_freq | lpf_enable
' Set gyroscope output data low-pass filter cutoff frequency, in Hz
'   Valid values: 6, 12, 24, 51, 120, 152, 197, 361, *12106 (LPF disabled)
'   Any other value polls the chip and returns the current setting
    curr_freq := lpf_enable := 0
    readreg(core.GYRO_CFG1, 1, @curr_freq)
    case freq
        0, 12106:                               ' Disable/bypass the LPF
            lpf_enable := 0
        6, 12, 24, 51, 120, 152, 197, 361:
            freq := lookdownz(freq: 197, 152, 120, 51, 24, 12, 6, 361) << core.GYRO_DLPFCFG
            lpf_enable := 1
        other:
            if (curr_freq & 1) <> 1
                return 12106                    ' LPF bypass set; return 12106
            else
                curr_freq := (curr_freq >> core.GYRO_DLPFCFG) & core.GYRO_DLPFCFG_BITS
                return lookupz(curr_freq: 197, 152, 120, 51, 24, 12, 6, 361)

    freq := (curr_freq & core.GYRO_DLPFCFG_MASK & core.GYRO_FCH_MASK) | freq | lpf_enable
    writereg(core.GYRO_CFG1, 1, @freq)

PUB GyroScale(scale=-2): curr_scl
' Set gyroscope full-scale range, in degrees per second
'   Valid values: *500, 1000, 2000, 4000
'   Any other value polls the chip and returns the current setting
    curr_scl := 0
    readreg(core.GYRO_CFG1, 1, @curr_scl)
    case scale
        500, 1000, 2000, 4000:
            scale := lookdownz(scale: 500, 1000, 2000, 4000) << core.GYRO_FS_SEL
            _gres := lookupz(scale >> core.GYRO_FS_SEL: 15_267, 30_487, 60_975, 121_951)
            ' _gres: (1/65.5, 1/32.8, 1/16.4, 1/8.2) = LSB/scale * 1_000_000
        other:
            curr_scl := (curr_scl >> core.GYRO_FS_SEL) & core.GYRO_FS_SEL_BITS
            return lookupz(curr_scl: 500, 1000, 2000, 4000)

    scale := ((curr_scl & core.GYRO_FS_SEL_MASK) | scale) & core.GYRO_CFG1_MASK
    writereg(core.GYRO_CFG1, 1, @scale)

PUB Interrupt(): flag
' Read interrupt state
'   Bit 3210 (For each bit, 0: No interrupt, 1: Interrupt has been generated)
'       3: Wake-on-motion interrupt
'       2: PLL enabled and ready
'       1: DMP interrupt (INT1)
'       0: I2C master interrupt
    flag := 0
    readreg(core.INT_STATUS, 1, @flag)
    flag &= core.INT_STATUS_MASK

PUB IntMask(mask=-2): curr_mask
' Set interrupt mask
'   Valid values:
'   Bit 3210 (For each bit, 0: disable interrupt, 1: enable interrupt)
'       3: Wake-on-motion interrupt
'       2: PLL enabled and ready
'       1: DMP interrupt (INT1)
'       0: I2C master interrupt
    case mask
        %0000..%1111:
            writereg(core.INT_ENABLE, 1, @mask)
        other:
            curr_mask := 0
            readreg(core.INT_ENABLE, 1, @curr_mask)
            return

PUB MagBias(x, y, z, rw=0)
'dummy method

PUB MagData(x, y, z)
' dummy method

PUB MagDataOverrun()
' dummy method

PUB MagDataRate(rate=-2)
' dummy method

PUB MagDataReady()
' dummy method

PUB MagScale(scale=-2)
' dummy method

PUB Powered(state=-2): curr_state
' Enable device power
'   Valid values: TRUE (-1 or 1), *FALSE (0)
'   Any other value polls the chip and returns the current setting
    curr_state := 0
    readreg(core.PWR_MGMT_1, 1, @curr_state)
    case abs(state)
        0, 1:
            state := (abs(state) ^ 1) << core.SLEEP
        other:
            return (((curr_state >> core.SLEEP) & 1) == 0)

    state := (curr_state & core.SLEEP_MASK) | state
    writereg(core.PWR_MGMT_1, 1, @state)

PUB Reset() | tmp
' Reset the device
    tmp := (1 << core.DEV_RESET)
    writereg(core.PWR_MGMT_1, 1, @tmp)
    waitus(core.G_START_COLD)

PUB TempDataReady(): flag
' Flag indicating new temperature sensor data available
'   Returns TRUE or FALSE
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    flag := 0

PUB TempEnabled(state=-2): curr_state
' Enable the on-chip temperature sensor
'   Valid values: *TRUE (-1 or 1), FALSE (0)
'   Any other value returns the current setting
    curr_state := 0
    readreg(core.PWR_MGMT_1, 1, @curr_state)
    case abs(state)
        0, 1:
            ' invert logic; set bit disables the sensor, clear enables
            state := (abs(state) ^ 1) << core.TEMP_DIS
        other:
            return ((((curr_state >> core.TEMP_DIS) & 1) ^ 1) == 1)

    state := ((curr_state & core.TEMP_DIS_MASK) | state) & core.PWR_MGMT_1_MASK
    writereg(core.PWR_MGMT_1, 1, @state)

PUB Temperature(): temp
' Read temperature, in hundredths of a degree
    temp := 0
    readreg(core.TEMP_OUT_H, 2, @temp)
    temp := (( (temp-_roomtemp_offs) * 1_0000) / 333_87) + 21_00 'XXX unverified
    case _temp_scale
        F:
            return (temp * 9_00 / 5_00) + 32_00
        other:
            return

PUB TempOffset(u8=-2): curr_offs
' Set room temperature offset for Temperature()
'   Valid values: 0..255
'   Any other value returns the current setting
    case u8
        0..255:
            _roomtemp_offs := u8
        other:
            return _roomtemp_offs

PUB TempScale(scale=-2): curr_scl
' Set temperature scale used by Temperature method
'   Valid values:
'       C (0): Celsius
'       F (1): Fahrenheit
'   Any other value returns the current setting
    case scale
        C, F:
            _temp_scale := scale
        other:
            return _temp_scale

PUB XLGDataRate(rate=-2): curr_rate
' Set output data rate, in Hz, of accelerometer and gyroscope
'   Valid values:
'   Any other value polls the chip and returns the current setting
'   NOT IMPLEMENTED (dummy method for API compatibility only)
    curr_rate := 0

PUB XLGDataReady(): flag
' Flag indicating new gyroscope/accelerometer data is ready to be read
'   Returns: TRUE (-1) if new data available, FALSE (0) otherwise
'   NOTE: The update rate of this flag depends upon the GyroDataRate() setting
'       AccelDataRate() has no effect
    readreg(core.INT_STATUS_1, 1, @flag)
    return ((flag & 1) == 1)

PRI bankSel(bank_nr) | cmd_pkt
' Select ICM20649 register bank
'   Valid values: 0..3
'   Any other value is ignored
    if lookdown(bank_nr: 0..3)
#ifdef ICM20649_SPI
        cmd_pkt.byte[0] := core.REG_BANK_SEL
        cmd_pkt.byte[1] := bank_nr << core.USER_BANK
        pinl(_CS)
        spi.wrblock_lsbf(@cmd_pkt, 2)
        pinh(_CS)
#elseifdef ICM20649_I2C
        cmd_pkt.byte[0] := SLAVE_WR
        cmd_pkt.byte[1] := core.REG_BANK_SEL
        cmd_pkt.byte[2] := bank_nr << core.USER_BANK
        i2c.start()
        i2c.wrblock_lsbf(@cmd_pkt, 3)
        i2c.stop()
#endif

PRI readReg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt, tmp[2], i
' Read nr_bytes from the slave device
    case reg_nr                                 ' validate reg #
        core.ACCEL_XOUT_H..core.TEMP_OUT_H:     ' prioritize output data regs
#ifdef ICM20649_SPI
            cmd_pkt.byte[0] := reg_nr | core.R
            pinl(_CS)
            spi.wr_byte(cmd_pkt)
            spi.rdblock_lsbf(@tmp, nr_bytes)
            pinh(_CS)
            repeat i from 0 to nr_bytes-1
                byte[ptr_buff][i] := tmp.byte[nr_bytes-1-i]
#elseifdef ICM20649_I2C
            cmd_pkt.byte[0] := SLAVE_WR | _addr
            cmd_pkt.byte[1] := reg_nr
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 2)
            i2c.start()
            i2c.wr_byte(SLAVE_RD | _addr)
            i2c.rdblock_msbf(ptr_buff, nr_bytes, i2c.NAK)
            i2c.stop()
#endif
            return
        $000, $003, $005, $006, $007, $00f..$013, $017, $019..$01c, $028,{
        } $029, $03b..$052, $066..$069, $070..$072, $074, $076, $102, $103,{
        } $104, $10e..$110, $114, $115, $117, $118, $11a, $11b, $128,{
        } $200..$209, $210..$215, $252..$254, $300..$317:
            banksel(reg_nr.byte[1])
#ifdef ICM20649_SPI
            cmd_pkt.byte[0] := reg_nr.byte[0] | core.R
            pinl(_CS)
            spi.wr_byte(cmd_pkt)
            spi.rdblock_lsbf(@tmp, nr_bytes)
            pinh(_CS)
            repeat i from 0 to nr_bytes-1
                byte[ptr_buff][i] := tmp.byte[nr_bytes-1-i]
#elseifdef ICM20649_I2C
            cmd_pkt.byte[0] := SLAVE_WR | _addr
            cmd_pkt.byte[1] := reg_nr.byte[0]   ' Actual reg # is lower 8 bits
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 2)

            i2c.start()
            i2c.wr_byte(SLAVE_RD | _addr)
            i2c.rdblock_msbf(ptr_buff, nr_bytes, i2c.NAK)
            i2c.stop()
#endif
            banksel(0)
        other:
            return

PRI writeReg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt, tmp, i
' Write nr_bytes to the slave device
    case reg_nr                                 ' validate reg #
        $003, $005, $006, $007, $00f..$013, $066..$069, $072, $076, $102,{
        } $103, $104, $10e..$110, $114, $115, $117, $118, $11a, $11b, $128,{
        } $200..$209, $210..$215, $252..$254, $300..$316:
            banksel(reg_nr.byte[1])
#ifdef ICM20649_SPI
            repeat i from 0 to nr_bytes-1
                tmp.byte[i] := byte[ptr_buff][nr_bytes-1-i]

            cmd_pkt.byte[0] := reg_nr.byte[0]
            pinl(_CS)
            spi.wr_byte(cmd_pkt)
            pinh(_CS)
            spi.wrblock_lsbf(@tmp, nr_bytes)
#elseifdef ICM20649_I2C
            cmd_pkt.byte[0] := SLAVE_WR | _addr
            cmd_pkt.byte[1] := reg_nr.byte[0]   ' Actual reg # is lower 8 bits
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 2)
            i2c.wrblock_msbf(ptr_buff, nr_bytes)
            i2c.stop()
#endif
            banksel(0)
        other:
            return

DAT
{
TERMS OF USE: MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
}

