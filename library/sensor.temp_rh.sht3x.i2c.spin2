{
    --------------------------------------------
    Filename: sensor.temp_rh.sht3x.i2c.spin2
    Author: Jesse Burt
    Description: Driver for Sensirion SHT3x series Temperature/Relative Humidity sensors (P2 version)
    Copyright (c) 2020
    Started Nov 3, 2019
    Updated Aug 1, 2020
    See end of file for terms of use.
    --------------------------------------------
}

CON

    SLAVE_WR        = core.SLAVE_ADDR
    SLAVE_RD        = core.SLAVE_ADDR|1

    DEF_HZ          = 400_000
    I2C_MAX_FREQ    = core.I2C_MAX_FREQ

    MSB             = 1
    LSB             = 0

    NODATA_AVAIL    = $E000_0000

' Measurement repeatability
    LOW             = 0
    MED             = 1
    HIGH            = 2

' Measurement modes
    SINGLE          = 0
    CONT            = 1

' Temperature scales
    C               = 0
    F               = 1

VAR

    word _lasttemp, _lastrh
    byte _temp_scale
    byte _repeatability
    byte _addr_bit
    byte _measure_mode
    byte _drate_hz

OBJ

    i2c : "com.i2c"
    core: "core.con.sht3x"
    crc : "math.crc"

PUB Null()
' This is not a top-level object

PUB Start(SCL_PIN, SDA_PIN, I2C_HZ, ADDR_BIT): okay

    if lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63)
        if I2C_HZ <= core.I2C_MAX_FREQ
            if okay := i2c.Setup (SCL_PIN, SDA_PIN, I2C_HZ)     'I2C Object Started?
                waitms (1)
                (_addr_bit) ? 1 : 0
                if i2c.present (SLAVE_WR | _addr_bit)           'Response from device?
                    if SerialNum()
                        Reset()
                        return okay

    return FALSE                                                'If we got here, something went wrong

PUB Stop()
' Not implemented

PUB ClearStatus()
' Clears the status register
    writeReg(core.CLEARSTATUS, 0, 0)

PUB DataRate(Hz): curr_rate | tmp
' Output data rate, in Hz
'   Valid values: 0_5 (0.5Hz), 1, 2, 4, 10
'   Any other value returns the current setting
'   NOTE: Applies to continuous (CONT) OpMode, only
'   NOTE: Sensirion notes that at the highest measurement rate (10Hz), self-heating of the sensor might occur
    case Hz
        0, 5, 0.5:
            tmp := core.MEAS_PERIODIC_0_5 | lookupz(_repeatability: core.RPT_LO_0_5, core.RPT_MED_0_5, core.RPT_HI_0_5)         ' Measurement rate and repeatability are configured in the same register
            _drate_hz := Hz
        1:
            tmp := core.MEAS_PERIODIC_1 | lookupz(_repeatability: core.RPT_LO_1, core.RPT_MED_1, core.RPT_HI_1)
            _drate_hz := Hz
        2:
            tmp := core.MEAS_PERIODIC_2 | lookupz(_repeatability: core.RPT_LO_2, core.RPT_MED_2, core.RPT_HI_2)
            _drate_hz := Hz
        4:
            tmp := core.MEAS_PERIODIC_4 | lookupz(_repeatability: core.RPT_LO_4, core.RPT_MED_4, core.RPT_HI_4)
            _drate_hz := Hz
        10:
            tmp := core.MEAS_PERIODIC_10 | lookupz(_repeatability: core.RPT_LO_10, core.RPT_MED_10, core.RPT_HI_10)
            _drate_hz := Hz
        OTHER:
            return _drate_hz
    stopContMeas()                                              ' Stop any measurements that might be ongoing
    writeReg(tmp, 0, 0)
    _measure_mode := CONT

PUB Heater(enabled): result | tmp
' Enable/Disable built-in heater
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
'   NOTE: Per SHT3x datasheet, this is for plausability checking only
    tmp := 0
    readReg(core.STATUS, 3, @tmp)
    tmp >>= 8                                                   ' Chop off CRC

    case abs(enabled)
        0, 1:
            enabled := lookupz(abs(enabled): core.HEATERDIS, core.HEATEREN)
        OTHER:
            result := ((tmp >> core.FLD_HEATER) & %1) * TRUE
            return

    writeReg(enabled, 0, 0)

PUB Humidity(): rh | tmp[2]
' Current Relative Humidity, in hundredths of a percent
'   Returns: Integer
'   (e.g., 4762 is equivalent to 47.62%)
    case _measure_mode
        SINGLE:
            oneShotMeasure(@tmp)

        CONT:
            pollMeasure(@tmp)

    _lastrh := (tmp.byte[2] << 8) | tmp.byte[1]

    return calcRH(_lastrh)

PUB IntRHHiClear(level): curr_level | tmp
' High RH interrupt: clear level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core.ALERTLIM_RD_HI_CLR, 3, @tmp)
    case level
        0..100:
            level := rhPct_7bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            curr_level := rh7bit_Pct (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_HI_CLR, 2, @tmp)

PUB IntRHHiThresh(level): curr_level | tmp, chk
' High RH interrupt: trigger level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core.ALERTLIM_RD_HI_SET, 3, @tmp)
    case level
        0..100:
            level := rhPct_7bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            curr_level := rh7bit_Pct (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_HI_SET, 2, @tmp)

PUB IntRHLoClear(level): curr_level | tmp
' Low RH interrupt: clear level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core.ALERTLIM_RD_LO_CLR, 3, @tmp)
    case level
        0..100:
            level := rhPct_7bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            curr_level := rh7bit_Pct (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_LO_CLR, 2, @tmp)

PUB IntRHLoThresh(level): curr_level | tmp
' Low RH interrupt: trigger level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core.ALERTLIM_RD_LO_SET, 3, @tmp)
    case level
        0..100:
            level := rhPct_7bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            curr_level := rh7bit_Pct (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_LO_SET, 2, @tmp)

PUB IntTempHiClear(level): curr_level | tmp
' High temperature interrupt: clear level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core.ALERTLIM_RD_HI_CLR, 3, @tmp)
    case level
        -45..130:
            level := tempC_9bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            curr_level := temp9bit_C (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_HI_CLR, 2, @tmp)

PUB IntTempHiThresh(level): curr_level | tmp
' High temperature interrupt: trigger level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core.ALERTLIM_RD_HI_SET, 3, @tmp)
    case level
        -45..130:
            level := tempC_9bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            curr_level := temp9bit_C (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_HI_SET, 2, @tmp)

PUB IntTempLoClear(level): curr_level | tmp
' Low temperature interrupt: clear level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core.ALERTLIM_RD_LO_CLR, 3, @tmp)
    case level
        -45..130:
            level := tempC_9bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            curr_level := temp9bit_C (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_LO_CLR, 2, @tmp)

PUB IntTempLoThresh(level): curr_level | tmp
' Low temperature interrupt: trigger level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core.ALERTLIM_RD_LO_SET, 3, @tmp)
    case level
        -45..130:
            level := tempC_9bit (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            result := temp9bit_C (tmp)
            return

    tmp >>= 8
    tmp &= core.MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core.ALERTLIM_WR_LO_SET, 2, @tmp)

PUB LastHumidity(): rh
' Previous Relative Humidity measurement, in hundredths of a percent
'   Returns: Integer
'   (e.g., 4762 is equivalent to 47.62%)
    return calcRH(_lastrh)

PUB LastTemperature(): temp
' Previous Temperature measurement, in hundredths of a degree
'   Returns: Integer
'   (e.g., 2105 is equivalent to 21.05 deg C)
    return calcTemp(_lasttemp)

PUB OpMode(mode): curr_mode
' Set device operating mode
    case mode
        SINGLE:
            stopContMeas()
        CONT:
            stopContMeas()
            DataRate (_drate_hz)
        OTHER:
            return _measure_mode

    _measure_mode := mode

PUB Repeatability(level): result | tmp
' Set measurement repeatability/stability
'   Valid values: LOW (0), RPT_MED (1), HIGH (2)
'   Any other value returns the current setting
    case level
        LOW, MED, HIGH:
            _repeatability := level
        OTHER:
            return _repeatability

PUB RHAlertRaw7(rh_pct): result
' Converts Percent RH to 7-bit value, for use with alert threshold setting
'   Valid values: 0..100
'   Any other value is ignored
'   NOTE: Value is left-justified in MSB of word
    case rh_pct
        0..100:
            result := (((rh_pct * 100) / 100 * core.ADC_MAX) / 100) & $FE00
            return
        OTHER:
            return

PUB RHAlertPct(rh_7b): result
' Converts 7-bit value to Percent RH, for use with alert threshold settings
'   Valid values: $02xx..$FExx (xx = 00)
'   NOTE: Value must be left-justified in MSB of word
    rh_7b &= $FE00                                              ' Mask off temperature
    rh_7b *= 10000                                              ' Scale up
    rh_7b /= core.ADC_MAX                                       ' Scale to %
    result := rh_7b
    return

PUB TempAlertRaw9(temp_c): result | scale
' Converts degrees C to 9-bit value, for use with alert threshold settings
'   Valid values: -45..130
    case temp_c
        -45..130:
            scale := 10_000                                     ' Fixed-point scale
            result := ((((temp_c * scale) + (45 * scale)) / 175 * core.ADC_MAX)) / scale
            result := (result >> 7) & $001FF
            return
        OTHER:
            return

PUB TempAlertDeg(temp_9b): result | scale
' Converts raw 9-bit value to temperature in
'   Returns: hundredths of a degree C (0..511 ror -4500..12966 or -45.00C 129.66C)
'   Valid values: 0..511
'   Any other value is ignored
    scale := 100
    case temp_9b
        0..511:
            result := (temp_9b << 7)
            result := ((175 * (result * scale)) / core.ADC_MAX)-(45 * scale)
            return
        OTHER:
            return

PUB Temperature(): temp | tmp[2]
' Current Temperature, in hundredths of a degree
'   Returns: Integer
'   (e.g., 2105 is equivalent to 21.05 deg C)
    case _measure_mode
        SINGLE:
            oneShotMeasure(@tmp)

        CONT:
            pollMeasure(@tmp)

    _lasttemp := (tmp.byte[5] << 8) | tmp.byte[4]

    return calcTemp(_lasttemp)

PUB TempScale(scale=-2): curr_scale
' Set temperature scale used by Temperature method
'   Valid values:
'       C (0): Celsius
'       F (1): Fahrenheit
'   Any other value returns the current setting
    case scale
        C, F:
            _temp_scale := scale
        OTHER:
            return _temp_scale

PUB SerialNum(): result
' Return device Serial Number
    readReg(core.READ_SERIALNUM, 4, @result)

PUB Reset()
' Perform Soft Reset
    writeReg(core.SOFTRESET, 0, 0)
    waitms (1)

PUB LastCRC(): result

    result := 0
    readReg(core.STATUS, 3, @result)
    result := (result & %1) * TRUE

PUB LastCMD(): result

    result := 0
    readReg(core.STATUS, 3, @result)
    result := ((result >> 1) & %1) * TRUE

PRI calcRH(rh_word): rh_cal

    return (100 * (rh_word * 100)) / core.ADC_MAX

PRI calcTemp(temp_word): temp_cal

    case _temp_scale
        C:
            return ((175 * (temp_word * 100)) / core.ADC_MAX)-(45 * 100)
        F:
            return ((315 * (temp_word * 100)) / core.ADC_MAX)-(49 * 100)
        OTHER:
            return FALSE

PRI oneShotMeasure(buff_addr)

    case _repeatability
        LOW, MED, HIGH:
            readReg(lookupz(_repeatability: core.MEAS_LOWREP, core.MEAS_MEDREP, core.MEAS_HIGHREP), 6, buff_addr)
        OTHER:
            return

PRI pollMeasure(buff_addr)

    if readReg(core.FETCHDATA, 6, buff_addr) == NODATA_AVAIL
        return

PRI rhPct_7bit(rh_pct): result
' Converts Percent RH to 7-bit value, for use with alert threshold setting
'   Valid values: 0..100
'   Any other value is ignored
'   NOTE: Value is left-justified in MSB of word
    case rh_pct
        0..100:
            result := (((rh_pct * 100) / 100 * core.ADC_MAX) / 100) & $FE00
            return
        OTHER:
            return

PRI rh7bit_Pct(rh_7b): result
' Converts 7-bit value to Percent RH, for use with alert threshold settings
'   Valid values: $02xx..$FExx (xx = 00)
'   NOTE: Value must be left-justified in MSB of word
    rh_7b &= $FE00                                              ' Mask off temperature
    rh_7b *= 10000                                              ' Scale up
    rh_7b /= core.ADC_MAX                                       ' Scale to %
    result := rh_7b
    return

PRI stopContMeas()
' Stop continuous measurement mode
    writeReg(core.BREAK_STOP, 0, 0)

PRI swap (word_addr)
' Swap byte order of a WORD
    byte[word_addr][2] := byte[word_addr][0]
    byte[word_addr][0] := byte[word_addr][1]
    byte[word_addr][1] := byte[word_addr][2]
    byte[word_addr][2] := 0

PRI tempC_9bit(temp_c): result | scale
' Converts degrees C to 9-bit value, for use with alert threshold settings
'   Valid values: -45..130
    case temp_c
        -45..130:
            scale := 10_000                                     ' Fixed-point scale
            result := ((((temp_c * scale) + (45 * scale)) / 175 * core.ADC_MAX)) / scale
            result := (result >> 7) & $001FF
            return
        OTHER:
            return

PRI temp9bit_C(temp_9b): result | scale
' Converts raw 9-bit value to temperature in
'   Returns: hundredths of a degree C (0..511 ror -4500..12966 or -45.00C 129.66C)
'   Valid values: 0..511
'   Any other value is ignored
    scale := 100
    case temp_9b
        0..511:
            result := (temp_9b << 7)
            result := ((175 * (result * scale)) / core.ADC_MAX)-(45 * scale)
            return
        OTHER:
            return

PRI readReg(reg_nr, nr_bytes, buff_addr): result | cmd_packet, tmp, ackbit
' Read nr_bytes from the slave device into the address stored in buff_addr
    writeReg(reg_nr, 0, 0)
    case reg_nr                                                 'Basic register validation
        core.READ_SERIALNUM:                                    'S/N Read Needs delay before repeated start
            waitus (500)
        core.MEAS_HIGHREP..core.MEAS_LOWREP:
        core.STATUS:
        core.FETCHDATA:
        core.ALERTLIM_WR_LO_SET..core.ALERTLIM_WR_HI_SET, core.ALERTLIM_RD_LO_SET..core.ALERTLIM_RD_HI_SET:
        OTHER:
            return

    i2c.start()
    ackbit := i2c.write (SLAVE_RD | _addr_bit)
    if ackbit == i2c#NAK
        i2c.stop()
        return NODATA_AVAIL                                     'NAK from sensor - no data available
    repeat tmp from nr_bytes-1 to 0
        byte[buff_addr][tmp] := i2c.read (tmp == 0)
    i2c.stop()
    return

PRI writeReg(reg_nr, nr_bytes, buff_addr) | cmd_packet, tmp, chk
' Write nr_bytes to the slave device from the address stored in buff_addr
    cmd_packet.byte[0] := (SLAVE_WR | _addr_bit)
    cmd_packet.byte[1] := reg_nr.byte[MSB]
    cmd_packet.byte[2] := reg_nr.byte[LSB]

    i2c.start()
    repeat tmp from 0 to 2
        i2c.write (cmd_packet.byte[tmp])

    if nr_bytes > 0
        chk := crc.SensirionCRC8 (buff_addr, 2)
        swap(buff_addr)
        byte[buff_addr][2] := chk
        repeat tmp from 0 to nr_bytes
            i2c.write (byte[buff_addr][tmp])
    i2c.stop()
    result := long[buff_addr]
    case reg_nr                                                 'Basic register validation
        core.CLEARSTATUS:
        core.HEATEREN, core.HEATERDIS:
        core.MEAS_HIGHREP..core.MEAS_LOWREP:
            waitms (20)
        core.SOFTRESET:
            waitms (10)
        core.ALERTLIM_WR_LO_SET..core.ALERTLIM_WR_HI_SET, core.ALERTLIM_RD_LO_SET..core.ALERTLIM_RD_HI_SET:
        OTHER:
            return

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
