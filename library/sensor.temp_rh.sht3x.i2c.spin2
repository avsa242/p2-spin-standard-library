{
    --------------------------------------------
    Filename: sensor.temp_rh.sht3x.i2c.spin2
    Author: Jesse Burt
    Description: Driver for Sensirion SHT3x series Temperature/Relative Humidity sensors (P2 version)
    Copyright (c) 2019
    Started Nov 3, 2019
    Updated Nov 3, 2019
    See end of file for terms of use.
    --------------------------------------------
}

CON

    SLAVE_WR        = core#SLAVE_ADDR
    SLAVE_RD        = core#SLAVE_ADDR|1

    DEF_SCL         = 28
    DEF_SDA         = 29
    DEF_HZ          = 400_000
    I2C_MAX_FREQ    = core#I2C_MAX_FREQ

    MSB             = 1
    LSB             = 0

    NODATA_AVAIL    = $E000_0000
' Measurement repeatability
    RPT_LOW         = 0
    RPT_MED         = 1
    RPT_HIGH        = 2

' Measurement modes
    MMODE_POLL      = 0
    MMODE_PERIODIC  = 1

VAR

    word _lasttemp, _lastrh
    byte _repeatability
    byte _addr_bit
    byte _measure_mode
    byte _mps

OBJ

    i2c : "com.i2c"
    core: "core.con.sht3x"
    time: "time"
    crc : "math.crc"

PUB Null
' This is not a top-level object

PUB Start: okay                                                 'Default to "standard" Propeller I2C pins and 400kHz

    okay := Startx (DEF_SCL, DEF_SDA, DEF_HZ, 0)

PUB Startx(SCL_PIN, SDA_PIN, I2C_HZ, ADDR_BIT): okay

    if lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63)
        if I2C_HZ =< core#I2C_MAX_FREQ
            if okay := i2c.Setup (SCL_PIN, SDA_PIN, I2C_HZ)    'I2C Object Started?
                time.MSleep (1)
                case ADDR_BIT
                    0:
                        _addr_bit := 0
                    OTHER:
                        _addr_bit := 1 << 1
                if i2c.present (SLAVE_WR | _addr_bit)           'Response from device?
                    if SerialNum
                        Reset
                        return okay

    return FALSE                                                'If we got here, something went wrong

PUB Stop
' Not implemented

PUB AlertTrigHiRH(level) | tmp, chk
' Set RH high alert threshold trigger level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core#ALERTLIM_RD_HI_SET, 3, @tmp)
    case leve
        0..100:
            level := RHAlertRaw7 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            result := RHAlertPct (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_HI_SET, 2, @tmp)

PUB AlertClearHiRH(level) | tmp
' Set RH high alert threshold clear level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core#ALERTLIM_RD_HI_CLR, 3, @tmp)
    case level
        0..100:
            level := RHAlertRaw7 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            result := RHAlertPct (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_HI_CLR, 2, @tmp)

PUB AlertTrigLoRH(level) | tmp
' Set RH low alert threshold trigger level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core#ALERTLIM_RD_LO_SET, 3, @tmp)
    case level
        0..100:
            level := RHAlertRaw7 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            result := RHAlertPct (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_LO_SET, 2, @tmp)

PUB AlertClearLoRH(level) | tmp
' Set RH low alert threshold clear level, in percent
'   Valid values: 0..100
'   Any other value polls the chip and returns the current setting, in hundredths of a percent
    tmp := 0
    readReg(core#ALERTLIM_RD_LO_CLR, 3, @tmp)
    case level
        0..100:
            level := RHAlertRaw7 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            result := RHAlertPct (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_RH
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_LO_CLR, 2, @tmp)

PUB AlertTrigHiTemp(level) | tmp
' Set Temperature high alert threshold trigger level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core#ALERTLIM_RD_HI_SET, 3, @tmp)
    case level
        -45..130:
            level := TempAlertRaw9 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            result := TempAlertDeg (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_HI_SET, 2, @tmp)

PUB AlertClearHiTemp(level) | tmp
' Set Temperature high alert threshold clear level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core#ALERTLIM_RD_HI_CLR, 3, @tmp)
    case level
        -45..130:
            level := TempAlertRaw9 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            result := TempAlertDeg (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_HI_CLR, 2, @tmp)

PUB AlertTrigLoTemp(level) | tmp
' Set Temperature low alert threshold trigger level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core#ALERTLIM_RD_LO_SET, 3, @tmp)
    case level
        -45..130:
            level := TempAlertRaw9 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            result := TempAlertDeg (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_LO_SET, 2, @tmp)

PUB AlertClearLoTemp(level) | tmp
' Set Temperature low alert threshold clear level, in degrees C
'   Valid values: -45..130
'   Any other value polls the chip and returns the current setting, in hundredths of a degree C
    tmp := 0
    readReg(core#ALERTLIM_RD_LO_CLR, 3, @tmp)
    case level
        -45..130:
            level := TempAlertRaw9 (level)
        OTHER:
            tmp >>= 8                                           ' Chop off CRC
            tmp &= $1FF
            result := TempAlertDeg (tmp)
            return
    tmp >>= 8
    tmp &= core#MASK_ALERTLIM_TEMP
    tmp := (tmp | level)
    writeReg(core#ALERTLIM_WR_LO_CLR, 2, @tmp)

PUB Break
' Stop Periodic Data Acquisition Mode
    writeReg(core#BREAK_STOP, 0, 0)

PUB ClearStatus
' Clears the status register
    writeReg(core#CLEARSTATUS, 0, 0)

PUB Heater(enabled) | tmp
' Enable/Disable built-in heater
'   Valid values: TRUE (-1 or 1), FALSE (0)
'   Any other value polls the chip and returns the current setting
'   NOTE: Per SHT3x datasheet, this is for plausability checking only
    tmp := 0
    readReg(core#STATUS, 3, @tmp)
    tmp >>= 8                                                   ' Chop off CRC

    case ||enabled
        0, 1:
            enabled := lookupz(||enabled: core#HEATERDIS, core#HEATEREN)
        OTHER:
            result := ((tmp >> core#FLD_HEATER) & %1) * TRUE
            return

    writeReg(enabled, 0, 0)

PUB Humidity
' Return Relative Humidity from last measurement, in hundredths of a percent
'   (e.g., 4762 is equivalent to 47.62%)
    result := (100 * (_lastrh * 100)) / core#ADC_MAX
    return

PUB Measure | tmp[2]
' Perform measurement
'   Returns: Temperature and Humidity as most-significant and least-significant words, respectively (unprocessed)
'   Also sets variables readable with Temperature and Humidity methods
    case _measure_mode
        MMODE_POLL:
            case _repeatability
                RPT_LOW, RPT_MED, RPT_HIGH:
                    readReg(lookupz(_repeatability: core#MEAS_LOWREP, core#MEAS_MEDREP, core#MEAS_HIGHREP), 6, @tmp)
                OTHER:
                    return

        MMODE_PERIODIC:
            if readReg(core#FETCHDATA, 6, @tmp) == NODATA_AVAIL
                return
    _lasttemp := (tmp.byte[5] << 8) | tmp.byte[4]
    _lastrh := (tmp.byte[2] << 8) | tmp.byte[1]
    return (_lasttemp << 16) | (_lastrh)

PUB MeasureMode(mode)

    case mode
        MMODE_POLL:
            Break
        MMODE_PERIODIC:
            MeasureRate (_mps)
        OTHER:
            return _measure_mode

    _measure_mode := mode

PUB MeasureRate(mps) | tmp
' Set measurement rate (for periodic measure mode), in measurements per second
'   Valid values: 0/5/0.5, 1, 2, 4, 10
'   Any other value returns the current setting
'   NOTE: Sensirion notes that at the highest measurement rate (10mps), self-heating of the sensor might occur
    case mps
        0, 5, 0.5:
            tmp := core#MEAS_PERIODIC_0_5 | lookupz(_repeatability: core#RPT_LO_0_5, core#RPT_MED_0_5, core#RPT_HI_0_5)
            _mps := mps
        1:
            tmp := core#MEAS_PERIODIC_1 | lookupz(_repeatability: core#RPT_LO_1, core#RPT_MED_1, core#RPT_HI_1)
            _mps := mps
        2:
            tmp := core#MEAS_PERIODIC_2 | lookupz(_repeatability: core#RPT_LO_2, core#RPT_MED_2, core#RPT_HI_2)
            _mps := mps
        4:
            tmp := core#MEAS_PERIODIC_4 | lookupz(_repeatability: core#RPT_LO_4, core#RPT_MED_4, core#RPT_HI_4)
            _mps := mps
        10:
            tmp := core#MEAS_PERIODIC_10 | lookupz(_repeatability: core#RPT_LO_10, core#RPT_MED_10, core#RPT_HI_10)
            _mps := mps
        OTHER:
            return _mps
    Break                                                       ' Stop any measurements that might be ongoing
    writeReg(tmp, 0, 0)
    _measure_mode := MMODE_PERIODIC

PUB Repeatability(level) | tmp
' Set measurement repeatability/stability
'   Valid values: RPT_LOW (0), RPT_MED (1), RPT_HIGH (2)
'   Any other value returns the current setting
    case level
        RPT_LOW, RPT_MED, RPT_HIGH:
            _repeatability := level
        OTHER:
            return _repeatability

PUB RHAlertRaw7(rh_pct)
' Converts Percent RH to 7-bit value, for use with alert threshold setting
'   Valid values: 0..100
'   Any other value is ignored
'   NOTE: Value is left-justified in MSB of word
    case rh_pct
        0..100:
            result := (((rh_pct * 100) / 100 * core#ADC_MAX) / 100) & $FE00
            return
        OTHER:
            return

PUB RHAlertPct(rh_7b)
' Converts 7-bit value to Percent RH, for use with alert threshold settings
'   Valid values: $02xx..$FExx (xx = 00)
'   NOTE: Value must be left-justified in MSB of word
    rh_7b &= $FE00                                              ' Mask off temperature
    rh_7b *= 10000                                              ' Scale up
    rh_7b /= core#ADC_MAX                                       ' Scale to %
    result := rh_7b
    return

PUB TempAlertRaw9(temp_c) | scale
' Converts degrees C to 9-bit value, for use with alert threshold settings
'   Valid values: -45..130
    case temp_c
        -45..130:
            scale := 10_000                                     ' Fixed-point scale
            result := ((((temp_c * scale) + (45 * scale)) / 175 * core#ADC_MAX)) / scale
            result := (result >> 7) & $001FF
            return
        OTHER:
            return

PUB TempAlertDeg(temp_9b) | scale
' Converts raw 9-bit value to temperature in
'   Returns: hundredths of a degree C (0..511 -> -4500..12966 or -45.00C 129.66C)
'   Valid values: 0..511
'   Any other value is ignored
    scale := 100
    case temp_9b
        0..511:
            result := (temp_9b << 7)
            result := ((175 * (result * scale)) / core#ADC_MAX)-(45 * scale)
            return
        OTHER:
            return

PUB TemperatureC
' Return Temperature from last measurement, in hundredths of a degree Celsius
'   (e.g., 2105 is equivalent to 21.05 deg C)
    return ((175 * (_lasttemp * 100)) / core#ADC_MAX)-(45 * 100)

PUB TemperatureF
' Return Temperature from last measurement, in hundredths of a degree Fahrenheit
'   (e.g., 6989 is equivalent to 69.89 deg F)
    return ((315 * (_lasttemp * 100)) / core#ADC_MAX)-(49 * 100)

PUB SerialNum
' Return device Serial Number
    readReg(core#READ_SERIALNUM, 4, @result)

PUB Reset
' Perform Soft Reset
    writeReg(core#SOFTRESET, 0, 0)
    time.MSleep (1)

PUB LastCRC

    result := 0
    readReg( core#STATUS, 3, @result)
    result := (result & %1) * TRUE

PUB LastCMD

    result := 0
    readReg( core#STATUS, 3, @result)
    result := ((result >> 1) & %1) * TRUE

PRI swap (word_addr)
' Swap byte order of a WORD
    byte[word_addr][2] := byte[word_addr][0]
    byte[word_addr][0] := byte[word_addr][1]
    byte[word_addr][1] := byte[word_addr][2]
    byte[word_addr][2] := 0

PRI readReg(reg, nr_bytes, buff_addr) | cmd_packet, tmp, ackbit
' Read nr_bytes from the slave device into the address stored in buff_addr
    writeReg(reg, 0, 0)
    case reg                                                    'Basic register validation
        core#READ_SERIALNUM:                                    'S/N Read Needs delay before repeated start
            time.USleep (500)
        core#MEAS_HIGHREP..core#MEAS_LOWREP:
        core#STATUS:
        core#FETCHDATA:
        core#ALERTLIM_WR_LO_SET..core#ALERTLIM_WR_HI_SET, core#ALERTLIM_RD_LO_SET..core#ALERTLIM_RD_HI_SET:
        OTHER:
            return

    i2c.start
    ackbit := i2c.write (SLAVE_RD | _addr_bit)
    if ackbit
        i2c.stop
        return NODATA_AVAIL                                     'NAK from sensor - no data available
    repeat tmp from 0 to nr_bytes-1
        byte[buff_addr][(nr_bytes-1)-tmp] := i2c.read (tmp == nr_bytes-1)
    i2c.stop
    return

PRI writeReg(reg, nr_bytes, buff_addr) | cmd_packet, tmp, chk
' Write nr_bytes to the slave device from the address stored in buff_addr
    cmd_packet.byte[0] := (SLAVE_WR | _addr_bit)
    cmd_packet.byte[1] := reg.byte[MSB]
    cmd_packet.byte[2] := reg.byte[LSB]

    i2c.start
    repeat tmp from 0 to 2
        i2c.write (cmd_packet.byte[tmp])

    if nr_bytes > 0
        chk := crc.SensirionCRC8 (buff_addr, 2)
        swap(buff_addr)
        byte[buff_addr][2] := chk
        repeat tmp from 0 to nr_bytes
            i2c.write (byte[buff_addr][tmp])
    i2c.stop
    result := long[buff_addr]
    case reg                                                    'Basic register validation
        core#CLEARSTATUS:
        core#HEATEREN, core#HEATERDIS:
        core#MEAS_HIGHREP..core#MEAS_LOWREP:
            time.MSleep (20)
        core#SOFTRESET:
            time.MSleep (10)
        core#ALERTLIM_WR_LO_SET..core#ALERTLIM_WR_HI_SET, core#ALERTLIM_RD_LO_SET..core#ALERTLIM_RD_HI_SET:
        OTHER:
            return

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
