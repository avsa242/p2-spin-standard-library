{
    --------------------------------------------
    Filename: sensor.temp_rh.shtc3.i2c.spin2
    Author: Jesse Burt
    Description: Driver for the Sensirion SHT-C3
        Temperature/RH sensor (P2 version)
    Copyright (c) 2021
    Started Jul 27, 2020
    Updated Feb 15, 2021
    See end of file for terms of use.
    --------------------------------------------
}

CON

    SLAVE_WR            = core.SLAVE_ADDR
    SLAVE_RD            = core.SLAVE_ADDR|1

    DEF_HZ              = 100_000
    I2C_MAX_FREQ        = core.I2C_MAX_FREQ

' Operating modes
    NORMAL              = 0
    LOWPOWER            = 1

' Temperature scales
    C                   = 0
    F                   = 1

VAR

    byte _opmode, _temp_scale

OBJ

    i2c : "com.i2c"                             ' I2C engine
    core: "core.con.shtc3.spin"                 ' hw-specific constants
    crc : "math.crc"                            ' crc algorithms

PUB Null()
' This is not a top-level object

PUB Startx(SCL_PIN, SDA_PIN, I2C_HZ=DEF_HZ): status
' Start using custom I/O settings and I2C bus speed
    if lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and {
}   I2C_HZ <= core.I2C_MAX_FREQ
        if (status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ))
            waitus(core.T_POR)                  ' wait for device startup
            if i2c.present(SLAVE_WR)            ' test device bus presence
                reset()
                if deviceid() == core.DEVID_RESP' validate device
                    return status
    ' if this point is reached, something above failed
    ' Double check I/O pin assignments, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE

PUB Stop()

    i2c.deinit()

PUB Defaults()
' Set factory defaults

PUB DeviceID(): id
' Read device identification
'   Returns: $0807
    readreg(core.DEVID, 2, @id)
    id &= $083F                                 ' only some bits are relevant

PUB HumData(): rh_adc
' Read relative humidity data
'   Returns: u16
    rh_adc := 0
    writereg(core.WAKEUP, 0, 0)                 ' Wake the sensor up
    waitus(core.T_POR)

    if _opmode == NORMAL                        ' Take a measurement
        readreg(core.NML_RHFIRST_CS, 3, @rh_adc)
    elseif _opmode == LOWPOWER
        readreg(core.LP_RHFIRST_CS, 3, @rh_adc)

    writereg(core.SLEEP, 0, 0)                  ' Go back to sleep

PUB Humidity(): rh
' Current Relative Humidity, in hundredths of a percent
'   Returns: Integer
'   (e.g., 4762 is equivalent to 47.62%)
    rh := calcrh(humdata())

PUB OpMode(mode): curr_mode
' Set device operating mode
'   Valid values: NORMAL (0), LOWPOWER (1)
'   Any other value returns the current setting
    case mode
        NORMAL, LOWPOWER:
            _opmode := mode
        other:
            return _opmode

PUB Reset()
' Reset the device
    writereg(core.WAKEUP, 0, 0)                 ' avoid NAK from sensor when
    writereg(core.RESET, 0, 0)                  '   sending reset
    waitus(core.T_POR)

PUB TempData(): temp_adc
' Read temperature data
'   Returns: s16
    temp_adc := 0
    writereg(core.WAKEUP, 0, 0)                 ' Wake the sensor up
    waitus(core.T_POR)

    if _opmode == NORMAL                        ' Take a measurement
        readreg(core.NML_TEMPFIRST_CS, 3, @temp_adc)
    elseif _opmode == LOWPOWER
        readreg(core.LP_TEMPFIRST_CS, 3, @temp_adc)

    writereg(core.SLEEP, 0, 0)                  ' Go back to sleep

PUB Temperature(): deg
' Current Temperature, in hundredths of a degree
'   Returns: Integer
'   (e.g., 2105 is equivalent to 21.05 deg C)
    return calctemp(tempdata())

PUB TempScale(scale): curr_scale
' Set temperature scale used by Temperature method
'   Valid values:
'       C (0): Celsius
'       F (1): Fahrenheit
'   Any other value returns the current setting
    case scale
        C, F:
            _temp_scale := scale
        other:
            return _temp_scale

PRI calcRH(rh_word): rh_cal

    return (rh_word * 100_00) / 65535

PRI calcTemp(temp_word): temp_cal

    case _temp_scale
        C:
            return ((175 * (temp_word * 100)) / 65535)-45_00
        F:
            return ((315 * (temp_word * 100)) / 65535)-49_00
        other:
            return FALSE

PRI readReg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt, tmp, crc_r
' Read nr_bytes from the slave device into ptr_buff
    tmp := 0
    case reg_nr                                 ' validate reg num
        $44DE, $5C24, $6458, $7CA2:             ' meas. with clock-stretching
            cmd_pkt.byte[0] := SLAVE_WR
            cmd_pkt.byte[1] := reg_nr.byte[1]
            cmd_pkt.byte[2] := reg_nr.byte[0]

            i2c.start()                         ' Send measurement command
            i2c.wrblock_lsbf(@cmd_pkt, 3)
            i2c.stop()

            i2c.start()                         ' read measurement
            i2c.write(SLAVE_RD)
            i2c.rdblock_msbf(@tmp, nr_bytes, i2c.NAK)
            i2c.stop()
            crc_r := tmp.byte[0]                ' crc read in for data
            tmp >>= 8                           ' chop it off of the data
            if crc.sensirioncrc8(@tmp, 2) == crc_r
                long[ptr_buff] := tmp
        $401A, $58E0, $609C, $7866:             ' meas. without clock-stretch
            cmd_pkt.byte[0] := SLAVE_WR
            cmd_pkt.byte[1] := reg_nr.byte[1]
            cmd_pkt.byte[2] := reg_nr.byte[0]

            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 3)
            i2c.stop()

            i2c.wait(SLAVE_RD)
            i2c.rdblock_msbf(@tmp, nr_bytes, i2c.NAK)
            i2c.stop()
            waitms(1)
            crc_r := tmp.byte[0]                ' crc read in for data
            tmp >>= 8                           ' chop it off of the data
            if crc.sensirioncrc8(@tmp, 2) == crc_r
                long[ptr_buff] := tmp
        core.DEVID:
            cmd_pkt.byte[0] := SLAVE_WR
            cmd_pkt.byte[1] := reg_nr.byte[1]
            cmd_pkt.byte[2] := reg_nr.byte[0]

            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 3)
            i2c.stop()

            i2c.start()
            i2c.write(SLAVE_RD)
            i2c.rdblock_msbf(@tmp, 3, i2c.NAK)
            i2c.stop()
            crc_r := tmp.byte[0]                ' crc read in for data
            tmp >>= 8                           ' chop it off of the data
            if crc.sensirioncrc8(@tmp, 2) == crc_r
                long[ptr_buff] := tmp
        other:
            return

PRI writeReg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt
' Write nr_bytes to the slave device from ptr_buff
    case reg_nr
        core.WAKEUP, core.RESET, core.SLEEP:
            cmd_pkt.byte[0] := SLAVE_WR
            cmd_pkt.byte[1] := reg_nr.byte[1]
            cmd_pkt.byte[2] := reg_nr.byte[0]
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 3)
            i2c.stop()
        other:
            return


DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
