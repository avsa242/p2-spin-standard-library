{
    --------------------------------------------
    Filename: signal.audio.amp.max9744.i2c.spin2
    Author: Jesse Burt
    Description: Driver for the MAX9744 20W audio amplifier IC (P2 version)
    Copyright (c) 2021
    Started Nov 22, 2020
    Updated Nov 21, 2022
    See end of file for terms of use.
    --------------------------------------------
}

CON

    SLAVE_WR        = core.SLAVE_ADDR
    SLAVE_RD        = core.SLAVE_ADDR|1

    DEF_HZ          = 100_000
    I2C_MAX_FREQ    = core.I2C_MAX_FREQ

' Filter setting
    NONE            = 0
    PWM             = 1

VAR

    long _shdn
    byte _vol_level, _mod_mode

OBJ

    i2c     : "com.i2c"                         ' I2C engine
    core    : "core.con.max9744"                ' HW-specific constants

PUB null()
' This is not a top-level object

PUB startx(SCL_PIN, SDA_PIN, I2C_HZ=DEF_HZ, SHDN_PIN): status
' Start using custom I/O settings
'   Returns: Core/cog number+1 of I2C engine, FALSE if no cogs available
    if lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and {
}   I2C_HZ <= core.I2C_MAX_FREQ
        if (status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ))
            waitms(1)
            if (i2c.present(SLAVE_WR))          ' test device bus presence
                _shdn := SHDN_PIN
                powered(TRUE)                   ' SHDN pin high
                return status
    ' if this point is reached, something above failed
    ' Double check I/O pin assignments, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE

PUB stop()
' Stop the driver
    mute()
    powered(FALSE)
    i2c.deinit()

PUB modulation_mode{}: curr_mode
' Get current output filter mode (cached)
    return _mod_mode

PUB mute()
' Set 0 Volume
    set_volume(0)

PUB is_powered{}: curr_state
' Get current powered state
    return pinr(_shdn)

PUB powered(state)
' Power on or off
'   Valid values:
'       FALSE (0): Power off
'       TRUE (non-zero): Power on
    if (state)
        pinh(_shdn)
        set_volume(_vol_level)
    else
        pinl(_shdn)

PUB set_modulation(mode)
' Set modulation/output filter mode
'   NONE (0): Filterless
'   PWM (1): Classic PWM
    if (mode == NONE)
        _mod_mode := core.MOD_FILTERLESS        ' filterless modulation
    elseif (mode == PWM)
        _mod_mode := core.MOD_CLASSICPWM        ' classic PWM

    powered(FALSE)                              ' cycle power to effect changes
    powered(TRUE)

    writereg(_mod_mode)

PUB set_volume(level)
' Set Volume to a specific level
'   Valid values: 0..63
    _vol_level := 0 #> level <# 63
    writereg(_vol_level)

PUB vol_down()
' Decrease volume level
    writereg(core.CMD_VOL_DN)

PUB vol_up()
' Increase volume level
    writereg(core.CMD_VOL_UP)

PUB volume{}: curr_lvl
' Get current volume level (cached)
    return _vol_level

PRI writereg(reg_nr) | cmd_pkt
' Write register/command to device
    cmd_pkt.byte[0] := SLAVE_WR
    cmd_pkt.byte[1] := reg_nr

    i2c.start()
    i2c.wrblock_lsbf(@cmd_pkt, 2)
    i2c.stop()

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

