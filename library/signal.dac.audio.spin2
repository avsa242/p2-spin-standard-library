{
    --------------------------------------------
    Filename: signal.dac.audio.spin2
    Description: Audio output using smart pin-based DAC (2-channel)
    Author: Jesse Burt
    Copyright (c) 2023
    Started: Mar 16, 2020
    Updated: Jan 2, 2023
    See end of file for terms of use.
    --------------------------------------------
}
CON

    DAC_INIT_VAL        = 128
    SP_DAC_MODE         = P_DAC_990R_3V | (DAC_INIT_VAL << sp.DACLEVEL) | P_OE | P_DAC_DITHER_PWM

VAR

    long _L_PIN, _R_PIN

OBJ

    sp  : "core.con.smartpins"                  ' smart-pin modes/constants
    evt : "core.con.events"                     ' background events/constants

PUB start(L_PIN, R_PIN, SAMPRATE_HZ): status | period, se1setup
' Start DAC smart-pin on L_PIN, R_PIN at SAMPRATE_HZ
    if lookdown(L_PIN: 0..63) and lookdown(R_PIN: 0..63)
        longmove(@_L_PIN, @L_PIN, 2)
        period := (clkfreq / SAMPRATE_HZ)

        se1setup := evt.INP_RISES | L_PIN
        org
            wrpin   ##SP_DAC_MODE, L_PIN        ' Config left and right pins
            wrpin   ##SP_DAC_MODE, R_PIN        '   for smart-pin DAC mode
            wxpin   period, L_PIN               ' Set sample period for left
            wxpin   period, R_PIN               '   and right channels
            dirh    L_PIN                       ' Enable smart-pins
            dirh    R_PIN                       '
            setse1  se1setup                    ' trigger on every new sample
                                                '   period - on L_PIN rise
        end
        return cogid() + 1
    return FALSE

PUB stop()
' Stop the DACs
    pinf(_L_PIN)
    pinf(_R_PIN)
    wrpin(0, _L_PIN)
    wrpin(0, _R_PIN)

PUB samplerate = sample_rate
PUB sample_rate(rate)
' Restart with new sample rate, in Hz
'   NOTE: This re-starts the DAC smart pins
    stop()
    start(_L_PIN, _R_PIN, rate)

PUB output16(sample) | L_PIN, R_PIN
' Output an 16-bit audio sample
    longmove(@L_PIN, @_L_PIN, 2)
    org
        xor     sample, ##$8000
        wypin   sample, L_PIN                   ' Output sample on left channel
        wypin   sample, R_PIN                   ' Output sample on right channel
        waitse1
    end

PUB output8(sample) | L_PIN, R_PIN
' Output an 8-bit audio sample
    longmove(@L_PIN, @_L_PIN, 2)

    org
        xor     sample, ##$8000
        and     sample, #$FF
        wypin   sample, L_PIN                   ' Output sample on left channel
        wypin   sample, R_PIN                   ' Output sample on right channel
        waitse1
    end

DAT
{
Copyright 2023 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

