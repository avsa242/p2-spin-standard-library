{                                                                                                                
    --------------------------------------------
    Filename: com.spi.bitbang-fast.spin2
    Description: SPI engine (bit-banged, faster) for the Propeller 2
    Author: Jesse Burt
    Created: Nov 9, 2019
    Updated: Jul 18, 2020
    See end of file for terms of use.
    --------------------------------------------

    NOTE: Based on SPI_Spin.spin, by Beau Schwabe. The original
        header is preserved below.
}

{{
************************************************
* Propeller SPI Engine  ... Spin Version  v1.0 *
* Author: Beau Schwabe                         *
* Copyright (c) 2009 Parallax                  *
* See end of file for terms of use.            *
************************************************

Revision History:
         V1.0   - original program

}}
CON

' Bit order: Read/ShiftIn
' MSBPRE   - Most Significant Bit first ; data is valid before the clock
' LSBPRE   - Least Significant Bit first ; data is valid before the clock
' MSBPOST  - Most Significant Bit first ; data is valid after the clock
' LSBPOST  - Least Significant Bit first ; data is valid after the clock
    #0, MSBPRE, LSBPRE, MSBPOST, LSBPOST

' Bit order: Write/ShiftOut
' LSBFIRST - Least Significant Bit first ; data is valid after the clock
' MSBFIRST - Most Significant Bit first ; data is valid after the clock
    #4, LSBFIRST, MSBFIRST

VAR

    long _clock_delay, _CPOL

PUB Start(MOSI, MISO, SCK, SCK_HZ, CPOL=0): okay

    _CPOL := CPOL
    _dirw(MOSI, 1)
    if MISO <> -1
        _dirw(MISO, 0)
    pinw(SCK, _CPOL)
    _dirw(SCK, 1)
    _clock_delay := ((clkfreq / SCK_HZ) / 2) #> 2
    okay := cogid() + 1

PUB Read(MISO, SCK, mode, nr_bits): result | clk_delay, tmp

    clk_delay := _clock_delay
    pinw(SCK, _CPOL)                                         ' Set initial clock state/clock polarity
    tmp := 32 - nr_bits

    result := 0

    case_fast mode
        MSBPRE:
            repeat nr_bits
                waitx(clk_delay)
                pint(SCK)
                waitx(clk_delay)
                pint(SCK)
                result := (result << 1) | pinr(MISO)

        LSBPRE:
            repeat nr_bits + 1
                result := (result >> 1) | (pinr(MISO) << 31)
                waitx(clk_delay)
                pint(SCK)
                waitx(clk_delay)
                pint(SCK)
                result >>= tmp

        MSBPOST:
            repeat nr_bits
                pint(SCK)
                waitx(clk_delay)
                pint(SCK)
                waitx(clk_delay)
                result := (result << 1) | pinr(MISO)

        LSBPOST:
            repeat nr_bits + 1
                pint(SCK)
                waitx(clk_delay)
                pint(SCK)
                waitx(clk_delay)
                result := (result >> 1) | (pinr(MISO) << 31)
                result >>= tmp

    return result

PUB Write(MOSI, SCK, mode, nr_bits, val) | clk_delay, tmp

    clk_delay := _clock_delay
    tmp := 32-(nr_bits-1)
    case_fast mode
        LSBFIRST:
            val <<= tmp
            val := val REV 31
        MSBFIRST:

    org
            shl     val,        tmp     wc

            rep     #loop,      nr_bits
            outc    MOSI                                    ' Put the MSB out on MOSI

            waitx   clk_delay
            drvnot  SCK                                     ' Clock out
            waitx   clk_delay
            drvnot  SCK

            shl     val,        #1      wc                  ' Shift the next bit into position for MOSI
        loop
    end

DAT
{
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}
