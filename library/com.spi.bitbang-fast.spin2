{                                                                                                                
    --------------------------------------------
    Filename: com.spi.bitbang-fast.spin2
    Description: SPI engine (bit-banged, faster) for the Propeller 2
    Author: Jesse Burt
    Created: Nov 9, 2019
    Updated: Nov 9, 2019
    See end of file for terms of use.
    --------------------------------------------

    NOTE: Based on SPI_Spin.spin, by Beau Schwabe. The original
        header is preserved below.
}

{{
************************************************
* Propeller SPI Engine  ... Spin Version  v1.0 *
* Author: Beau Schwabe                         *
* Copyright (c) 2009 Parallax                  *
* See end of file for terms of use.            *
************************************************

Revision History:
         V1.0   - original program

}}
CON

' Bit order: Read/ShiftIn
' MSBPRE   - Most Significant Bit first ; data is valid before the clock
' LSBPRE   - Least Significant Bit first ; data is valid before the clock
' MSBPOST  - Most Significant Bit first ; data is valid after the clock
' LSBPOST  - Least Significant Bit first ; data is valid after the clock
    #0, MSBPRE, LSBPRE, MSBPOST, LSBPOST

' Bit order: Write/ShiftOut
' LSBFIRST - Least Significant Bit first ; data is valid after the clock
' MSBFIRST - Most Significant Bit first ; data is valid after the clock
    #4, LSBFIRST, MSBFIRST

VAR

    long _clock_delay, _CPOL

PUB Start(MOSI, MISO, SCK, SCK_HZ, CPOL=0): okay

    _CPOL := CPOL
    _dir(MOSI, 1)
    if MISO <> -1
        _dir(MISO, 0)
    out_(SCK, _CPOL)
    _dir(SCK, 1)
    _clock_delay := ((clkfreq / SCK_HZ) / 2) #> 2
    okay := cogid + 1

PUB Read(MISO, SCK, mode, nr_bits)

    _dir(MISO, 0)                                            ' Make MISO input
    out_(SCK, _CPOL)                                         ' Set initial clock state/clock polarity
    _dir(SCK, 1)                                             ' Make SCK output

    result := 0

    case_fast mode
        MSBPRE:
            repeat nr_bits
                result := (result << 1) | _pinr(MISO)
                PostClock(SCK)

        LSBPRE:
            repeat nr_bits + 1
                result := (result >> 1) | (_pinr(MISO) << 31)
                PostClock(SCK)
                result >>= (32 - nr_bits)

        MSBPOST:
            repeat nr_bits
                PreClock(SCK)
                result := (result << 1) | _pinr(MISO)


        LSBPOST:
            repeat nr_bits + 1
                PreClock(SCK)
                result := (result >> 1) | (_pinr(MISO) << 31)
                result >>= (32 - nr_bits)

    return result

PUB Write(MOSI, SCK, mode, nr_bits, val) | clk_delay, tmp

    clk_delay := _clock_delay
{' SPIN2
    tmp := 32-(nr_bits)
    case_fast mode
        LSBFIRST:
        MSBFIRST:
            val <<= tmp
            val := val REV 31

    repeat nr_bits
        out_(MOSI, val & %1)

        waitx_(clk_delay)
        drvnot_(SCK)
        waitx_(clk_delay)
        drvnot_(SCK)

        val >>= 1
}

' Inline PASM2
    tmp := 32-(nr_bits-1)
    case_fast mode
        LSBFIRST:
            val <<= tmp
            val := val REV 31
        MSBFIRST:

    asm
            shl     val,        tmp     wc                  ' Shift the byte to the MS position

            rep     #loop,      nr_bits
            outc    MOSI                                    ' Put the MSB out on MOSI

            waitx   clk_delay                               ' Clock out
            drvnot  SCK
            waitx   clk_delay
            drvnot  SCK

            shl     val,        #1      wc                  ' Shift the next bit into position for MOSI
        loop
    endasm

PRI postClock(SCK) | clkd

    clkd := _clock_delay

    asm
        waitx   clkd
        outnot  SCK
        waitx   clkd
        outnot  SCK
    endasm
'    waitx_(_clock_delay)   'despite a 1:1 relationship, using
'    outnot_(SCK)           'the instrinsic method yields about 1/2 perf
'    waitx_(_clock_delay)   'of the inline asm
'    outnot_(SCK)

PRI preClock(SCK) | clkd

    clkd := _clock_delay

    asm
        outnot  SCK
        waitx   clkd
        outnot  SCK
        waitx   clkd
    endasm

'    outnot_(SCK)
'    waitx_(_clock_delay)
'    outnot_(SCK)
'    waitx_(_clock_delay)

DAT
{
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}
