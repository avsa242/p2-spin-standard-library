{
    --------------------------------------------
    Filename: printf.spin2
    Author: Jesse Burt
    Description: (s)printf() benchmark
    Copyright (c) 2022
    Started 2022
    Updated Oct 30, 2022
    See end of file for terms of use.
    --------------------------------------------
}
CON

    _clkfreq    = cfg#_clkfreq_def
    _xtlfreq    = cfg#_xtlfreq

' -- User-modifiable constants
    SER_BAUD    = 2_000_000
' --

    BUFF_SZ     = 200
OBJ

    cfg : "boardcfg.p2eval"
    ser : "com.serial.terminal.ansi"
    str : "string"
    
VAR

    long _stack_timer[50]
    long _timer_set
    byte _buff[BUFF_SZ]

PUB main() | count, time_tmp

    setup()

    time_tmp := 1_000
    cogspin(NEWCOG, cog_timer(), @_stack_timer)

    count := 0
    ser.printf(@"Testing loop speed for %d ms...\n\r", time_tmp)

    _timer_set := time_tmp                      ' Time in msec (e.g., 10_000 = 10000ms, or 10sec)
    repeat                                      ' Loop to time a piece of code
'        ser.printf(@"Test %d\n", 1)
'        bytefill(@_buff, 0, BUFF_SZ)
        longfill(@_buff, 0, BUFF_SZ/4)
        str.sprintf(@_buff, @"Test %d\n", 1)
        count++                                 '   count how many iterations
    while _timer_set                            '   until the timer has been reset by the timer cog

    { print statistics }
    ser.printf(@"Ran %d loops in %d ms.\n\r", count, time_tmp)
    ser.printf(@"Loops/sec: %d", count / (time_tmp/1000))

    repeat

PRI cog_timer() | time_left
' Simple timer that runs in a dedicated cog
    repeat
        repeat until _timer_set                 ' Wait until _timer_set is set to something non-zero
        time_left := _timer_set                 ' Copy it into a local variable for faster access

        repeat
            time_left--                         ' Loop, decrementing that local variable
            waitms(1)                           '   with a 1ms wait in between
        while time_left > 0                     '   until it's zero
        _timer_set := 0                         ' Reset the hub variable

PUB setup()

    ser.start(SER_BAUD)
    ser.clear()
    ser.strln(@"Serial terminal started")

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

