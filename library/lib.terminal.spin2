{
    --------------------------------------------
    Filename: lib.terminal.spin2
    Author: Jesse Burt
        (based on std_text_routines.spinh,
        by Eric Smith)
    Description: Library to extend a terminal driver with
        standard terminal routines (Bin, Dec, Hex, PrintF, Str)
    Copyright (c) 2021
    Started Dec 14, 2019
    Updated Jun 22, 2021
    See end of file for terms of use.
    --------------------------------------------
}

{{
   Standard routines for dealing with text
   These are intended to extend any class with a "char" method
   With the following additional methods

   Str(s)         : Print a string; note that unlike standard Spin the string()
      wrapper is not required for string literals, because we have defaulted
      the parameter s to be a string
   Dec(d)         : Print a signed decimal number
   DecUns(d)      : Print an unsigned decimal number
   Hex(d, n)      : Print a hex number with n digits (n defaults to 8)
   Bin(d, n)      : Print a binary number with n digits (n defaults to 32)
   NewLine        : Print a carriage return and line-feed
   PrintF(s, ...) : Like C printf
}}

CON

    BS              =  8                                    ' Backspace
    TB              =  9                                    ' Tab
    CB              = 12                                    ' Clear
    CR              = 13                                    ' Carriage Return
    LF              = 10                                    ' Line Feed
    DEL             = 127

    MAXSTR_LENGTH   = 32                                    ' Max length of received numerical string (not including null/0) - accommodates worst-case, a binary number with 32 digits

VAR

    byte buffer[MAXSTR_LENGTH+1]

PUB Bin(val, digits = 32) | mask
' Print a number in binary form
    if digits > 0 and digits < 32
        mask := (decod digits) - 1
        val &= mask
    num(val, 2, 0, digits)

PUB Dec(val)
' Print a signed decimal number
    num(val, 10, 1, 0)

PUB DecUns(val, digits = 0)
' Print an unsigned decimal number with the specified
'   number of digits; 0 means just use as many as we need
    num(val, 10, 0, digits)

PUB Hex(val, digits = 8) | mask
' Print a hex number with the specified number
'   of digits; 0 means just use as many as we need

    if digits > 0 and digits < 8
        mask := (decod (4*digits)) - 1
        val &= mask
    num(val, 16, 0, digits)

PUB NewLine()
' Print a carriage return and line-feed
    char(CR)
    char(LF)

PUB Num(val, base, signflag, digitsneeded) | i, digit, r1, q1
' Print an number with a given base
' We do this by finding the remainder repeatedly
' This gives us the digits in reverse order
'   so we store them in a buffer; the worst case
'   buffer size needed is 32 (for base 2)
'
'
' signflag indicates how to handle the sign of the
' number:
'   0 == treat number as unsigned
'   1 == print nothing before positive numbers
'   anything else: print before positive numbers
' for signed negative numbers we always print a "-"
'
' we will print at least prec digits
'
' If signflag is nonzero, it indicates we should treat
' val as signed; if it is > 1, it is a character we should
' print for positive numbers (typically "+")
    if (signflag)
        if (val < 0)
            signflag := "-"
            val := -val

' Make sure we will not overflow our buffer
    if (digitsneeded > 32)
        digitsneeded := 32

' Accumulate the digits
    i := 0
    repeat
        if (val < 0)
' Synthesize unsigned division from signed
' Basically shift val right by 2 to make it positive
' Then adjust the result afterwards by the bit we
' shifted out
            r1 := val & 1  ' Capture low bit
            q1 := val >> 1 ' Divide val by 2
            digit := r1 + 2 * (q1 // base)
            val := 2 * (q1 / base)
            if (digit >= base)
                val++
                digit -= base
        else
            digit := val // base
            val := val / base

        if (digit >= 0 and digit <= 9)
            digit += "0"
        else
            digit := (digit - 10) + "A"
        buffer[i++] := digit
        --digitsneeded
    while (val <> 0 or digitsneeded > 0) and (i < 32)
    if (signflag > 1)
        char(signflag)

' Now print the digits in reverse order
    repeat while (i > 0)
        char(buffer[--i])

PUB PrintF(fmt = string(""), an=0, bn=0, cn=0, dn=0, en=0, fn=0) | c, valptr, val
' C like formatted print
    valptr := @an
    repeat
        c := byte[fmt++]
        case_fast c
            0:
                quit
            "%":
                c := byte[fmt++]
                if (c == 0)
                    quit
                if (c == "%")
                    char(c)
                    next
                val := long[valptr]
                valptr += 4
                case c
                    "d": dec(val)
                    "u": decuns(val)
                    "x": hex(val)
                    "s": str(val)
                    "c": char(val)
            "\":
                c := byte[fmt++]
                if c == 0
                    quit
                case c
                    "n": newline()
                    "r": char(CR)
                    "t": char(BS)
                    other: char(c)
            OTHER:
                char(c)

PUB Str(s = string("")) | c
' Output a string
    repeat while ((c := byte[s++]) <> 0)
        char(c)

PUB StrLn(s = string(""))
' Output a string, with a newline appended
    str(s)
    newline()

