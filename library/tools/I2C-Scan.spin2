{
    --------------------------------------------
    Filename: I2C-Scan.spin2
    Author: Jesse Burt
    Description: Utility to scan for active devices on an I2C bus
    Copyright (c) 2022
    Started Jun 17, 2019
    Updated Nov 1, 2022
    See end of file for terms of use.
    --------------------------------------------
}

CON

    _xtlfreq   = cfg._xtlfreq
    _clkfreq   = cfg._clkfreq_def

' -- User-modifiable constants
    LED         = cfg.LED1
    SER_BAUD    = 2_000_000

    I2C_SCL     = 0
    I2C_SDA     = 1
    I2C_HZ      = 100_000
' --

OBJ

    cfg     : "boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    i2c     : "com.i2c"

VAR

    long _key_cog, _keyinput_stack[50]
    byte _fmt

PUB main() | slave_addr, flag, x, y, offsetx, offsety

    setup()
    ser.clear()
    ser.bold()
    ser.underline()
    ser.str(@"I2C Scanner")
    ser.underline_off()
    ser.bold_off()

    offsetx := 3
    offsety := 3

    ser.italic()
    ser.printf(@" (%d-bit format)", _fmt)
    ser.reset()
    ser.hide_cursor()

    { probe all _legal_ addresses (write devices only) for a device;
        'reserved' addresses (0..6, 120..127) are not touched since it's possible doing so
        could cause issues for some devices }
    repeat
        ser.pos_xy(13, 0)
        ser.dec(_fmt)
        repeat slave_addr from $08 to $77 step 2
            flag := i2c.present(slave_addr << 1)' probe this address for a device
            x := ((slave_addr & $F) + (slave_addr & $F)) + offsetx
            y := (slave_addr >> 4) + offsety
            show_addr(x, y, slave_addr, flag)
    until (_key_cog == 0)                       ' loop until key input cog is stopped

    ser.show_cursor()                           ' restore the terminal settings
    ser.clear()
    ser.reset()
    repeat

PUB show_addr(x, y, slave_addr, flag)            
' Show I2C device address
    if (_fmt == 7)                              ' 7-bit display format
        if (flag)
            ser.pos_xy(x, y)
            ser.color(ser.BLACK, ser.GREEN)
            ser.puthexs(slave_addr, 2)
            ser.reset()
        else
            ser.pos_xy(x, y)
            ser.puthexs(slave_addr, 2)
    else                                        ' 8-bit display format
        if (flag)
            ser.pos_xy(x, y)
            ser.color(ser.BLACK, ser.GREEN)
            ser.puthexs(slave_addr << 1, 2)
            ser.reset()
        else
            ser.pos_xy(x, y)
            ser.puthexs(slave_addr << 1, 2)

PRI cog_key_input()
' Wait for keypress from user
    repeat
        case ser.getchar()
            "7":
                _fmt := 7
            "8":
                _fmt := 8
            "q", "Q":
                _key_cog := 0
                cogstop(cogid())

PUB setup()

    ser.start(SER_BAUD)
    waitms(5)
    ser.reset()
    ser.clear()
    ser.strln(@"Serial terminal started")
    i2c.init(I2C_SCL, I2C_SDA, I2C_HZ)
    ser.strln(@"I2C driver started")
    _key_cog := cogspin(16, cog_key_input(), @_keyinput_stack)
    _fmt := 7

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}
