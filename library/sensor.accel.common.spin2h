{
---------------------------------------------------------------------------------------------------
    Filename:       sensor.accel.common.spin2h
    Description:    Routines common to all sensor.accel device drivers
    Author:         Jesse Burt
    Started:        Aug 31, 2022
    Updated:        Jan 21, 2024
    Copyright (c) 2024 - See end of file for terms of use.
---------------------------------------------------------------------------------------------------

    NOTE: This file must be included by the compiler using the
        #include preprocessor directive, _outside_ of any existing
        block designators (CON, VAR, OBJ, PUB, PRI, DAT)
}

OBJ math: "math.int"


VAR

    long _ares
    long _abias[ACCEL_DOF]
    long _ax, _ay, _az


PUB accel_data_cache()
' Cache an accelerometer data sample
    accel_data(@_ax, @_ay, @_az)


PUB accel_g(ax, ay, az) | tmp[ACCEL_DOF]
' Read the Accelerometer data and scale the outputs to
'   micro-g's (1_000_000 = 1.000000 g = 9.8 m/s/s)
    accel_data(@tmp[X_AXIS], @tmp[Y_AXIS], @tmp[Z_AXIS])
    long[ax] := accel_word2g(tmp[X_AXIS])
    long[ay] := accel_word2g(tmp[Y_AXIS])
    long[az] := accel_word2g(tmp[Z_AXIS])


PUB accel_word2g(accel_word): g
' Convert accelerometer ADC word to g's
    return (accel_word * _ares)


PUB calibrate_accel() | axis, orig_scl, orig_dr, tmp[ACCEL_DOF], tmpx, tmpy, tmpz, samples
' Calibrate the accelerometer
'   NOTE: The accelerometer must be oriented with the package top facing up
'       for this method to be successful
    { save current settings }
    orig_scl := accel_scale()
    orig_dr := accel_data_rate()

    accel_set_bias(0, 0, 0)                     ' clear existing bias

    { set sensor to driver-specific scale and data rate }
    accel_scale(CAL_XL_SCL)
    accel_data_rate(CAL_XL_DR)
    samples := CAL_XL_DR                        ' samples = DR, for 1 sec time

    { accumulate and average approx. 1sec worth of samples }
    longfill(@tmp, 0, 3+ACCEL_DOF)              ' clear tmp vars to 0
    repeat samples
        repeat until accel_data_rdy()
        accel_data(@tmpx, @tmpy, @tmpz)
        tmp[X_AXIS] += tmpx
        tmp[Y_AXIS] += tmpy
        tmp[Z_AXIS] += (tmpz-(1_000000 / _ares))' cancel out 1g on Z-axis

    { calculate averages }
    repeat axis from X_AXIS to Z_AXIS
        tmp[axis] /= samples

    { update offsets }
    accel_set_bias(tmp[X_AXIS], tmp[Y_AXIS], tmp[Z_AXIS])

    { restore existing settings }
    accel_scale(orig_scl)
    accel_data_rate(orig_dr)


PUB pitch(): a
' Get pitch angle of accelerometer, in degrees
#ifdef PITCH_INV
    return math.atan2(-_ay, _az)
#else
    return math.atan2(_ay, _az)
#endif


PUB roll(): a
' Get roll angle of accelerometer, in degrees
#ifdef ROLL_INV
    return math.atan2(-_ax, _az)
#else
    return math.atan2(_ax, _az)
#endif

DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}

