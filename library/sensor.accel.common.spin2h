{
    --------------------------------------------
    Filename: sensor.accel.common.spin2h
    Author: Jesse Burt
    Description: Routines common to all sensor.accel device drivers
    Copyright (c) 2022
    Started Aug 31, 2022
    Updated Sep 30, 2022
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This file must be included by the compiler using the
        #include preprocessor directive, _outside_ of any existing
        block designators (CON, VAR, OBJ, PUB, PRI, DAT)
}

OBJ math: "math.int"

VAR

    long _ares
    long _abias[ACCEL_DOF]
    long _ax, _ay, _az

PUB accel_data_cache()
' Cache an accelerometer data sample
    accel_data(@_ax, @_ay, @_az)

PUB accel_g(ax, ay, az) | tmp[ACCEL_DOF]
' Read the Accelerometer data and scale the outputs to
'   micro-g's (1_000_000 = 1.000000 g = 9.8 m/s/s)
    accel_data(@tmp[X_AXIS], @tmp[Y_AXIS], @tmp[Z_AXIS])
    long[ax] := accel_word2g(tmp[X_AXIS])
    long[ay] := accel_word2g(tmp[Y_AXIS])
    long[az] := accel_word2g(tmp[Z_AXIS])

PUB accel_word2g(accel_word): accel_g
' Convert accelerometer ADC word to g's
    return (accel_word * _ares)

PUB calibrate_accel() | axis, orig_scl, orig_dr, tmp[ACCEL_DOF], tmpx, tmpy, tmpz, samples
' Calibrate the accelerometer
'   NOTE: The accelerometer must be oriented with the package top facing up
'       for this method to be successful
    longfill(@axis, 0, 10)                      ' initialize vars to 0

    { save current settings }
    orig_scl := accel_scale()
    orig_dr := accel_data_rate()

    accel_set_bias(0, 0, 0)                     ' clear existing bias

    { set sensor to driver-specific scale and data rate }
    accel_scale(CAL_XL_SCL)
    accel_data_rate(CAL_XL_DR)
    samples := CAL_XL_DR                        ' samples = DR, for 1 sec time

    { accumulate and average approx. 1sec worth of samples }
    repeat samples
        repeat until accel_data_rdy()
        accel_data(@tmpx, @tmpy, @tmpz)
        tmp[X_AXIS] += tmpx
        tmp[Y_AXIS] += tmpy
        tmp[Z_AXIS] += (tmpz-(1_000000 / _ares))' cancel out 1g on Z-axis

    { calculate averages }
    repeat axis from X_AXIS to Z_AXIS
        tmp[axis] /= samples

    { update offsets }
    accel_set_bias(tmp[X_AXIS], tmp[Y_AXIS], tmp[Z_AXIS])

    { restore existing settings }
    accel_scale(orig_scl)
    accel_data_rate(orig_dr)

PUB pitch()
' Get pitch angle of accelerometer, in degrees
#ifdef PITCH_INV
    return math.atan2(-_ay, _az)
#else
    return math.atan2(_ay, _az)
#endif

PUB roll()
' Get roll angle of accelerometer, in degrees
#ifdef ROLL_INV
    return math.atan2(-_ax, _az)
#else
    return math.atan2(_ax, _az)
#endif

