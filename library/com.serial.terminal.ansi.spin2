{
    --------------------------------------------
    Filename: com.serial.terminal.ansi.spin2
    Description: ANSI-compatible serial terminal,
     using com.serial smartpin-based serial driver
     for low-level async serial.
    Author: Jesse Burt
    Copyright (c) 2018
    Created: Jun 15, 2019
    Updated: Jun 29, 2019
    See end of file for terms of use.
    --------------------------------------------

    NOTE: Based on SmartSerial.spin2, by Eric Smith
}

#include "lib.terminal.spin2"
#include "lib.ansiterminal.spin2"
#include "lib.termwidgets.spin2"

CON

    MAXSTR_LENGTH   = 49                                ' Max length of received numerical string (not including zero terminator)

OBJ

    ser : "com.serial"
    int : "string.integer"

VAR

    byte    str_buffer[MAXSTR_LENGTH+1]                 ' String buffer for numerical strings

PUB Start(baudrate) : okay

    okay := ser.Start(baudrate)
    Clear
    return okay

PUB StartRxTx(rxpin, txpin, mode, baudrate)

    return ser.StartRxTx(rxpin, txpin, mode, baudrate)

PUB BinIn

    StrInMax(@str_buffer, MAXSTR_LENGTH)
    return int.StrToBase(@str_buffer, 2)

PUB Char(ch)

    ser.Char(ch)

PUB CharIn

    return ser.CharIn

PUB Chars(ch, size)

    repeat size
        ser.Char(ch)

PUB DecIn

    StrInMax(@str_buffer, MAXSTR_LENGTH)
    return int.StrToBase(@str_buffer, 10)

PUB HexIn

    StrInMax(@str_buffer, MAXSTR_LENGTH)
    return int.StrToBase(@str_buffer, 16)

PUB ReadLine(line, maxline) : size | c

    repeat
        case c := CharIn
            BS:     if size
                        size--
                        ser.Char(c)
            NL, LF: byte[line][size] := 0
                    ser.Char(c)
                    quit
            other:  if size < maxline
                        byte[line][size++] := c
                        ser.Char(c)

PUB RXCheck: rxbyte

    return ser.RXCheck

PUB StrIn(stringptr)

    StrInMax(stringptr, -1)

PUB StrInMax(stringptr, maxcount)

    repeat while (maxcount--)                                                     'While maxcount not reached
        if (byte[stringptr++] := ser.CharIn) == CR                                'Get chars until CR
            quit
    byte[stringptr+(byte[stringptr-1] == CR)]~                                    'Zero terminate string; overwrite CR or append 0 char

