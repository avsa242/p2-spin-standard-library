{
   --------------------------------------------
    Filename: com.i2c.spin2
    Description: Bitbanged I2C driver for the P2X8C4M64P
    Author: Jesse Burt
    Created: Jun 15, 2019
    Updated: Jun 24, 2020
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is a derivative of jm_i2c.spin, the SPIN I2C driver
        originally written by Jon McPhalen. The originl header is
        perserved below.
}
'' =================================================================================================
''
''   File....... jm_i2c.spin2
''   Purpose.... Low-level I2C routines (requires pull-ups on SCL and SDA)
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2009-2014 Jon McPhalen
''               -- elements inspired by code from Mike Green
''   E-mail.....
''   Started.... 28 JUL 2009
''   Updated.... 06 APR 2014
''
'' =================================================================================================

'  IMPORTANT Note: This code requires pull-ups on the SDA _and_ SCL lines -- it does not drive
'  the SCL line high.

CON

    #0, ACK, NAK

VAR

    long _SCL                                               ' Bus pins
    long _SDA
    long _delay, _hdelay, _qdelay

PUB Setup(I2C_SCL, I2C_SDA, I2C_HZ=100_000): okay
' Define I2C SCL (clock) and SDA (data) pins
    _delay := (clkfreq/I2C_HZ)                              ' Calculate delays based on clock freq
    _hdelay := _delay >> 1
    _qdelay := _delay >> 2

    _SCL := I2C_SCL
    _SDA := I2C_SDA
    pinf(_SCL)                                              ' Float pins
    pinf(_SDA)
    reset()
    okay := cogid() + 1
    return

PUB Present(slave_addr): ackbit
' Pings device, returns true if ACK
    start()
    ackbit := (write(slave_addr) == ACK)
    stop()

PUB Read(ackbit): i2cbyte
' Read byte from I2C bus
'   Valid values:
'       ackbit:
'           ACK (0): Send ACK to slave device
'           NAK (non-zero): Send NAK to slave device
    ackbit := (ackbit <> 0)
    pinf(_SDA)                                              ' Make SDA input

    repeat 8
        qd()
        pinf(_SCL)                                          ' Float SCL
        hd()
        i2cbyte := (i2cbyte << 1) | pinr(_SDA)              ' Read the bit
        pinl(_SCL)                                          ' SCL low
        qd()

    (ackbit) ? pinf(_SDA) : pinl(_SDA)                      ' Output ACK bit
    qd()
    pinf(_SCL)                                              ' Float SCL
    hd()
    pinl(_SCL)                                              ' SCL low
    qd()

    return (i2cbyte & $FF)

PUB Reset()
' Reset device
    repeat 9
        pinl(_SCL)
        hd()
        pinf(_SCL)
        hd()
        if (pinr(_SDA))
            quit

PUB Start()
' I2C Start condition (S, Sr)
'   NOTE: Blocks while SCL held low (clock stretching)
    pinf(_SDA)                                               ' Float pins
    pinf(_SCL)
    repeat while (pinr(_SCL) == 0)                           ' Allow "clock stretching"
    hd()
    pinl(_SDA)                                               ' SDA low
    hd()
    pinl(_SCL)                                               ' SCL low
    hd()

PUB Stop()
' I2C Stop condition (P)
'   NOTE: Blocks while SCL held low (clock stretching)
    pinl(_SDA)                                               ' SDA low
    hd()
    pinf(_SCL)                                               ' Float SCL
    hd()
    repeat until (pinr(_SCL) == 1)                           ' Hold for clock stretch
    pinf(_SDA)                                               ' Float SDA
    hd()

PUB Wait(slave_addr) | ackbit
' Waits for I2C device to be ready for new command
    repeat
        start()
        ackbit := write(slave_addr)
    until (ackbit == ACK)

PUB WaitTimeout(slave_addr, usec): ackbit, timeout | tmp
' Wait for I2C device to be ready for new command, up to a maximum timeout of 'us' microseconds
'   Returns:
'       1st return value: TRUE if slave acknowledged, FALSE otherwise
'       2nd return value: Duration waited, in microseconds
    timeout := usec
    repeat
        start()
        ackbit := write(slave_addr)
        waitus(1)
        timeout--
    until (ackbit == ACK) OR (timeout == 0)
    return (ackbit == ACK), usec-timeout

PUB Write(i2cbyte): ackbit
' Write byte to I2C bus
' -- leaves SCL low
    i2cbyte := (i2cbyte ^ $FF) << 24                        ' Move msb (bit7) to bit31
    repeat 8                                                ' Output eight bits
        ((i2cbyte rol= 1) & %1) ? pinl(_SDA) : pinf(_SDA)   ' Send MSB first
        hd()
        pinf(_SCL)                                          ' Float SCL
        hd()
        pinl(_SCL)                                          ' SCL low
    pinf(_SDA)                                              ' Release SDA to read ack bit
    hd()
    pinf(_SCL)                                              ' Float SCL
    hd()
    ackbit := pinr(_SDA)                                    ' Read ack bit
    pinl(_SCL)                                              ' SCL low
    return ackbit

PRI hd()

    waitx (_hdelay)

PRI qd()

    waitx (_qdelay)

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
