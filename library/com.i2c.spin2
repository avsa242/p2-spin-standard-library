{
   --------------------------------------------
    Filename: com.i2c.spin2
    Description: Bitbanged I2C driver for the P2X8C4M64P
    Author: Jesse Burt
    Created: Jun 15, 2019
    Updated: Oct 11, 2022
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is based on jm_i2c.spin, by
        Jon McPhalen
}

' NOTE: Pull-up resistors are required on SDA _and_ SCL lines
'   This object doesn't drive either line (open-drain, not push-pull)

CON

    DEF_HZ  = 100_000

    ACK     = 0
    NAK     = 1

    LOW     = 0
    HIGH    = 1

VAR

    long _SCL, _SDA                             ' Bus pins
    long _bit_lo, _bit_hi, _bittm_base

PUB init(SCL, SDA, HZ=DEF_HZ): status
' Initialize I2C engine using custom I2C pins
'   SCL, SDA: 0..63 (each unique)
'   HZ: 1..1_000_000
'   NOTE: SCL duty cycle at 1MHz is approx 60-65%
    longmove(@_SCL, @SCL, 2)                    ' copy pins to hub

    _bittm_base := (clkfreq / HZ) / 2           ' calculate bit time based on
                                                '   system clock freq
    _bit_lo := _bittm_base - 36                 ' SCL low/hi times - account
    _bit_hi := _bittm_base + 19                 '   for overhead

    pinf(_SCL)                                  ' start with pins floating
    pinf(_SDA)

    return cogid()+1                            ' return current cog id

PUB deinit()
' Deinitialize - clear out hub vars
    longfill(@_SCL, 0, 2)

PUB present(slave_addr): status
' Pings device, returns true if ACK
    start()
    return (write(slave_addr) == ACK)

PUB rd_byte(ackbit): i2cbyte
' Read byte from I2C bus
    rdblock_lsbf(@i2cbyte, 1, ackbit)

PUB rdblock_lsbf(ptr_buff, nr_bytes, ack_last) | SCL, SDA, bit_lo, bit_hi, bytenum, i2cbyte
' Read nr_bytes from I2C bus into ptr_buff, LSByte-first
'   ack_last: send ACK/NAK after last byte read
'       (ACK will be sent for all prior bytes)
    longmove(@SCL, @_SCL, 4)
    ack_last := (ack_last <> 0)                 ' if <> 0, then it's a 1

    repeat bytenum from 0 to nr_bytes-1
        pinf(SDA)                               ' prep SDA for reading bits
        wait_clk_stretch()

        repeat 8
            pinf(SCL)
            i2cbyte := (i2cbyte << 1) | pinr(SDA)' read the bit
            waitx(bit_hi)
            pinl(SCL)
            waitx(bit_lo)

        ' output ACK bit:
        '   ACK, unless it's the last byte
        '   then, it's the user's decision
        ((bytenum == nr_bytes-1) & ack_last) ? (pinf(SDA)) : (pinl(SDA))
        pinf(SCL)                                   ' clock it out
        waitx(bit_hi)
        pinl(SCL)
        waitx(bit_lo)

        byte[ptr_buff][bytenum] := i2cbyte

PUB rdblock_msbf(ptr_buff, nr_bytes, ack_last) | SCL, SDA, bit_lo, bit_hi, bytenum, i2cbyte
' Read nr_bytes from I2C bus into ptr_buff, MSByte-first
'   ack_last: send ACK/NAK after last byte read
'       (ACK will be sent for all prior bytes)
    longmove(@SCL, @_SCL, 4)
    ack_last := (ack_last <> 0)                 ' if <> 0, then it's a 1

    repeat bytenum from nr_bytes-1 to 0
        pinf(SDA)                               ' prep SDA for reading bits
        wait_clk_stretch()

        repeat 8
            pinf(SCL)
            i2cbyte := (i2cbyte << 1) | pinr(SDA)' read the bit
            waitx(bit_hi)
            pinl(SCL)
            waitx(bit_lo)

        ' output ACK bit:
        '   ACK, unless it's the last byte
        '   then, it's the user's decision
        ((bytenum == 0) & ack_last) ? (pinf(SDA)) : (pinl(SDA))
        pinf(SCL)                               ' clock it out
        waitx(bit_hi)
        pinl(SCL)
        waitx(bit_lo)

        byte[ptr_buff][bytenum] := i2cbyte

PUB rdlong_lsbf(ackbit): i2c2long
' Read long from I2C bus, least-significant byte first
    rdblock_lsbf(@i2c2long, 4, ackbit)

PUB rdlong_msbf(ackbit): i2c2long
' Read long from I2C bus, least-significant byte first
    rdblock_msbf(@i2c2long, 4, ackbit)

PUB rdword_lsbf(ackbit): i2c2word
' Read word from I2C bus, least-significant byte first
    rdblock_lsbf(@i2c2word, 2, ackbit)

PUB rdword_msbf(ackbit): i2c2word
' Read word from I2C bus, least-significant byte first
    rdblock_msbf(@i2c2word, 2, ackbit)

PUB read(ackbit): i2cbyte
' Read byte from I2C bus
'   Valid values:
'       ackbit:
'           ACK (0):        Acknowledge byte
'           NAK (non-zero): Don't acknowledge byte
    rdblock_lsbf(@i2cbyte, 1, ackbit)

PUB reset() | SCL, SDA, bit_lo, bit_hi
' Reset I2C bus
    longmove(@SCL, @_SCL, 4)
    repeat 9                                    ' send up to 9 clock pulses
        pinl(SCL)
        waitx(bit_lo)
        pinf(SCL)
        waitx(bit_hi)
        if (pinr(SDA)) == HIGH                  ' if SDA is released,
            quit                                '   our work is done - return

PUB start()
' Create start or re-start condition (S, Sr)
'   NOTE: This method supports clock stretching;
'       waits while SCL pin is held low
    pinf(_SDA)                                  ' Float pins
    pinf(_SCL)
    wait_clk_stretch()
    waitx(_bittm_base)
    pinl(_SDA)                                  ' SDA low
    waitx(_bittm_base)
    pinl(_SCL)                                  ' SCL low
    waitx(_bittm_base)

PUB stop()
' Create I2C Stop condition (P)
'   NOTE: This method supports clock stretching;
'       waits while SDA pin is held low
    pinl(_SDA)                                  ' SDA low
    waitx(_bittm_base)
    pinf(_SCL)                                  ' Float SCL
    waitx(_bittm_base)
    wait_clk_stretch()
    pinf(_SDA)                                  ' Float SDA

    waitx(_bittm_base)

PUB wait(slave_addr): ackbit
' Wait for I2C device by repeatedly polling it
'   NOTE: This method will wait indefinitely,
'   if the device doesn't respond
    repeat
        start()
        ackbit := write(slave_addr)
    until (ackbit == ACK)

PUB wait_timeout(slave_addr, usec): status
' Wait for I2C device by repeatedly polling it,
'   up to a maximum timeout of 'usec' microseconds
'   Returns:
'       ACK(0): device responded within specified time
'       NAK(1): device didn't respond
    repeat
        if (present(slave_addr))
            return ACK
        waitus(1)
        usec--
    until (usec == 0)

    return NAK

PUB wr_byte(b): ackbit
' Write byte to I2C bus
    return wrblock_lsbf(@b, 1)

PUB wr_bytex(b, nr_bytes): ackbit | SCL, SDA, bit_lo, bit_hi, i2cbyte
' Repeatedly write byte to bus
'   b: byte to write
'   nr_bytes: number of bytes to write
    longmove(@SCL, @_SCL, 4)

    repeat nr_bytes
        i2cbyte := (b << 24)
        repeat 8
            ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
            waitx(bit_lo)                       ' clock out bit
            pinf(SCL)
            waitx(bit_hi)
            pinl(SCL)
        pinf(SDA)                               ' release SDA

        waitx(bit_lo)
        wait_clk_stretch()
        waitx(bit_hi)
        ackbit := pinr(SDA)                     ' read ack bit
        pinl(SCL)

        waitx(bit_lo)

PUB wrblock_lsbf(ptr_buff, nr_bytes): ackbit | SCL, SDA, bit_lo, bit_hi, bytenum, i2cbyte
' Write nr_bytes to I2C bus from ptr_buff, LSByte-first
'   Returns: ack bit of last byte written
    longmove(@SCL, @_SCL, 4)

    repeat bytenum from 0 to nr_bytes-1
        ' align byte with long bit 31
        i2cbyte := (byte[ptr_buff][bytenum] << 24)
        repeat 8                                ' output eight bits, MSB first
            ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
            waitx(bit_lo)                       ' clock out bit
            pinf(SCL)
            waitx(bit_hi)
            pinl(SCL)

        pinf(SDA)                               ' release SDA

        waitx(bit_lo)
        wait_clk_stretch()
        waitx(bit_hi)
        ackbit := pinr(SDA)                     ' read ack bit
        pinl(SCL)

        waitx(bit_lo)

PUB wrblock_msbf(ptr_buff, nr_bytes): ackbit | SCL, SDA, bit_lo, bit_hi, bytenum, i2cbyte
' Write nr_bytes to I2C bus from ptr_buff, MSByte-first
'   Returns: ack bit of last byte written
    longmove(@SCL, @_SCL, 4)

    repeat bytenum from nr_bytes-1 to 0
        ' align byte with long bit 31
        i2cbyte := (byte[ptr_buff][bytenum] << 24)
        repeat 8                                ' output eight bits, MSB first
            ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
            waitx(bit_lo)                       ' clock out bit
            pinf(SCL)
            waitx(bit_hi)
            pinl(SCL)

        pinf(SDA)                               ' release SDA

        waitx(bit_lo)
        wait_clk_stretch()
        waitx(bit_hi)
        ackbit := pinr(SDA)                     ' read ack bit
        pinl(SCL)

        waitx(bit_lo)

PUB wrlong_lsbf(long2i2c): ackbit
' Write long to I2C bus, least-significant byte first
    return wrblock_lsbf(@long2i2c, 4)

PUB wrlong_msbf(long2i2c): ackbit
' Write long to I2C bus, most-significant byte first
    return wrblock_msbf(@long2i2c, 4)

PUB wrlongx_lsbf(l, nr_longs): ackbit | SCL, SDA, bit_lo, bit_hi, tmp, i2cbyte
' Repeatedly write LSB-first long to bus
'   l: long to write
'   nr_longs: number of longs to write
    longmove(@SCL, @_SCL, 4)

    repeat nr_longs
        repeat tmp from 0 to 3
            ' align byte with long bit 31
            i2cbyte := (l.byte[tmp] << 24)
            repeat 8                            ' output eight bits, MSB first
                ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
                waitx(bit_lo)                   ' clock out bit
                pinf(SCL)
                waitx(bit_hi)
                pinl(SCL)

            pinf(SDA)                           ' release SDA

            waitx(bit_lo)
            wait_clk_stretch()
            waitx(bit_hi)
            ackbit := pinr(SDA)                 ' read ack bit
            pinl(SCL)

            waitx(bit_lo)

PUB wrLongx_msbf(l, nr_longs): ackbit | SCL, SDA, bit_lo, bit_hi, tmp, i2cbyte
' Repeatedly write MSB-first long to bus
'   l: long to write
'   nr_longs: number of longs to write
    longmove(@SCL, @_SCL, 4)

    repeat nr_longs
        repeat tmp from 3 to 0
            ' align byte with long bit 31
            i2cbyte := (l.byte[tmp] << 24)
            repeat 8                            ' output eight bits, MSB first
                ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
                waitx(bit_lo)                   ' clock out bit
                pinf(SCL)
                waitx(bit_hi)
                pinl(SCL)

            pinf(SDA)                           ' release SDA

            waitx(bit_lo)
            wait_clk_stretch()
            waitx(bit_hi)
            ackbit := pinr(SDA)                 ' read ack bit
            pinl(SCL)

            waitx(bit_lo)

PUB wrword_lsbf(word2i2c): ackbit
' Write word to I2C bus, least-significant byte first
    return wrblock_lsbf(@word2i2c, 2)

PUB wrword_msbf(word2i2c): ackbit
' Write word to I2C bus, most-significant byte first
    return wrblock_msbf(@word2i2c, 2)

PUB wrwordx_lsbf(w, nr_words): ackbit | SCL, SDA, bit_lo, bit_hi, tmp, i2cbyte
' Repeatedly write LSB-first word to bus
'   w: word to write
'   nr_words: number of words to write
    longmove(@SCL, @_SCL, 4)

    repeat nr_words
        repeat tmp from 0 to 1
            ' align byte with long bit 31
            i2cbyte := (w.byte[tmp] << 24)
            repeat 8                            ' output eight bits, MSB first
                ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
                waitx(bit_lo)                   ' clock out bit
                pinf(SCL)
                waitx(bit_hi)
                pinl(SCL)

            pinf(SDA)                           ' release SDA

            waitx(bit_lo)
            wait_clk_stretch()
            waitx(bit_hi)
            ackbit := pinr(SDA)                 ' read ack bit
            pinl(SCL)

            waitx(bit_lo)

PUB wrwordx_msbf(w, nr_words): ackbit | SCL, SDA, bit_lo, bit_hi, tmp, i2cbyte
' Repeatedly write MSB-first word to bus
'   w: word to write
'   nr_words: number of words to write
    longmove(@SCL, @_SCL, 4)

    repeat nr_words
        repeat tmp from 1 to 0
            ' align byte with long bit 31
            i2cbyte := (w.byte[tmp] << 24)
            repeat 8                            ' output eight bits, MSB first
                ((i2cbyte rol= 1) & 1) ? (pinf(SDA)) : (pinl(SDA))
                waitx(bit_lo)                   ' clock out bit
                pinf(SCL)
                waitx(bit_hi)
                pinl(SCL)

            pinf(SDA)                           ' release SDA

            waitx(bit_lo)
            wait_clk_stretch()
            waitx(bit_hi)
            ackbit := pinr(SDA)                 ' read ack bit
            pinl(SCL)

            waitx(bit_lo)

PUB write(i2cbyte): ackbit | SCL, SDA, bit_lo, bit_hi
' Write byte to I2C bus
    return wrblock_lsbf(@i2cbyte, 1)

PRI wait_clk_stretch()
' Wait for slave device using clock-stretching
    pinf(_SCL)                                  ' let SCL float
    repeat until pinr(_SCL) == HIGH             ' wait until slave releases it

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

