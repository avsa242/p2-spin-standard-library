{
   --------------------------------------------
    Filename: com.i2c.spin2
    Description: Bitbanged I2C driver for the P2X8C4M64P
    Author: Jesse Burt
    Created: Jun 15, 2019
    Updated: Jun 22, 2020
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is a derivative of jm_i2c.spin, the SPIN I2C driver
        originally written by Jon McPhalen. The originl header is
        perserved below.
}
'' =================================================================================================
''
''   File....... jm_i2c.spin2
''   Purpose.... Low-level I2C routines (requires pull-ups on SCL and SDA)
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2009-2014 Jon McPhalen
''               -- elements inspired by code from Mike Green
''   E-mail.....
''   Started.... 28 JUL 2009
''   Updated.... 06 APR 2014
''
'' =================================================================================================

'  IMPORTANT Note: This code requires pull-ups on the SDA _and_ SCL lines -- it does not drive
'  the SCL line high.

CON

    #0, ACK, NAK

OBJ

    time    : "time"

VAR

    long _scl                                                   ' Bus pins
    long _sda
    long _delay, _hdelay, _qdelay

PUB Setup(I2C_SCL, I2C_SDA, I2C_HZ=100_000)
' Define I2C SCL (clock) and SDA (data) pins
    _delay := (clkfreq/I2C_HZ)                                 ' Calculate delays based on clock freq
    _hdelay := _delay >> 1
    _qdelay := _delay >> 2

    _scl := I2C_SCL
    _sda := I2C_SDA
    _dirw(_scl, 0)                                              ' Float pins
    _dirw(_sda, 0)
    Reset
    result := cogid + 1
    return

PUB Present(slave_addr)
' Pings device, returns true if ACK
    Start
    result := (Write(slave_addr) == ACK)
    Stop

PUB Read(ackbit) | i2cbyte
' Read byte from I2C bus
'      Send ackbit to slave: ACK (0) or NAK (1)
    _dirw(_sda, 0)                                             ' Make SDA input

    repeat 8
        qd
        _dirw(_scl, 0)                                         ' Float SCL
        hd
        i2cbyte := (i2cbyte << 1) | _pinr(_sda)               ' Read the bit
        _dirw(_scl, 1)                                         ' SCL low
        qd

    _dirw(_sda, !ackbit)                                       ' Output ack bit
    qd
    _dirw(_scl, 0)                                             ' Float SCL
    hd
    _dirw(_scl, 1)                                             ' SCL low
    qd

    return (i2cbyte & $FF)

PUB Reset
' Reset device
    repeat 9
        _dirw(_scl, 1)
        hd
        _dirw(_scl, 0)
        hd
        if (_pinr(_sda))
            quit

PUB Start
' I2C Start condition (S, Sr)
' -- will wait if I2C bus SDA pin is held low
    _dirw(_sda, 0)                                               ' Float pins
    _dirw(_scl, 0)
    repeat
    while (_pinr(_scl) == 0)                                    ' Allow "clock stretching"
    hd
    _dirw(_sda, 1)                                               ' SDA low
    hd
    _dirw(_scl, 1)                                               ' SCL low
    hd

PUB Stop
' I2C Stop condition (P)
    _dirw(_sda, 1)                                               ' SDA low
    hd
    _dirw(_scl, 0)                                               ' Float SCL
    hd
    repeat
    until (_pinr(_scl) == 1)                                    ' Hold for clock stretch
    _dirw(_sda, 0)                                               ' Float SDA
    hd

PUB Wait(slave_addr) | ackbit
' Waits for I2C device to be ready for new command

    repeat
        Start
        ackbit := write(slave_addr)
    until (ackbit == ACK)

PUB WaitTimeout(slave_addr, us) | ackbit, tmp, timeout
' Wait for I2C device to be ready for new command, up to a maximum timeout of 'us' microseconds
'   Returns:
'       1st return value: TRUE if slave acknowledged, FALSE otherwise
'       2nd return value: Duration waited, in microseconds
    timeout := us
    repeat
        Start
        ackbit := write(slave_addr)
        time.USleep(1)
        timeout--
    until (ackbit == ACK) OR (timeout == 0)
    return (ackbit == ACK), us-timeout

PUB Write(i2cbyte) | ackbit
' Write byte to I2C bus
' -- leaves SCL low
    i2cbyte := (i2cbyte ^ $FF) << 24                             ' Move msb (bit7) to bit31
    repeat 8                                                     ' Output eight bits
        _dirw(_sda, i2cbyte <-= 1)                                ' Send msb first
        hd
        _dirw(_scl, 0)                                            ' Float SCL
        hd
        _dirw(_scl, 1)                                            ' SCL low
    _dirw(_sda, 0)                                                ' Release SDA to read ack bit
    hd
    _dirw(_scl, 0)                                                ' Float SCL
    hd
    ackbit := _pinr(_sda)                                        ' Read ack bit
    _dirw(_scl, 1)                                                ' SCL low
    return ackbit

PRI hd

    _waitx (_hdelay)

PRI qd

    _waitx (_qdelay)

DAT
{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}
