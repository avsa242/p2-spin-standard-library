{
    --------------------------------------------
    Filename: TCS3x7x-Test.spin2
    Author: Jesse Burt
    Description: Test app for the TCS3x7x driver (P2 version)
    Copyright (c) 2020
    Started Nov 12, 2019
    Updated Mar 24, 2020
    See end of file for terms of use.
    --------------------------------------------
}

CON

    XTAL        = cfg#XTAL
    XDIV        = cfg#XDIV
    XMUL        = cfg#XMUL
    XDIVP       = cfg#XDIVP
    XOSC        = cfg#XOSC
    XSEL        = cfg#XSEL
    XPPPP       = cfg#XPPPP
    CLOCKFREQ   = cfg#CLOCKFREQ
    SETFREQ     = cfg#SETFREQ
    ENAFREQ     = cfg#ENAFREQ

    LED         = cfg#LED1
    SER_RX      = cfg#SER_RX
    SER_TX      = cfg#SER_TX
    SER_BAUD    = 2_000_000

    COL_REG     = 0
    COL_SET     = 12
    COL_READ    = 24
    COL_PF      = 40

    I2C_SCL     = 12
    I2C_SDA     = 11
    I2C_HZ      = 400_000
    WHITE_LED   = 14

OBJ

    cfg     : "core.con.boardcfg.p2eval"
    ser     : "com.serial.terminal.ansi"
    time    : "time"
    rgb     : "sensor.color.tcs3x7x.i2c.spin2"
    int     : "string.integer"
    io      : "io"

VAR

    long _fails, _expanded
    byte _ser_cog, _row

PUB Main | tmp, i, retval

    io.Low(WHITE_LED)
    io.Output(WHITE_LED)
    Setup
    ser.NewLine
    _row := 3

'    _expanded := TRUE

    WLONG(1)
    WEN(1)
    WTIME(1)
    AEN(1)
    PON(1)
    PERS(1)
    AIHT(1)
    AILT(1)
    AIEN(1)
    ATIME(1)
    GAIN(1)

    FlashLED (LED, 100)

PUB WLONG(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from -1 to 0
            rgb.WaitLongTimer(tmp)
            read := rgb.WaitLongTimer
            Message ("WLONG", tmp, read)

PUB WEN(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from -1 to 0
            rgb.WaitTimer(tmp)
            read := rgb.WaitTimer
            Message ("WEN", tmp, read)

PUB WTIME(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from 1 to 256
            rgb.WaitTime(tmp)
            read := rgb.WaitTime
            Message ("WTIME", tmp, read)

PUB AEN(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from 0 to 1
            rgb.OpMode(tmp)
            read := rgb.OpMode
            Message ("AEN", tmp, read)

PUB PON(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from -1 to 0
            rgb.Powered(tmp)
            read := rgb.Powered
            Message ("PON", tmp, read)

PUB PERS(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from 0 to 15
            rgb.Persistence(lookupz(tmp: 0, 1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60))
            read := rgb.Persistence
            Message ("PERS", lookupz(tmp: 0, 1, 2, 3, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60), read)

PUB AIHT(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from 0 to 65535
            rgb.IntThreshold(0, tmp)
            read := (rgb.IntThreshold >> 16) & $FFFF
            Message ("AIHT", tmp, read)

PUB AILT(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from 0 to 65535
            rgb.IntThreshold(tmp, 65535)
            read := rgb.IntThreshold & $FFFF
            Message ("AILT", tmp, read)

PUB AIEN(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from -1 to 0
            rgb.IntsEnabled(tmp)
            read := rgb.IntsEnabled
            Message ("AIEN", tmp, read)

PUB ATIME(reps) | tmp, read, cal

    _row++
    repeat reps
        repeat tmp from 0 to 255
            cal := (256-tmp) * 2_400
            if tmp == 0
                cal := 700_000
            case tmp
                0:
                    rgb.IntegrationTime(cal)
                    read := rgb.IntegrationTime
                    Message ("ATIME", 700_000, read)
                OTHER:
                    rgb.IntegrationTime(cal)
                    read := rgb.IntegrationTime
                    Message ("ATIME", (256-tmp) * 2_400, read)

PUB GAIN(reps) | tmp, read

    _row++
    repeat reps
        repeat tmp from 0 to 3
            rgb.Gain(lookupz(tmp: 1, 4, 16, 60))
            read := rgb.Gain
            Message ("GAIN", lookupz(tmp: 1, 4, 16, 60), read)

PUB TrueFalse(num)

    case num
        0: ser.printf("FALSE")
        -1: ser.printf("TRUE")
        OTHER: ser.printf("???")

PUB Message(field=string(""), arg1, arg2)

   case _expanded
        TRUE:
            ser.PositionX (COL_REG)
            ser.Str (field)

            ser.PositionX (COL_SET)
            ser.printf("SET: %d", arg1)

            ser.PositionX (COL_READ)
            ser.printf("READ: %d", arg2)

            ser.Chars (32, 3)
            ser.PositionX (COL_PF)
            PassFail (arg1 == arg2)
            ser.NewLine

        FALSE:
            ser.Position (COL_REG, _row)
            ser.Str (field)

            ser.Position (COL_SET, _row)
            ser.printf("SET: %d", arg1)

            ser.Position (COL_READ, _row)
            ser.printf("READ: %d", arg2)

            ser.Position (COL_PF, _row)
            PassFail (arg1 == arg2)
            ser.NewLine
        OTHER:
            ser.printf("DEADBEEF")

PUB PassFail(num)

    case num
        0: ser.printf("FAIL")
        -1: ser.printf("PASS")
        OTHER: ser.printf("???")

PUB Setup

    clkset(ENAFREQ, CLOCKFREQ)
    repeat until _ser_cog := ser.StartRXTX (SER_RX, SER_TX, 0, SER_BAUD)
    ser.Clear
    ser.printf("Serial terminal started\n")
    if rgb.Start(I2C_SCL, I2C_SDA, I2C_HZ)
        ser.printf("TCS3x7x driver started\n")
    else
        ser.printf("TCS3x7x driver failed to start - halting\n")
        time.MSleep (500)
        FlashLED(LED, 500)

#include "lib.utility.spin2"

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
