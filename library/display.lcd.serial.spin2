{
    --------------------------------------------
    Filename: display.lcd.serial.spin2
    Modified by: Jesse Burt
    Description: Driver for serial LCDs
        Parallax PNs (#27976, #27977, #27979)
    Started Apr 29, 2006
    Updated Jul 22, 2020
    See end of file for terms of use.
    --------------------------------------------

    NOTE: This is a derivative of Serial_Lcd.spin,
        originally by Jon Williams, Jeff Martin.
    The existing header is preserved below.
}

' Authors: Jon Williams, Jeff Martin
{{
    Driver for Parallax Serial LCDs (#27976, #27977, #27979)

    ## Serial LCD Switch Settings for Baud rate

        ┌─────────┐   ┌─────────┐   ┌─────────┐
        │   O N   │   │   O N   │   │   O N   │
        │ ┌──┬──┐ │   │ ┌──┬──┐ │   │ ┌──┬──┐ │
        │ │[]│  │ │   │ │  │[]│ │   │ │[]│[]│ │
        │ │  │  │ │   │ │  │  │ │   │ │  │  │ │
        │ │  │[]│ │   │ │[]│  │ │   │ │  │  │ │
        │ └──┴──┘ │   │ └──┴──┘ │   │ └──┴──┘ │
        │  1   2  │   │  1   2  │   │  1   2  │
        └─────────┘   └─────────┘   └─────────┘
           2400          9600          19200
}}

#include "lib.terminal.spin2"

CON

    LCD_BKSPC   = $08                                       ' move cursor left
    LCD_RT      = $09                                       ' move cursor right
    LCD_LF      = $0A                                       ' move cursor down 1 line
    LCD_CLS     = $0C                                       ' clear LCD (follow with 5 ms delay)
    LCD_CR      = $0D                                       ' move pos 0 of next line
    LCD_BL_ON   = $11                                       ' backlight on
    LCD_BL_OFF  = $12                                       ' backlight off
    LCD_OFF     = $15                                       ' LCD off
    LCD_ON1     = $16                                       ' LCD on; cursor off, blink off
    LCD_ON2     = $17                                       ' LCD on; cursor off, blink on
    LCD_ON3     = $18                                       ' LCD on; cursor on, blink off
    LCD_ON4     = $19                                       ' LCD on; cursor on, blink on
    BYTESPERLN  = $14
    LCD_LINE0   = $80                                       ' move to line 1, column 0
    LCD_LINE1   = $94                                       ' move to line 2, column 0
    LCD_LINE2   = $A8                                       ' move to line 3, column 0
    LCD_LINE3   = $BC                                       ' move to line 4, column 0

    #$F8, LCD_CC0, LCD_CC1, LCD_CC2, LCD_CC3
    #$FC, LCD_CC4, LCD_CC5, LCD_CC6, LCD_CC7

VAR

    long  _display_lines

OBJ

    serial  : "com.serial"

PUB Start(LCD_PIN, LCD_BAUD, LCD_LINES): okay

    if lookdown(LCD_PIN: 0..63)
        if lookdown(LCD_BAUD: 2400, 9600, 19200)                        ' must match DIP switches on LCD
            if lookdown(LCD_LINES: 2, 4)
                if okay := serial.StartRxTx(-1, LCD_PIN, 0, LCD_BAUD)   ' tx pin only, true mode
                    _display_lines := LCD_LINES                         ' save lines size
                    return okay

    return FALSE                                                        ' If we got here, something went wrong

PUB Char(txbyte)
' Display a character
    serial.char(txbyte)

PUB Clear()
' Clear LCD and move cursor to home (0, 0) position
    char(LCD_CLS)
    waitms(5)

PUB ClearLine(y)
' Clears line
    if _display_lines == 2                                  ' check lcd size
        if lookdown(y: 0..1)                                ' qualify line input
            char(posoffset(0, y))                           ' move to that line
            repeat 16
                char(32)                                    ' clear line with spaces
            char(posoffset(0, y))                           ' return to start of line
    else
        if lookdown(y: 0..3)
            char(posoffset(0, y))
            repeat 20
                char(32)
            char(posoffset(0, y))

PUB CursorMode(type)
' Select cursor type
'   Valid values:
'       0: cursor off, blink off
'       1: cursor off, blink on
'       2: cursor on, blink off
'       3: cursor on, blink on
'   Any other value sets mode 3
    case type
        0..3: char(LCD_ON1 + type)
        OTHER: char(LCD_ON3)                                ' use serial lcd power-up default

PUB DefineChars(bytechr, chrdataaddr)
' Install custom character map
'   Valid values:
'       bytechr:        Custom character number (0..7)
'       chrDataAddr:    Address of 8-byte character definition array
    if lookdown(bytechr: 0..7)                              ' make sure char in range
        char(LCD_CC0 + bytechr)                             ' write character code
        repeat 8
            char(byte[chrdataaddr++])                       ' write character data

PUB DisplayVisibility(enable)
' Control display visibility
'   Valid values:
'       Non-zero:   Normal display
'       FALSE (0):  Hide display contents (does not alter or erase contents - re-enable to display again)
'   NOTE: Enabling display visibility also changes the cursor mode to off
    if enable
        cursormode(0)
    else
        char(LCD_OFF)

PUB EnableBacklight(enable)
' Enable LCD backlight
'   Valid values:
'       TRUE (-1) or FALSE (0)
'   NOTE: Works only with backlight-equipped displays
    enable := enable <> 0                                   ' promote non-zero to -1
    if enable
        char(LCD_BL_ON)
    else
        char(LCD_BL_OFF)

PUB Home()
' Move cursor to 0, 0
    char(LCD_LINE0)

PUB Position(x, y) | pos
' Move cursor to x, y
    if _display_lines == 2                                  ' check lcd size
        if lookdown(y: 0..1)                                ' qualify y input
            if lookdown(x: 0..15)                           ' qualify x input
                char(posoffset(x,y))                        ' move to target position
    else
        if lookdown(y: 0..3)
            if lookdown(x: 0..19)
                char(posoffset(x,y))

PRI PosOffset(x, y): offset
' Calculate display offset, given x, y coords
    return LCD_LINE0 + x + (y * BYTESPERLN)

DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
