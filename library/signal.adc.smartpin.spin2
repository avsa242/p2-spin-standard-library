CON
    ADC_MODE_GND = %0000_0000_000_100000_0000000_00_01111_0
    ADC_MODE_VIO = %0000_0000_000_100001_0000000_00_01111_0
    ADC_MODE     = %0000_0000_000_100011_0000000_00_01111_0
    ADC_MODE3    = %0000_0000_000_100100_0000000_00_01111_0
    ADC_MODE10   = %0000_0000_000_100101_0000000_00_01111_0
    ADC_MODE30   = %0000_0000_000_100110_0000000_00_01111_0
    ADC_MODE100  = %0000_0000_000_100111_0000000_00_01111_0

    CAL_LOOP_SHIFT = 6
    CAL_MILLIVOLT = 3300
    '    CAL_VOLTAGE = ((CAL_MILLIVOLT << 16) / 1000) << (FIXFRACT - 16)
    SLEEP = $FF

{ params
N		long
fixint		long
buffer		long
pin		long
cycles		long
ready_flag	long
repeat		long
}

PUB start(params)
    cognew (@acquire_entry, params)


PUB  module_name
    result := string ("sa_acquire (smartpin ADC)")


DAT
		ORG	0

acquire_entry	rdlong  N, PTRA++
		rdlong	fixint, PTRA++
		rdlong	t, PTRA++
		rdlong	adc_pin, PTRA++
		rdlong	adc_cycles, PTRA++
		mov	ready_addr, PTRA
		rdlong  adc_repeat, ++PTRA
		shl	adc_cycles, adc_repeat

		mov	PTRA, t
		decod   size, N
		mov	fixfract, #32
		sub	fixfract, fixint

		mov	t, ##CAL_MILLIVOLT
		shl	t, #16
		QDIV    t, ##1000     ' get full scale volts * 2^16
		GETQX   cal_voltage
		mov	t, fixfract
		sub	t, #16		' convert to fixpoint representation
		shl	cal_voltage, t

		
.loop		rdbyte	t, ready_addr
		cmp	t, #0  wz
	if_z	jmp	#.loop

		cmp	t, #SLEEP  wz
	if_z	waitx	##1024
	if_z	jmp	#.loop

		call	#acquire	' read ADC samples
		call	#remove_dc	' subtract the mean

		wrbyte  #0, ready_addr
		jmp	#.loop



{ generic scan of array }

iterate	        cmp	iter_action, #0  wz
	if_z	jmp	iterate_ret
	
		mov	count, size
		cmp	half, #0  wz
	if_nz	shr	count, #1
	if_nz	add	count, #1
		mov	PTRB, PTRA
.loop
		rdlong	x, PTRB++
		rdlong	y, PTRB--
		call	iter_action
		wrlong	x, PTRB++
		wrlong	y, PTRB++
		djnz	count, #.loop
iterate_ret	ret

iter_action	long	0
half		long	0



{ multiply fixpoint }
mult		QMUL	a, b
		testb	a, #31  wc
		testb	b, #31  wz
		GETQY   val
		GETQX   lo
	if_c	sub	val, b
	if_z	sub	val, a
		shl	val, fixint
		shr	lo, fixfract
		or	val, lo
mult_ret	ret



{ acquisition, including scaling }
cal_mult        long    1
cal_shift	long    16
calib		long	0
cal_voltage	long	0

mode		long	ADC_MODE
modebit		long	$01000000

acq_sample_cal
		waitct1
		addct1  time, adc_cycles
		rdpin	x, adc_pin
		zerox	x, #15
		ret
		
acq_sample
		waitct1
		addct1  time, adc_cycles
		rdpin	x, adc_pin
		zerox	x, #15
{
		waitct1
		addct1  time, adc_cycles
		rdpin	x2, adc_pin
		zerox	x2, #15

		sub	x, x2

		waitct1
		addct1  time, adc_cycles
		rdpin	x3, adc_pin
		zerox	x3, #15

		waitct1
		addct1  time, adc_cycles
		rdpin	x4, adc_pin
		zerox	x4, #15

		sub	x3, x4
		add	x, x3
}
		mul	x, cal_mult
		shl	x, cal_shift
		mov	y, #0
		ret

calibrate	
		WRPIN   ##ADC_MODE_VIO, adc_pin
		WXPIN	adc_cycles, adc_pin
		WYPIN	#0, adc_pin    ' count A high
		dirh    adc_pin

		mov	calib, #0
		mov	count, #1 << CAL_LOOP_SHIFT
.loop1		call	#acq_sample_cal
		add	calib, x
		djnz	count, #.loop1
		dirl	adc_pin
		
		WRPIN   ##ADC_MODE_GND, adc_pin
		WXPIN	adc_cycles, adc_pin  ' every 1us
		WYPIN	#0, adc_pin    ' count A high
		dirh    adc_pin

		mov	count, #1 << CAL_LOOP_SHIFT
.loop2		call	#acq_sample_cal
		sub	calib, x
		djnz	count, #.loop2
		dirl	adc_pin
		WRPIN	#0, adc_pin
		
		mov	x, cal_voltage
		call	#bitcount
		mov	cal_shift, y
		mov	x, calib
		call	#bitcount
		sub	cal_shift, y    ' cal_shift = bit diff between 3.3V and Fscale<<CAL_SHIFT
		sub	cal_shift, #14  wc
	if_nc	shl	calib, cal_shift   ' line up for a reasonably accurate quotient of 14/15 bits
		neg	cal_shift
	if_c	shr	calib, cal_shift
		neg	cal_shift
		add	cal_shift, #CAL_LOOP_SHIFT
		QDIV	cal_voltage, calib
		GETQX	cal_mult
		
'		shr	cal_mult, #1
'		add	cal_shift, #1
		
calibrate_ret   ret


bitcount	mov	y, #0
.loop		add	y, #1
		shr	x, #1  wz
	if_nz	jmp	#.loop
bitcount_ret	ret


acquire		getct   time
		addct1  time, adc_cycles

		call	#calibrate

'		shr	adc_cycles, #2
		
		WRPIN   ##ADC_MODE, adc_pin
		WXPIN	adc_cycles, adc_pin  ' sets sampling rate
		WYPIN	#0, adc_pin    ' count A high indefinitely
		dirh    adc_pin

		mov	count, #10

		getct	time
		addct1  time, adc_cycles

.loop		call	#acq_sample
		djnz	count, #.loop
		
		mov	iter_action, #acq_sample
		call	#iterate

		dirl	adc_pin
'		shl	adc_cycles, #2
acquire_ret	ret



{ calc mean and subtract from samples }

remove_dc
		mov	hi, #0
		mov	lo, #0

		mov	iter_action, #remove1
		call	#iterate

		mov	t, #32
		sub	t, N
		shl	hi, t
		shr	lo, N
		or	hi, lo

		mov	iter_action, #remove2
		jmp	#iterate    ' tail call


remove1		testb   x, #31  wz
		add	lo, x  wc
		addx	hi, #0
	if_z	sub	hi, #1
remove1_ret	ret

remove2		sub	x, hi		' subtract DC offset
remove2_ret	ret


N		res     1
size		res     1
fixint		res	1
fixfract	res	1
adc_pin		res	1
adc_cycles	res     1
adc_repeat	res	1
ready_addr	res	1
count		res	1
time		res	1
val		res	1
a		res	1
b		res	1
t		res	1
x		res	1
y		res	1
hi		res	1
lo		res	1
x2		res	1
x3		res	1
x4		res	1


		FIT	$1EC
