{
    --------------------------------------------
    Filename: memory.eeprom.24xxxx.i2c.spin
    Author: Jesse Burt
    Description: Driver for 24xxxx-series I2C EEPROMs
    Copyright (c) 2021
    Started Oct 26, 2019
    Updated Jan 1, 2021
    See end of file for terms of use.
    --------------------------------------------
}

CON

    SLAVE_WR          = core.SLAVE_ADDR
    SLAVE_RD          = core.SLAVE_ADDR|1

    DEF_HZ            = 100_000
    I2C_MAX_FREQ      = core.I2C_MAX_FREQ

VAR

    long _ee_max_addr
    byte _page_size                             ' EE page size, in bytes

OBJ

    i2c : "com.i2c"                             ' bit-banged I2C engine
    core: "core.con.24xxxx"                     ' HW-specific constants
    time: "time"                                ' timekeeping methods

PUB Null()
'This is not a top-level object

PUB Startx(SCL_PIN, SDA_PIN, I2C_HZ=DEF_HZ): status
' Start using custom I/O settings
    if lookdown(SCL_PIN: 0..63) and lookdown(SDA_PIN: 0..63) and {
}   I2C_HZ <= core.I2C_MAX_FREQ
        if (status := i2c.init(SCL_PIN, SDA_PIN, I2C_HZ))
            waitms(1)
            eesize(512)                     ' most common P1 EE size
            if i2c.present(SLAVE_WR)        ' check device bus presence
                return
    ' if this point is reached, something above failed
    ' Double check I/O pin assignments, connections, power
    ' Lastly - make sure you have at least one free core/cog
    return FALSE

PUB Stop()

    i2c.deinit()

PUB EEMaxAddr(): maxaddr

    return _ee_max_addr

PUB EESize(size): curr_eesize
' Set EEPROM size, in kilobits
    case size
        1, 2:
            _page_size := 8
        4, 8, 16:
            _page_size := 16
        32, 64:
            _page_size := 32
        128, 256:
            _page_size := 64
        512:
            _page_size := 128
        1024, 2048:
            _page_size := 256
        other:
            return
    _ee_max_addr := ((size * 1024) >> 3) - 1

PUB PageSize(): psz
' Page size of currently set EEPROM size
    return _page_size

PUB ReadByte(ee_addr): eebyte
' Read single byte from EEPROM
    readreg(ee_addr, 1, @eebyte)

PUB ReadBytes(ee_addr, nr_bytes, ptr_buff)
' Read multiple bytes from EEPROM
    readreg(ee_addr, nr_bytes, ptr_buff)

PUB WriteByte(ee_addr, data)
' Write single byte to EEPROM
    writereg(ee_addr, 1, @data)

PUB WriteBytes(ee_addr, nr_bytes, ptr_buff)
' Write multiple bytes to EEPROM
'   Valid values (nr_bytes):
'       128, 256kbit EE: 1..64
'       512kbit EE: 1..128
'       1024kbit, 2048kbit EE: 1..256
    case nr_bytes
        1..256:
            writereg(ee_addr, nr_bytes, ptr_buff)
        other:
            return

PRI readReg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt
' Read nr_bytes from the slave device into ptr_buff
    case reg_nr
        0.._ee_max_addr:
            cmd_pkt.byte[0] := SLAVE_WR
            cmd_pkt.byte[1] := reg_nr.byte[1]
            cmd_pkt.byte[2] := reg_nr.byte[0]
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 3)

            i2c.start()
            i2c.write(SLAVE_RD)
            i2c.rdblock_lsbf(ptr_buff, nr_bytes, i2c.NAK)
            i2c.stop()
        other:
            return

PRI writeReg(reg_nr, nr_bytes, ptr_buff) | cmd_pkt
' Write nr_bytes from ptr_buff to the slave device
    case reg_nr
        0.._ee_max_addr:
            cmd_pkt.byte[0] := SLAVE_WR
            cmd_pkt.byte[1] := reg_nr.byte[1]
            cmd_pkt.byte[2] := reg_nr.byte[0]
            i2c.start()
            i2c.wrblock_lsbf(@cmd_pkt, 3)
            i2c.wrblock_lsbf(ptr_buff, nr_bytes)
            i2c.stop()
            waitms(core.T_WR)                   ' Wait "Write cycle time"
        other:
            return


DAT
{
    --------------------------------------------------------------------------------------------------------
    TERMS OF USE: MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
    associated documentation files (the "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
    following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    --------------------------------------------------------------------------------------------------------
}
